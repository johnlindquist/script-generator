[{"name":"Chrome Profiles","description":"","author":"Pavel 'Strajk' Dolecek","see":"https://learn.microsoft.com/en-us/windows/win32/sysinfo/file-times","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","twitter":"straaajk","discussion":"https://github.com/johnlindquist/kit/discussions/1552","url":"https://gist.githubusercontent.com/Strajk/956a5ef65da7769a89ba640ef187e7b7/raw/9a9bef372f9cab41dda484a3a7a750dd352bb087/chrome-profiles.ts","title":"🍎 List Chrome profiles and copy their path to clipboard/open in Finder","command":"list-chrome-profiles-and-copy-their-path-to-clipboardopen-in-finder","content":"I'm using a lot of profiles and often need their path for playwright/chrome extension testing, so I've made a script :)\r\nFeel free to adjust to your needs.\r\n\r\n![image](https://github.com/user-attachments/assets/b91cb23a-2ca9-477b-8aa2-e843ffb2a6c0)\r\n\r\n[Open chrome-profiles in Script Kit](https://scriptkit.com/api/new?name=chrome-profiles&url=https://gist.githubusercontent.com/Strajk/956a5ef65da7769a89ba640ef187e7b7/raw/9a9bef372f9cab41dda484a3a7a750dd352bb087/chrome-profiles.ts\")\r\n\r\n```ts\r\n// Name: Chrome Profiles\r\n// Description: List Chrome profiles and copy their path to clipboard/open in Finder\r\n// Author: Strajk\r\n\r\nimport '@johnlindquist/kit'\r\nimport { Choice } from '@johnlindquist/kit/types';\r\n\r\nconst chromeAppSupportPaths = [\r\n  home('Library/Application Support/Google/Chrome/'),\r\n  home('Library/Application Support/Google/Chrome Canary/'),\r\n  home('Library/Application Support/Google/Chrome Dev/'),\r\n]\r\n\r\nlet choices: Choice[] = []\r\n\r\nfor (const chromeAppSupportPath of chromeAppSupportPaths) {\r\n  if (!await pathExists(chromeAppSupportPath)) continue\r\n  const subdirs = await readdir(chromeAppSupportPath)\r\n  for (const subdir of subdirs) {\r\n    const profilePath = path.join(chromeAppSupportPath, subdir)\r\n    const profilePreferencesPath = path.join(profilePath, 'Preferences')\r\n    if (!await pathExists(profilePreferencesPath)) continue\r\n    try {\r\n      const preferencesRaw = await readFile(profilePreferencesPath, 'utf-8')\r\n      const preferencesJson = JSON.parse(preferencesRaw)\r\n      const useful = pickUsefulFromPreferences(preferencesJson)\r\n\r\n      let title = useful.accountEmail || useful.profileName\r\n      title += ` (created ${useful.profileCreationTime ? useful.profileCreationTime.toISOString().split('T')[0] : ''})`\r\n\r\n      let description = profilePath\r\n\r\n      let tag = ''\r\n      if (chromeAppSupportPath.includes('Google/Chrome Canary')) {\r\n        tag = 'Canary'\r\n      } else if (chromeAppSupportPath.includes('Google/Chrome Beta')) {\r\n        tag = 'Beta'\r\n      } else if (chromeAppSupportPath.includes('Google/Chrome Dev')) {\r\n        tag = 'Dev'\r\n      } else if (chromeAppSupportPath.includes('Google/Chrome')) {\r\n        tag = 'Stable'\r\n      }\r\n\r\n      let className = ''\r\n      if (isUnnamedProfile(title)) {\r\n        className = 'text-gray-400'\r\n      }\r\n\r\n      choices.push({\r\n        value: profilePath, // full path always as a value\r\n\r\n        img: useful.pictureUrl || useful.avatarUrl,\r\n        name: title,\r\n        description,\r\n        tag,\r\n        nameClassName: className,\r\n      })\r\n    } catch (e) {\r\n      console.warn(`Error parsing profile at ${profilePreferencesPath}`, e)\r\n    }\r\n  }\r\n}\r\n\r\nif (choices.length === 0) {\r\n  await div(\"No Chrome profiles found\")\r\n  exit()\r\n}\r\n\r\n// Sort choices: regular profiles alphabetically first, then \"Person X\" and \"Guest\" profiles\r\nchoices.sort((a, b) => {\r\n  const aIsUnnamed = isUnnamedProfile(a.name)\r\n  const bIsUnnamed = isUnnamedProfile(b.name)\r\n\r\n  // If both are Unnamed profiles or both are not, sort alphabetically\r\n  if ((aIsUnnamed && bIsUnnamed) || (!aIsUnnamed && !bIsUnnamed)) {\r\n    return a.name.localeCompare(b.name)\r\n  }\r\n\r\n  // Put Unnamed profiles at the end\r\n  return aIsUnnamed ? 1 : -1\r\n})\r\n\r\n\r\nlet selectedProfile = await arg({\r\n  placeholder: 'Select a profile',\r\n  enter: 'Copy Path',\r\n  actions: [\r\n    {\r\n      name: 'Open in Finder',\r\n      onAction: async (input, { focused }) => {\r\n        await revealFile(focused.value)\r\n      },\r\n    },\r\n  ]\r\n}, choices)\r\n\r\nif (selectedProfile) {\r\n  await clipboard.writeText(selectedProfile)\r\n  notify(`Copied Profile path to clipboard`)\r\n}\r\n\r\n\r\n// HELPERS\r\n// ===\r\n\r\nfunction isUnnamedProfile(title: string) {\r\n  return title.match(/Person \\d+|Guest/)\r\n}\r\n\r\n// Converts Windows FILETIME timestamp (100-nanosecond intervals since January 1, 1601)\r\n// to Unix timestamp (seconds since January 1, 1970)\r\n// See: https://learn.microsoft.com/en-us/windows/win32/sysinfo/file-times\r\nfunction windowsTimestampToDate(windowsTime: number): Date {\r\n  try {\r\n    const n = Number(windowsTime) / 1e6 - 11644473600;\r\n    return new Date(n * 1000);\r\n  } catch (e) {\r\n    console.warn(`Error converting Windows timestamp ${windowsTime} to Date`, e);\r\n    return undefined\r\n  }\r\n}\r\n\r\nfunction pickUsefulFromPreferences(preferencesJson: any) {\r\n  return {\r\n    accountEmail: preferencesJson.account_info?.[0]?.email,\r\n    accountName: preferencesJson.account_info?.[0]?.full_name,\r\n    pictureUrl: preferencesJson.account_info?.[0]?.picture_url,\r\n    avatarUrl: avatarIdToUrl(preferencesJson.profile?.avatar_index),\r\n    profileName: preferencesJson.profile?.name,\r\n    profileCreationTime: windowsTimestampToDate(preferencesJson.profile?.creation_time),\r\n    lastEngagementTime: windowsTimestampToDate(preferencesJson.profile?.last_engagement_time),\r\n    extensionsCount: Object.keys(preferencesJson.extensions.install_signature?.ids || {}).length,\r\n  }\r\n}\r\n\r\nfunction chromeImageUrl(name: \"stable\" | \"canary\" | \"dev\" | \"beta\") {\r\n  let url =  `https://raw.githubusercontent.com/chromium/chromium/refs/heads/main/chrome/app/theme/default_100_percent/common/`\r\n  if (name === \"stable\") {\r\n    url += \"product_logo_16.png\"\r\n  } else if (name === \"canary\") {\r\n    url += \"product_logo_32_canary.png\"\r\n  } else if (name === \"dev\") {\r\n    url += \"product_logo_32_dev.png\"\r\n  } else {\r\n    url += \"product_logo_32_beta.png\"\r\n  }\r\n  return url\r\n}\r\n\r\n\r\nfunction avatarIdToUrl(avatarId: number) {\r\n  // from https://gitlab.developers.cam.ac.uk/jz448/browser-android-tabs/-/blob/base-75.0.3770.67-brave-ads/chrome/app/theme/theme_resources.grd\r\n  const mapIdToFile = {\r\n    0: 'profile_avatar_generic.png',\r\n    1: 'profile_avatar_generic_aqua.png',\r\n    2: 'profile_avatar_generic_blue.png',\r\n    3: 'profile_avatar_generic_green.png',\r\n    4: 'profile_avatar_generic_orange.png',\r\n    5: 'profile_avatar_generic_purple.png',\r\n    6: 'profile_avatar_generic_red.png',\r\n    7: 'profile_avatar_generic_yellow.png',\r\n    8: 'profile_avatar_secret_agent.png',\r\n    9: 'profile_avatar_superhero.png',\r\n    10: 'profile_avatar_volley_ball.png',\r\n    11: 'profile_avatar_businessman.png',\r\n    12: 'profile_avatar_ninja.png',\r\n    13: 'profile_avatar_alien.png',\r\n    14: 'profile_avatar_awesome.png',\r\n    15: 'profile_avatar_flower.png',\r\n    16: 'profile_avatar_pizza.png',\r\n    17: 'profile_avatar_soccer.png',\r\n    18: 'profile_avatar_burger.png',\r\n    19: 'profile_avatar_cat.png',\r\n    20: 'profile_avatar_cupcake.png',\r\n    21: 'profile_avatar_dog.png',\r\n    22: 'profile_avatar_horse.png',\r\n    23: 'profile_avatar_margarita.png',\r\n    24: 'profile_avatar_note.png',\r\n    25: 'profile_avatar_sun_cloud.png',\r\n    26: 'profile_avatar_placeholder.png',\r\n    27: 'modern_avatars/origami/avatar_cat.png',\r\n    28: 'modern_avatars/origami/avatar_corgi.png',\r\n    29: 'modern_avatars/origami/avatar_dragon.png',\r\n    30: 'modern_avatars/origami/avatar_elephant.png',\r\n    31: 'modern_avatars/origami/avatar_fox.png',\r\n    32: 'modern_avatars/origami/avatar_monkey.png',\r\n    33: 'modern_avatars/origami/avatar_panda.png',\r\n    34: 'modern_avatars/origami/avatar_penguin.png',\r\n    35: 'modern_avatars/origami/avatar_pinkbutterfly.png',\r\n    36: 'modern_avatars/origami/avatar_rabbit.png',\r\n    37: 'modern_avatars/origami/avatar_unicorn.png',\r\n    38: 'modern_avatars/illustration/avatar_basketball.png',\r\n    39: 'modern_avatars/illustration/avatar_bike.png',\r\n    40: 'modern_avatars/illustration/avatar_bird.png',\r\n    41: 'modern_avatars/illustration/avatar_cheese.png',\r\n    42: 'modern_avatars/illustration/avatar_football.png',\r\n    43: 'modern_avatars/illustration/avatar_ramen.png',\r\n    44: 'modern_avatars/illustration/avatar_sunglasses.png',\r\n    45: 'modern_avatars/illustration/avatar_sushi.png',\r\n    46: 'modern_avatars/illustration/avatar_tamagotchi.png',\r\n    47: 'modern_avatars/illustration/avatar_vinyl.png',\r\n    48: 'modern_avatars/abstract/avatar_avocado.png',\r\n    49: 'modern_avatars/abstract/avatar_cappuccino.png',\r\n    50: 'modern_avatars/abstract/avatar_icecream.png',\r\n    51: 'modern_avatars/abstract/avatar_icewater.png',\r\n    52: 'modern_avatars/abstract/avatar_melon.png',\r\n    53: 'modern_avatars/abstract/avatar_onigiri.png',\r\n    54: 'modern_avatars/abstract/avatar_pizza.png',\r\n    55: 'modern_avatars/abstract/avatar_sandwich.png'\r\n  }\r\n  const file = mapIdToFile[avatarId]\r\n  return `https://raw.githubusercontent.com/chromium/chromium/refs/heads/main/chrome/app/theme/default_100_percent/common/${file}`\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2025-01-03T19:07:32Z"},{"name":"WEBP to PNG","description":"","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1548","url":"https://gist.githubusercontent.com/RicardoBassete/f34b66b1b7eb29667b5964ad2a95998c/raw/8fa9e2f4288e427d767842d160febe9f9289c2bc/webp-to-png.ts","title":"WEBP to PNG","command":"webp-to-png","content":"\r\n[Open webp-to-png in Script Kit](https://scriptkit.com/api/new?name=webp-to-png&url=https://gist.githubusercontent.com/RicardoBassete/f34b66b1b7eb29667b5964ad2a95998c/raw/8fa9e2f4288e427d767842d160febe9f9289c2bc/webp-to-png.ts\")\r\n\r\n```js\r\n// Name: WEBP to PNG\r\n// Description: Converts all selected files from .webp to .png\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport '@johnlindquist/kit'\r\nimport sharp from 'sharp'\r\n\r\nconst files = await drop({\r\n  placeholder: 'Drop your images here',\r\n  alwaysOnTop: true,\r\n})\r\n\r\nfiles.forEach(async file => {\r\n  const file_dir = path.dirname(file.path)\r\n  const new_file_name = file.name.replace('webp', 'png')\r\n  const new_file_path = path.resolve(file_dir, new_file_name)\r\n  await sharp(file.path).toFile(new_file_path)\r\n})\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-12-17T13:35:06Z"},{"name":"Night Shift","description":"","author":"Pavel 'Strajk' Dolecek","temp":"`nightlight temp [0-100]`, no argument will show current temperature","schedule":"`nightlight schedule [start|off|HH:MM HH:MM]`","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","twitter":"straaajk","discussion":"https://github.com/johnlindquist/kit/discussions/1546","url":"https://gist.githubusercontent.com/Strajk/1957d186de3ec8968f93c6427f283018/raw/ad9e6693ef1ca3c300d3f0a3aa36ebe3082e5a7a/macos-night-shift.ts","title":"Night Shift (MacOS)","command":"night-shift-macos","content":"https://github.com/user-attachments/assets/c9cb6a53-8142-4f52-9d8b-ce78558a1d32\r\n\r\n[Open macos-night-shift in Script Kit](https://scriptkit.com/api/new?name=macos-night-shift&url=https://gist.githubusercontent.com/Strajk/1957d186de3ec8968f93c6427f283018/raw/ad9e6693ef1ca3c300d3f0a3aa36ebe3082e5a7a/macos-night-shift.ts\")\r\n\r\n```ts\r\n// Name: Night Shift\r\n// Description: Control Night Shift on macOS\r\n// Author: Pavel 'Strajk' Dolecek\r\n// Acknowledgements:\r\n// - https://github.com/smudge/nightlight\r\n// - https://github.com/shmulvad/alfred-nightshift/\r\n// Notes:\r\n// nightlight CLI usage:\r\n// on/off: `nightlight on|off|toggle`, status will show current state\r\n// temp: `nightlight temp [0-100]`, no argument will show current temperature\r\n// schedule: `nightlight schedule [start|off|HH:MM HH:MM]`\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport {Choice} from \"@johnlindquist/kit\";\r\n\r\nasync function main() {\r\n  await execa('which', ['nightlight'])\r\n    .catch(async () => {\r\n      let choice = await arg({\r\n        placeholder: `Nightlight CLI required, but not installed, install?`,\r\n        choices: ['Yes', 'No']\r\n      })\r\n      if (choice !== 'Yes') {\r\n        await notify(`OK, not installing Nightlight CLI & exiting`)\r\n        exit() // exit whole script\r\n      }\r\n      console.log(`Installing Nightlight CLI... on Apple Silicon it might take a while because precompiled binaries are not available yet, see https://github.com/smudge/nightlight/issues/22`)\r\n      await terminal(`brew install smudge/smudge/nightlight`)\r\n      await arg(\"Press enter when installing in terminal finishes...\")\r\n      console.clear() // Clear previous console.log\r\n      return main()\r\n    })\r\n\r\n  let status = execaSync('nightlight', ['status']).stdout\r\n  let temp = execaSync('nightlight', ['temp']).stdout\r\n\r\n  let choices: Choice[] = [{\r\n    name: 'Toggle',\r\n    value: 'toggle'\r\n  }, {\r\n    name: 'Off',\r\n    value: 'off'\r\n  }, {\r\n    name: 'On',\r\n    value: 'on'\r\n  }, {\r\n    name: 'On & 25%',\r\n    value: 'temp 25'\r\n  }, {\r\n    name: 'On & 50%',\r\n    value: 'temp 50'\r\n  }, {\r\n    name: 'On & 75%',\r\n    value: 'temp 75'\r\n  }, {\r\n    name: 'On & 100%',\r\n    value: 'temp 100'\r\n  }]\r\n\r\n  let choice = await arg({\r\n    placeholder: `Either select or type exact amount from 0 to 100`,\r\n    hint: `Current status: ${uppercaseFirst(status)} • Current temperature: ${temp}`,\r\n    choices,\r\n    strict: false // allow arbitrary input\r\n  })\r\n\r\n  let args = choice.split(' ')\r\n  let isArg0Number = !isNaN(parseInt(args[0]))\r\n  if (isArg0Number) {\r\n    args = ['temp', args[0]]\r\n  }\r\n\r\n  if (args[0] === 'temp') {\r\n    // if setting temp, turn on first\r\n    await execa('nightlight', ['on'])\r\n  }\r\n\r\n  await execa('nightlight', args)\r\n    .then(() => notify(`Nightlight set to: ${choice}`))\r\n    .catch(() => notify(`Failed to set Nightlight to: ${choice}`))\r\n}\r\n\r\nvoid main()\r\n\r\nfunction uppercaseFirst(str: string) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1)\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-30T13:30:50Z"},{"name":"Faker","description":"","author":"Pavel 'Strajk' Dolecek","twitter":"straaajk","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","discussion":"https://github.com/johnlindquist/kit/discussions/1545","url":"https://gist.githubusercontent.com/Strajk/e87ad0888e8df0bd1bd7c60b764369f0/raw/393f63100d8746e51b141a0d41e49e94d3a10fd5/faker.ts","title":"Generate fake data with faker.js","command":"generate-fake-data-with-fakerjs","content":"https://github.com/user-attachments/assets/b1707287-f7a8-46ec-bca8-c68bd782d0fa\r\n\r\n[Open faker in Script Kit](https://scriptkit.com/api/new?name=faker&url=https://gist.githubusercontent.com/Strajk/e87ad0888e8df0bd1bd7c60b764369f0/raw/393f63100d8746e51b141a0d41e49e94d3a10fd5/faker.ts\")\r\n\r\n```ts\r\n// Name: Faker\r\n// Description: Generate fake data with faker.js\r\n// Author: Pavel 'Strajk' Dolecek\r\n// Twitter: @straaajk\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nimport { faker } from '@faker-js/faker';\r\nimport { Choice } from \"@johnlindquist/kit\";\r\n\r\nconst CACHE_EXPIRATION = 1000 * 60 * 60 * 24 * 30 // 1 month\r\n// const CACHE_EXPIRATION = 1000 * 15 // 15 seconds // uncomment for debugging\r\n\r\n// @ts-ignore kitCommand is defined, but it's not in types :(\r\nconst keyv = await store(kitCommand, {cachedChoices: null, cachedChoicesExpires: null})\r\nconst maybeCachedChoices = await keyv.get('choices') as Choice[] | null\r\nconst maybeCachedChoicesExpires = await keyv.get('cachedChoicesExpires') as number | null\r\n\r\nconst EXAMPLES_MAX_COUNT = 5\r\nconst EXAMPLES_MAX_CHARS = 120\r\n\r\nconst modulesToIgnore = [\r\n  \"_defaultRefDate\",\r\n  \"_randomizer\",\r\n  \"datatype\", // just boolean\r\n  \"helpers\",\r\n  \"rawDefinitions\",\r\n  \"definitions\",\r\n]\r\n\r\nconst methodsToIgnore = [\r\n  \"faker\",\r\n]\r\n\r\nconst pairsToIgnore = [\r\n  \"internet.userName\", // deprecated in favour of internet.username\r\n  \"image.avatarLegacy\", // deprecated in favour of image.avatar\r\n\r\n  // requires params, which would require special handling\r\n  \"string.fromCharacters\",\r\n  \"date.between\",\r\n  \"date.betweens\",\r\n]\r\n\r\nlet choices = []\r\nif (\r\n  maybeCachedChoices?.length > 0\r\n  && maybeCachedChoicesExpires > Date.now()\r\n) {\r\n  // console.log(\"Using cached choices\")\r\n  choices = maybeCachedChoices as Choice[]\r\n} else {\r\n  // console.log(\"Generating choices\")\r\n  for (const module in faker) { // date, number, string, finance, ...\r\n    if (modulesToIgnore.includes(module)) {\r\n      continue;\r\n    }\r\n\r\n    for (const method in faker[module]) {\r\n      if (methodsToIgnore.includes(method)) {\r\n        continue;\r\n      }\r\n\r\n      const pair = `${module}.${method}`;\r\n      if (pairsToIgnore.includes(pair)) {\r\n        continue;\r\n      }\r\n\r\n      let examplesCount = 0;\r\n      let examplesText = \"\";\r\n      while (examplesText.length < EXAMPLES_MAX_CHARS && examplesCount < EXAMPLES_MAX_COUNT) {\r\n        const newExample = callFaker(module, method);\r\n        if (examplesText.length > 0) {\r\n          examplesText += \" • \"\r\n        }\r\n        examplesText += toString(newExample);\r\n        examplesCount++;\r\n      }\r\n      examplesText = examplesText.trim().substring(0, EXAMPLES_MAX_CHARS);\r\n\r\n      choices.push({\r\n        name: `${module}: ${method}`,\r\n        value: pair,\r\n        description: examplesText,\r\n      })\r\n    }\r\n  }\r\n  await keyv.set('choices', choices)\r\n  await keyv.set('cachedChoicesExpires', Date.now() + CACHE_EXPIRATION)\r\n}\r\n\r\nconst selected = await arg({\r\n  placeholder: \"Select a Faker module and method\",\r\n  choices: choices,\r\n  enter: \"Copy to clipboard\",\r\n})\r\n\r\nlet [module, method] = selected.split(\".\")\r\nlet value = toString(callFaker(module, method))\r\n\r\nawait copy(value)\r\nawait notify(`Copied: ${value}`)\r\n\r\n// Helpers\r\n// ===\r\nfunction callFaker(module: string, method: string) {\r\n  try {\r\n    return faker[module][method]()\r\n  } catch (error) {\r\n    console.error(`Error calling faker method: ${module}.${method}`, error);\r\n    return\r\n  }\r\n}\r\n\r\nfunction toString(value: any): string {\r\n  if (typeof value === \"string\") {\r\n    return value\r\n  } else if (typeof value === \"object\") {\r\n    return JSON.stringify(value)\r\n  } else {\r\n    return value?.toString() || \"❌\"\r\n  }\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-29T18:31:55Z"},{"name":"Karabiner Elements Profile Switcher","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","author":"Pavel 'Strajk' Dolecek","twitter":"straaajk","discussion":"https://github.com/johnlindquist/kit/discussions/1544","url":"https://gist.githubusercontent.com/Strajk/42eb7b2c643d0b8bdf4bbd63dfda77b2/raw/a0b4961a1060ae90bfd7b85bcaf512cfc97438eb/karabiner-elements-profile-switcher.ts","title":"Karabiner Elements Profile Switcher","command":"karabiner-elements-profile-switcher","content":"![Screenshot-2024-11-29T11 45 50](https://github.com/user-attachments/assets/2eb883f1-b65b-438a-a6b7-69415fe5a241)\r\n\r\n[Open karabiner-elements-profile-switcher in Script Kit](https://scriptkit.com/api/new?name=karabiner-elements-profile-switcher&url=https://gist.githubusercontent.com/Strajk/42eb7b2c643d0b8bdf4bbd63dfda77b2/raw/a0b4961a1060ae90bfd7b85bcaf512cfc97438eb/karabiner-elements-profile-switcher.ts\")\r\n\r\n```ts\r\n// Name: Karabiner Elements Profile Switcher\r\n// Acknowledgements:\r\n// - https://www.alfredforum.com/topic/9927-karabiner-elements-profile-switcher/\r\n// Notes:\r\n// - Probably could also work with cli https://github.com/raycast/extensions/blob/be03024b4c4f4f1ad0af7f4d20ea4630d7f0ee20/extensions/karabiner-profile-switcher/src/model/KarabinerManager.ts\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport fs from 'fs'\r\n\r\nconst CONFIG_PATH = home('.config/karabiner/karabiner.json')\r\nconst configJson = JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf8'))\r\n\r\nconst profileChoices = configJson.profiles.map((profile: any) => ({\r\n  name: profile.name,\r\n  value: profile.name,\r\n  tag: profile.selected ? '🟢' : '', // Note: Not sure if there's a better way to highlight currenly active\r\n}))\r\n\r\nconst selectedProfile = await arg({\r\n  placeholder: 'Select a profile',\r\n  choices: profileChoices,\r\n})\r\n\r\nfor (const profile of configJson.profiles) {\r\n  profile.selected = profile.name === selectedProfile // intentional mutation\r\n}\r\n\r\nfs.writeFileSync(CONFIG_PATH, JSON.stringify(configJson, null, 2))\r\n\r\nnotify(`Karabiner Elements profile switched to \"${selectedProfile}\"`)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-29T10:46:39Z"},{"name":"Disposable email","description":"","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","author":"Pavel 'Strajk' Dolecek","twitter":"straaajk","discussion":"https://github.com/johnlindquist/kit/discussions/1543","url":"https://gist.githubusercontent.com/Strajk/915fa99e85208d2e148c385f9a568962/raw/99321e648c78a3fc92141683e1d1cacb70a43f0a/disposable-email.ts","title":"Disposable email","command":"disposable-email","content":"![Screenshot-2024-11-29T09 26 18](https://github.com/user-attachments/assets/ef4c1008-7b7c-4eb6-babe-efc85e277bb1)\r\n\r\n[Open disposable-email in Script Kit](https://scriptkit.com/api/new?name=disposable-email&url=https://gist.githubusercontent.com/Strajk/915fa99e85208d2e148c385f9a568962/raw/99321e648c78a3fc92141683e1d1cacb70a43f0a/disposable-email.ts\")\r\n\r\n```ts\r\n// Name: Disposable email\r\n// Description: Generate a disposable email address, open the inbox in the browser, and copy the email address to the clipboard\r\n// Acknowledgments:\r\n// - https://www.alfredforum.com/topic/4643-temporary-email-%E2%80%94-generate-disposable-email-inboxes/\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { uniqueNamesGenerator, adjectives, animals, colors } from 'unique-names-generator';\r\n\r\n\r\n// The ones with auto: true will copy the email address to clipboard, the ones with auto: false will not\r\nconst providers = {\r\n  \"maildrop.cc\": { name: \"Maildrop\", auto: true },\r\n  \"harakirimail.com\": { name: \"Harakirimail\", auto: true },\r\n\r\n  \"incognitomail.co\": { name: \"Incognitomail\", auto: false },\r\n  \"temporarymail.com\": { name: \"Temporarymail\", auto: false },\r\n  \"mail.tm\": { name: \"Mail.tm\", auto: false },\r\n  \"dropmail.me\": { name: \"Dropmail\", auto: false },\r\n  \"guerrillamail.com\": { name: \"Guerrillamail\", auto: false }\r\n};\r\n\r\nlet provider = await arg({\r\n  placeholder: `Select Provider`,\r\n  choices: Object.entries(providers).map(([name, def]) => ({\r\n    name: def.name,\r\n    description: def.auto ? `🤖 Auto-copies email to clipboard` : `🫵 Manually copy email from website`,\r\n    value: name\r\n  }))\r\n});\r\n\r\nlet def = providers[provider];\r\nif (!def) throw new Error(`Invalid provider: ${provider}`);\r\n\r\nif (def.auto) {\r\n  const desiredEmailName = uniqueNamesGenerator({\r\n    dictionaries: [adjectives, animals],\r\n    length: 2,\r\n    separator: '-',\r\n  });\r\n  const email = `${desiredEmailName}@${provider}`;\r\n  let url: string;\r\n  if (provider === 'maildrop.cc') {\r\n    url = `https://${provider}/inbox/?mailbox=${desiredEmailName}`;\r\n  } else {\r\n    url = `https://${provider}/inbox/${desiredEmailName}`;\r\n  }\r\n  await clipboard.writeText(email);\r\n  await open(url);\r\n  await notify(`Email: ${email} copied to clipboard`);\r\n} else {\r\n  await open(`https://${provider}`);\r\n  await notify(`Get the email address from the website`);\r\n}\r\n\r\n\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-29T08:26:28Z"},{"name":"Clear MacOS notifications","description":"","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","author":"Pavel 'Strajk' Dolecek","twitter":"straaajk","discussion":"https://github.com/johnlindquist/kit/discussions/1542","url":"https://gist.githubusercontent.com/Strajk/4eccea362807627d7c0bae27e9d20ae2/raw/9ff3876a0f9e92441013109ed5f96a4afe9105b3/clear-macos-notifications.ts","title":"Clear MacOS notifications","command":"clear-macos-notifications","content":"https://github.com/user-attachments/assets/0e70bc8c-8564-44c7-ac28-064e975cf892\r\n\r\n[Open clear-macos-notifications in Script Kit](https://scriptkit.com/api/new?name=clear-macos-notifications&url=https://gist.githubusercontent.com/Strajk/4eccea362807627d7c0bae27e9d20ae2/raw/9ff3876a0f9e92441013109ed5f96a4afe9105b3/clear-macos-notifications.ts\")\r\n\r\n```ts\r\n// Name: Clear MacOS notifications\r\n// Description: Only visible notifications – clearing not visible notifications is not possible\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nawait jxa(`\r\nApplication(\"System Events\")\r\n  .applicationProcesses.byName(\"NotificationCenter\")\r\n  .windows[0]\r\n  .groups[0]\r\n  .scrollAreas[0]\r\n  .uiElements[0]\r\n  .groups()\r\n  .map(banner => banner.actions().slice(-1)[0])\r\n  .forEach(banner => banner.perform())\r\n`)\r\n\r\n// Inspired by Kit's \"applescript\" function\r\nasync function jxa(script: string) {\r\n  await writeFile(kenvTmpPath(\"clear-macos-notifications.jxa\"), script);\r\n  await execa(\"osascript\", [\"-l\", \"JavaScript\", kenvTmpPath(\"clear-macos-notifications.jxa\")]);\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-29T07:01:39Z"},{"name":"Lyrics on Genius","description":"","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","author":"Pavel 'Strajk' Dolecek","twitter":"straaajk","discussion":"https://github.com/johnlindquist/kit/discussions/1541","url":"https://gist.githubusercontent.com/Strajk/f7000ce9594ed734ba24cd54e2140a6b/raw/63b5d21dc45eb114bd15788f88b6cd1dcc7ba33c/lyrics.ts","title":"Lyrics on Genius","command":"lyrics-on-genius","content":"https://github.com/user-attachments/assets/ea8e0ba2-eadc-4042-83ff-27cb81e8d79d\r\n\r\n[Open lyrics in Script Kit](https://scriptkit.com/api/new?name=lyrics&url=https://gist.githubusercontent.com/Strajk/f7000ce9594ed734ba24cd54e2140a6b/raw/63b5d21dc45eb114bd15788f88b6cd1dcc7ba33c/lyrics.ts\")\r\n\r\n```ts\r\n// Name: Lyrics on Genius\r\n// Description: Look up Lyrics of Current Song on Rap Genius\r\n// Acknowledgments:\r\n// - Ryan Rudzitis: Look up Lyrics of Current Song on Rap Genius\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet appsToTry = [\r\n  \"Music\",\r\n  \"Spotify\"\r\n]\r\n\r\nlet qs: string\r\nfor (let app of appsToTry) {\r\n  qs = await applescript(/* applescript */ `\r\n    tell application \"${app}\"\r\n      if player state is playing then\r\n        set aTrack to the current track\r\n        set aName to name of aTrack\r\n        set aArtist to artist of aTrack\r\n        return quoted form of (aArtist & \" - \" & aName)\r\n      else\r\n        return \"\"\r\n      end if\r\n    end tell\r\n    `)\r\n  if (qs) break\r\n}\r\n\r\n\r\nif (!qs) {\r\n  notify(`No music is playing in: ` + appsToTry.join(\", \"))\r\n} else {\r\n  open(`http://genius.com/search?q=${qs}`)\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-29T06:49:39Z"},{"name":"Messages 2FA codes","description":"","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","author":"Pavel 'Strajk' Dolecek","twitter":"straaajk","discussion":"https://github.com/johnlindquist/kit/discussions/1540","url":"https://gist.githubusercontent.com/Strajk/9bf369a060e2e3e3eec4f1353147c71b/raw/968106d71bd2e950a43e48cce72ee20eda59cccb/messages-2fa.ts","title":"(Apple) Messages 2FA codes","command":"apple-messages-2fa-codes","content":"https://github.com/user-attachments/assets/c10e418e-dce9-43b4-9c8e-e899ec8e4e7b\r\n\r\n[Open messages-2fa in Script Kit](https://scriptkit.com/api/new?name=messages-2fa&url=https://gist.githubusercontent.com/Strajk/9bf369a060e2e3e3eec4f1353147c71b/raw/968106d71bd2e950a43e48cce72ee20eda59cccb/messages-2fa.ts\")\r\n\r\n```ts\r\n// Name: Messages 2FA codes\r\n// Description: Search for 2FA codes in your Messages, within the last 30 minutes\r\n// Ackowledgements: \r\n// - https://github.com/squatto/alfred-imessage-2fa/\r\n// - https://github.com/raycast/extensions/tree/main/extensions/imessage-2fa\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport Database from 'better-sqlite3';\r\n\r\nlet preferences = {\r\n  lookBackMinutes: 30,\r\n  ignoreRead: false,\r\n}\r\n\r\nexport type TMessage = {\r\n  guid: string;\r\n  message_date: string; // 2024-11-26 06:11:18\r\n  sender: string; // e.g. amazon.de or +49123456789\r\n  service: string; // e.g. SMS\r\n  text: string;\r\n}\r\n\r\nconst db = new Database(home(\"Library/Messages/chat.db\"));\r\n\r\nlet output = await arg({\r\n  placeholder: \"Select a message or start typing to search\",\r\n  choices: async (input) => {\r\n    let stmt = db.prepare(dbQuery(input));\r\n    let messages = stmt.all() as TMessage[];\r\n    return messages.map((m) => ({\r\n      name: m.text,\r\n      tag: extractCode(m.text) ?? \"no code\",\r\n      description: `${m.message_date} • ${m.sender} • ${m.service}`,\r\n      value: m.text,\r\n      preview: `<div class=\"p-2 text-sm\">${m.text}</div>`,\r\n    }));\r\n  },\r\n  actions: [\r\n    {\r\n      name: \"Copy Whole Message\",\r\n      flag: \"copyWholeMessage\",\r\n      visible: true,\r\n      shortcut: `${cmd}+c`,\r\n    },\r\n  ]\r\n})\r\n\r\nif (flag.copyWholeMessage) {\r\n  clipboard.writeText(output)\r\n  notify(\"Whole message copied to clipboard\")\r\n} else {\r\n  let code = extractCode(output)\r\n  if (code) {\r\n    clipboard.writeText(code)\r\n    notify(`Code: ${code} copied to clipboard`)\r\n  } else {\r\n    clipboard.writeText(output)\r\n    notify(\"No code found. Copied whole message to clipboard instead\")\r\n  }\r\n}\r\n\r\n// Helpers\r\n// ===\r\nfunction dbQuery(qs: string = \"\") {\r\n  let baseQuery = /* sql */`\r\n    select\r\n      message.guid,\r\n      message.rowid,\r\n      ifnull(handle.uncanonicalized_id, chat.chat_identifier) AS sender,\r\n      message.service,\r\n      datetime(message.date / 1000000000 + 978307200, 'unixepoch', 'localtime') AS message_date,\r\n      message.text\r\n    from message\r\n      left join chat_message_join on chat_message_join.message_id = message.ROWID\r\n      left join chat on chat.ROWID = chat_message_join.chat_id\r\n      left join handle on message.handle_id = handle.ROWID\r\n    where message.is_from_me = 0\r\n      and message.text is not null\r\n      and length(message.text) > 0\r\n      and \r\n        datetime(message.date / 1000000000 + strftime('%s', '2001-01-01'), 'unixepoch', 'localtime') \r\n        >= \r\n        datetime('now', '-${preferences.lookBackMinutes} minutes', 'localtime')\r\n\t`;\r\n  \r\n  if (preferences.ignoreRead) baseQuery += \" and message.is_read = 0\";\r\n\r\n  if (!qs) { // search for code\r\n    baseQuery = /* sql */`${baseQuery} and (\r\n      -- Matches 3 alphanumeric (e.g., 'ABC')\r\n      message.text glob '*[0-9A-Z][0-9A-Z][0-9A-Z]*'\r\n      -- Matches 4 alphanumeric (e.g., 'ABCD')\r\n      or message.text glob '*[0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z]*'\r\n      -- Matches 5 alphanumeric (e.g., 'ABCDE')\r\n      or message.text glob '*[0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z]*'\r\n      -- Matches 6 alphanumeric (e.g., 'ABCDEF')\r\n      or message.text glob '*[0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z]*'\r\n      -- Matches format '123-456'\r\n      or message.text glob '*[0-9][0-9][0-9]-[0-9][0-9][0-9]*'\r\n      -- Matches 7 alphanumeric (e.g., 'ABCDEFG')\r\n      or message.text glob '*[0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z]*'\r\n      -- Matches 8 alphanumeric (e.g., 'ABCDEFGH')\r\n      or message.text glob '*[0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z]*'\r\n    )`;\r\n  } else { // Search for text\r\n    baseQuery = /* sql */`${baseQuery} and message.text like '%${qs}%'`;\r\n  }\r\n\r\n  return `${baseQuery} \\norder by message.date desc limit 100`.trim();\r\n}\r\n\r\n\r\nexport function extractCode(original: string) {\r\n  // remove URLs\r\n  const urlRegex = new RegExp(\r\n    \"\\\\b((https?|ftp|file):\\\\/\\\\/|www\\\\.)[-A-Z0-9+&@#\\\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\\\/%=~_|$]\",\r\n    \"ig\"\r\n  );\r\n  let message = original.replaceAll(urlRegex, \"\");\r\n\r\n  if (message.trim() === \"\") return \"\";\r\n\r\n  let m;\r\n  let code;\r\n\r\n  // Look for specific patterns first\r\n  if ((m = /^(\\d{4,8})(\\sis your.*code)/.exec(message)) !== null) {\r\n    // 4-8 digits followed by \"is your [...] code\"\r\n    // examples:\r\n    //   \"2773 is your Microsoft account verification code\"\r\n    code = m[1];\r\n  } else if (\r\n    (m = /(code\\s*:|is\\s*:|码|use code|autoriza(?:ca|çã)o\\s*:|c(?:o|ó)digo\\s*:)\\s*(\\w{4,8})($|\\s|\\\\R|\\t|\\b|\\.|,)/i.exec(\r\n      message\r\n    )) !== null\r\n  ) {\r\n    // \"code:\" OR \"is:\" OR \"use code\", optional whitespace, then 4-8 consecutive alphanumeric characters\r\n    // examples:\r\n    //   \"Your Airbnb verification code is: 1234.\"\r\n    //   \"Your verification code is: 1234, use it to log in\"\r\n    //   \"Here is your authorization code:9384\"\r\n    //   \"【抖音】验证码9316，用于手机验证\"\r\n    //   \"Your healow verification code is : 7579.\"\r\n    //   \"TRUSTED LOCATION PASSCODE: mifsuc\"\r\n    //   \"Código de Autorização: 12345678\"\r\n    code = m[2];\r\n  } else {\r\n    // more generic, brute force patterns\r\n\r\n    // remove phone numbers\r\n    // we couldn't do this before, because some auth codes resemble text shortcodes, which would be filtered by this regex\r\n    const phoneRegex = new RegExp(\r\n      // https://stackoverflow.com/a/123666\r\n      /(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?/,\r\n      \"ig\"\r\n    );\r\n\r\n    const originalMessage = message;\r\n    message = message.replaceAll(phoneRegex, \"\");\r\n\r\n    if ((m = /(^|\\s|\\\\R|\\t|\\b|G-|:)(\\d{5,8})($|\\s|\\\\R|\\t|\\b|\\.|,)/.exec(message)) !== null) {\r\n      // 5-8 consecutive digits\r\n      // examples:\r\n      //   \"您的验证码是 199035，10分钟内有效，请勿泄露\"\r\n      //   \"登录验证码：627823，您正在尝试【登录】，10分钟内有效\"\r\n      //   \"【赛验】验证码 54538\"\r\n      //   \"Enter this code to log in:59678.\"\r\n      //   \"G-315643 is your Google verification code\"\r\n      //   \"Enter the code 765432, and then click the button to log in.\"\r\n      //   \"Your code is 45678!\"\r\n      //   \"Your code is:98765!\"\r\n      code = m[2];\r\n    } else if ((m = /\\b(?=[A-Z]*[0-9])(?=[0-9]*[A-Z])[0-9A-Z]{3,8}\\b/.exec(message)) !== null) {\r\n      // 3-8 character uppercase alphanumeric string, containing at least one letter and one number\r\n      // examples:\r\n      //   \"5WGU8G\"\r\n      //   \"Your code is: 5WGU8G\"\r\n      //   \"CWGUG8\"\r\n      //   \"CWGUG8 is your code\"\r\n      //   \"7645W453\"\r\n      code = m[0];\r\n    } else if ((m = /(^|code:|is:|\\b)\\s*(\\d{3})-(\\d{3})($|\\s|\\\\R|\\t|\\b|\\.|,)/i.exec(message)) !== null) {\r\n      // line beginning OR \"code:\" OR \"is:\" OR word boundary, optional whitespace, 3 consecutive digits, a hyphen, then 3 consecutive digits\r\n      // but NOT a phone number (###-###-####)\r\n      // examples:\r\n      //   \"123-456\"\r\n      //   \"Your Stripe verification code is: 719-839.\"\r\n      // and make sure it isn't a phone number\r\n      // doesn't match: <first digits>-<second digits>-<4 consecutive digits>\r\n\r\n      const first = m[2];\r\n      const second = m[3];\r\n\r\n      code = `${first}${second}`;\r\n    } else if ((m = /(code|is):?\\s*(\\d{3,8})($|\\s|\\\\R|\\t|\\b|\\.|,)/i.exec(originalMessage)) !== null) {\r\n      // \"code\" OR \"is\" followed by an optional \":\" + optional whitespace, then 3-8 consecutive digits\r\n      // examples:\r\n      //   \"Please enter code 548 on Zocdoc.\"\r\n      code = m[2];\r\n    } else {\r\n      // console.log(\"no code found in message\");\r\n    }\r\n  }\r\n\r\n  return code;\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-26T09:24:28Z"},{"name":"Keyboard Maestro","description":"","author":"Pavel 'Strajk' Dolecek","twitter":"straaajk","cache":"true","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","discussion":"https://github.com/johnlindquist/kit/discussions/1539","url":"https://gist.githubusercontent.com/Strajk/fd07ae3071c2f5aca38086212b7c7537/raw/7fcbf285e2abbaa341b934bdc51074c36fa4aeef/keyboard-maestro.ts","title":"Run or edit a Keyboard Maestro macro","command":"run-or-edit-a-keyboard-maestro-macro","content":"https://github.com/user-attachments/assets/b6e7aee9-182a-4442-9e88-88e7105441ec\r\n\r\n[Open keyboard-maestro in Script Kit](https://scriptkit.com/api/new?name=keyboard-maestro&url=https://gist.githubusercontent.com/Strajk/fd07ae3071c2f5aca38086212b7c7537/raw/7fcbf285e2abbaa341b934bdc51074c36fa4aeef/keyboard-maestro.ts\")\r\n\r\n```ts\r\n// Name: Keyboard Maestro\r\n// Description: Run or edit a Keyboard Maestro macro\r\n// Author: Pavel 'Strajk' Dolecek\r\n// Twitter: @straaajk\r\n// Cache: true\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport plist from 'plist'\r\nimport dedent from \"dedent\"\r\n\r\nexport type TMacro = Partial<{\r\n  name: string\r\n  uid: string\r\n  active: boolean\r\n  created: number\r\n  used: number\r\n  enabled: boolean\r\n  lastused: number\r\n  modified: number\r\n  saved: number\r\n  sort: string\r\n  triggers: Array<Partial<{ description: string, short: string, type: string }>>\r\n}>\r\n\r\nexport type TMacroGroup = Partial<{\r\n  uid: string\r\n  enabled: boolean\r\n  name: string\r\n  sort: string\r\n  macros: TMacro[]\r\n}>\r\n\r\nlet kmMacrosRaw = await applescript(dedent`\r\n  tell application \"Keyboard Maestro Engine\"\r\n    getmacros with asstring\r\n  end tell\r\n`)\r\n\r\nlet kmMacrosParsed = plist.parse(kmMacrosRaw) as TMacroGroup[]\r\n\r\nconst choices = kmMacrosParsed.flatMap(group => group.macros.map(macro => ({\r\n  name: `${group.name} - ${macro.name}`,\r\n  value: macro.uid\r\n})))\r\n\r\n\r\nlet chosen = await arg({\r\n  placeholder: \"Choose a macro\",\r\n  choices: choices,\r\n  actions: [\r\n    {\r\n      shortcut: `${cmd}+e`,\r\n      name: \"Edit Macro\",\r\n      visible: true,\r\n      flag: \"edit\"\r\n    }\r\n  ]\r\n})\r\n\r\nif (flag.edit) { // Note that flag is a global\r\n  await applescript(dedent`\r\n    tell application \"Keyboard\r\n     Maestro\"\r\n      editMacro \"${chosen}\"\r\n      activate\r\n    end tell    \r\n  `)\r\n} else {\r\n  await applescript(dedent`\r\n    tell application \"Keyboard Maestro Engine\"\r\n      do script \"${chosen}\"\r\n    end tell\r\n  `)\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-25T20:25:01Z"},{"name":"Rename script files to match their name","description":"","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","author":"Pavel 'Strajk' Dolecek","twitter":"straaajk","discussion":"https://github.com/johnlindquist/kit/discussions/1538","url":"https://gist.githubusercontent.com/Strajk/fb52135b855faeaaa6aba9f34d1ef54f/raw/dca9bc5eb121567eb8c6fcdf314e2d622ba04b13/rename-script-files-to-match-their-name.ts","title":"Rename script files to match their script name (from metadata)","command":"rename-script-files-to-match-their-script-name-from-metadata","content":"[Open rename-script-files-to-match-their-name in Script Kit](https://scriptkit.com/api/new?name=rename-script-files-to-match-their-name&url=https://gist.githubusercontent.com/Strajk/fb52135b855faeaaa6aba9f34d1ef54f/raw/dca9bc5eb121567eb8c6fcdf314e2d622ba04b13/rename-script-files-to-match-their-name.ts\")\r\n\r\n```ts\r\n// Name: Rename script files to match their name\r\n// Description: Renames script file names to match their name (// Name: Foo Bar -> foo-bar.ts)\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { stripName } from \"@johnlindquist/kit\"\r\nimport * as fs from \"fs/promises\"\r\nimport dedent from \"dedent\"\r\n\r\n// just for documentation purposes\r\nlet exampleScript = {\r\n    \"command\": \"rename-script-files-to-match-their-name\",\r\n    \"filePath\": \"/Users/strajk/.kenv/scripts/rename-script-files-to-match-their-name.ts\",\r\n    \"id\": \"/Users/strajk/.kenv/scripts/rename-script-files-to-match-their-name.ts\",\r\n    \"name\": \"Rename script files to match their name\",\r\n    \"timestamp\": 1732375034783,\r\n    \"type\": \"Prompt\"\r\n    // ...\r\n}\r\n\r\nlet scripts = await getScripts()\r\n\r\nfor (let script of scripts) {\r\n    let normalizedName = stripName(script.name)\r\n    let extname = path.extname(script.filePath)\r\n    let basename = path.basename(script.filePath, extname)\r\n\r\n    if (basename !== script.command) {\r\n        console.log(dedent`\r\n          This should never happen, basename and command should be the same:\r\n          basename:     ${basename}\r\n          command:      ${script.command}\r\n        `)\r\n        notify(`basename: ${basename} command: ${script.command}`)\r\n        exit()\r\n    }\r\n\r\n    if (normalizedName !== basename) {\r\n        console.log(dedent`\r\n          \"${script.name}\":\r\n          current:    ${basename}\r\n          normalized: ${normalizedName}\r\n        `)\r\n\r\n        let confirmed = await arg({\r\n            placeholder: `Rename \"${basename}\" to \"${normalizedName}\"`,\r\n            choices: [\r\n                { name: \"Yes\", value: true },\r\n                { name: \"No\", value: false }\r\n            ]\r\n        })\r\n\r\n        if (!confirmed) {\r\n            continue\r\n        }\r\n\r\n        console.log(`Renaming \"${basename}\" to: ${normalizedName}`)\r\n\r\n        let newPath = path.join(path.dirname(script.filePath), normalizedName + extname)\r\n        await fs.rename(script.filePath, newPath)\r\n    }\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-24T12:07:51Z"},{"name":"Install app from dmg in Downloads","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","author":"Pavel 'Strajk' Dolecek","twitter":"straaajk","discussion":"https://github.com/johnlindquist/kit/discussions/1537","url":"https://gist.githubusercontent.com/Strajk/5481a80bbc030119aece536d8a47497b/raw/3f6887b15b847423e7174154e87bb49ffb7ff4ba/install-dmg.ts","title":"Install app from dmg in Downloads","command":"install-app-from-dmg-in-downloads","content":"https://github.com/user-attachments/assets/cb559264-e247-4161-bb8e-27c1153751c0\r\n\r\n\r\n[Open install-dmg in Script Kit](https://scriptkit.com/api/new?name=install-dmg&url=https://gist.githubusercontent.com/Strajk/5481a80bbc030119aece536d8a47497b/raw/3f6887b15b847423e7174154e87bb49ffb7ff4ba/install-dmg.ts\")\r\n\r\n```ts\r\n// Name: Install app from dmg in Downloads\r\n\r\n/// Implementation notes:\r\n/// - dmg file name can be different from mounted volume name, e.g. UIBrowser302.dmg -> /Volumes/UI Browser 3.0.2.0\r\n/// - dmg might contain License agreement that needs to be accepted, e.g. UIBrowser302.dmg\r\n/// - dmg might contain other files than just the app, e.g. Extras folder and README.rtf, see UIBrowser302.dmg\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport fs, {statSync, unlinkSync} from \"fs\";\r\nimport {join} from \"path\";\r\nimport * as luxon from \"luxon\"\r\nimport {execa} from \"execa\";\r\nimport {execSync} from \"child_process\"\r\n\r\nlet downloadsDir = home(\"Downloads\") // Feel free to change\r\n\r\nlet dmgPaths = await globby(\"*.dmg\", { cwd: downloadsDir })\r\n\r\nlet dmgObjs = dmgPaths.map(path => ({\r\n    fullPath: join(downloadsDir, path), \r\n    baseName: path.split(\"/\").pop()?.replace(\".dmg\", \"\"),\r\n    createdAt: statSync(join(downloadsDir, path)).ctime.getTime(),\r\n    sizeInMb: statSync(join(downloadsDir, path)).size / 1024 / 1024\r\n})).sort((a, b) => b.createdAt - a.createdAt)\r\n\r\nif (dmgObjs.length === 0) {\r\n    setPlaceholder(\"No DMG files found in Downloads directory\")\r\n} else {\r\n    let selectedDmgPath = await arg({\r\n        placeholder: \"Which dmg?\", \r\n        choices: dmgObjs.map(dmg => ({\r\n            value: dmg.fullPath,\r\n            name: dmg.baseName,\r\n            description: `${luxon.DateTime.fromMillis(dmg.createdAt).toFormat('yyyy-MM-dd HH:mm')} • ${dmg.sizeInMb.toFixed(2)} MB`\r\n        }))\r\n    })\r\n    \r\n    console.log(`Mounting ${selectedDmgPath}`)\r\n    let volumeName = await attachDmg(selectedDmgPath)\r\n    let mountPath = `/Volumes/${volumeName}`;\r\n    console.log(`Mounted to ${mountPath}`)\r\n    // Note: Globby did not work for me for mounted volumes\r\n    let apps = fs.readdirSync(mountPath).filter(f => f.endsWith(\".app\"))\r\n\r\n    if (apps.length === 0) {\r\n        setPlaceholder(\"No apps found in the mounted volume\")\r\n        // TODO: Find a better way to do early returns/exits\r\n    } else {\r\n        let confirmed = await arg({\r\n            placeholder: `Found ${apps.length} apps: ${apps.join(\", \")}, install?`,\r\n            choices: [\"yes\", \"no\"]\r\n        })\r\n        \r\n        if (confirmed !== \"yes\") {\r\n            notify(\"Aborted\")\r\n            process.exit(0)\r\n        }\r\n        \r\n        for (let app of apps) {\r\n          console.log(`Copying ${app} to /Applications folder`);\r\n          await execa(`cp`, [\r\n            '-a', `${mountPath}/${app}`,\r\n            '/Applications/'\r\n          ]);\r\n        }\r\n        \r\n        console.log(`Detaching ${mountPath}`)\r\n        await detachDmg(mountPath)\r\n        \r\n        let confirmDeletion = await arg({\r\n            placeholder: `Delete ${selectedDmgPath}?`,\r\n            choices: [\"yes\", \"no\"]\r\n        })\r\n        \r\n        if (confirmDeletion === \"yes\") {\r\n            console.log(`Deleting ${selectedDmgPath}`)\r\n            await trash(selectedDmgPath)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Helpers\r\n// ===\r\nasync function attachDmg(dmgPath: string): Promise<string> {\r\n    // https://superuser.com/questions/221136/bypass-a-licence-agreement-when-mounting-a-dmg-on-the-command-line\r\n    let out = execSync(`yes | PAGER=cat hdiutil attach \"${dmgPath}\"`).toString()\r\n    let lines = out.split(\"\\n\").reverse()\r\n    // from the end, find line with volume name\r\n    // /dev/disk6s2 Apple_HFS /Volumes/UI Browser 3.0.2.0\r\n    let lineWithVolume = lines.find(line => line.includes(\"/Volumes/\"))\r\n    if (!lineWithVolume) {\r\n        throw new Error(`Failed to find volume name in output: ${out}`)\r\n    }\r\n    let volumeName = lineWithVolume.split(`/Volumes/`)[1]\r\n    return volumeName\r\n}\r\n\r\nasync function detachDmg(mountPoint: string) {\r\n    await execa('hdiutil', ['detach', mountPoint])\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-23T09:53:20Z"},{"name":"Whatsapp Babe A Late Message","description":"","author":"Taranveer (Taran) Bains","gitHub":"@tearingitup786","schedule":"0 14 * * *","avatar":"https://avatars.githubusercontent.com/u/16584942?u=2e77702e9e84889ebbd425345332eb26b2bc2b9f&v=4","user":"tearingItUp786","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1536","url":"","title":"Whatsapp Template Message your babe!","command":"whatsapp-template-message-your-babe","content":"My workplace (like a lot of places), has my computer locked down so I can't use whatsapp web 😢 ! The gf got a little upset with me one day for not letting her know I was working late, so now I have this cron script that'll ask me if I'm working late and then shoot off a whatsapp message to her! \r\n\r\n[Install script](https://scriptkit.com/api/new?name=msg-gf&url=https://gist.githubusercontent.com/tearingItUp786/4a3bb75791058326f130b84e3a2f5eaf/raw/798b774a06cbecfd294cde99db6a13a93a808d9b/msg-gf.js)\r\n\r\n```js\r\n// Name: Whatsapp Babe A Late Message\r\n// Description: Send your babe a whatsapp templated mesage to let em know you're running late!\r\n// Author:  Taran \"tearing it up\" Bains\r\n// GitHub: @tearingitup786\r\n// Schedule: 0 14 * * *\r\n\r\nimport \"@johnlindquist/kit\"; // ScriptKit imports\r\n\r\n// Import Twilio SDK\r\nconst twilio = await npm(\"twilio\");\r\n\r\nconst phoneNumbers = await env(\r\n  \"TWILIO_PHONE_NUMBERS\",\r\n  \"comma separated list of numbers: 131-131-1313,787-787-7878\",\r\n);\r\n\r\ntry {\r\n  const numbersToText = phoneNumbers.split(\",\");\r\n\r\n  // Your Twilio Account SID\r\n  const accountSid = await env(\"TWILIO_ACCOUNT_SID\");\r\n\r\n  // Your Twilio Auth Token\r\n  const authToken = await env(\"TWILIO_AUTH_TOKEN\");\r\n\r\n  // Your Twilio phone number\r\n  /**\r\n   * You'll have to set up a whatsapp/facebook business account\r\n   * Twilio makes it pretty easy to do this so don't fret, it's pretty straightforward.\r\n   *\r\n   * @docs https://www.twilio.com/docs/whatsapp/getting-started\r\n   */\r\n  const fromNumber = await env(\"TWILIO_PHONE_NUMBER\");\r\n\r\n  /**\r\n   * We opt for a message template so that the numbers we are messaging\r\n   * don't need to have this particular number saved as a contact\r\n   * We're able to start conversations with whatsapp users with message template\r\n   * doing it via adhoc messaging doesn't really work!\r\n   * @docs https://www.twilio.com/docs/whatsapp/tutorial/send-whatsapp-notification-messages-templates\r\n   */\r\n  const contentSid = await env(\"TWILIO_CONTENT_SID\");\r\n\r\n  const workingLate = await arg(\"Are you working late\", [\"yes\", \"no\"]);\r\n\r\n  if (workingLate === \"no\") {\r\n    console.log(\"Okay, won't text babe!\");\r\n    process.exit();\r\n  }\r\n\r\n  // Initialize Twilio client\r\n  const client = twilio(accountSid, authToken);\r\n\r\n  // Function to send a message\r\n  const phoneNumber = await arg(\r\n    \"Enter the recipient's phone number (e.g., +1234567890):\",\r\n    numbersToText,\r\n  );\r\n\r\n  const messageBody = await arg(\r\n    \"Enter when you'll be free... He'll be free around <your message>\",\r\n  );\r\n\r\n  console.log(\"Last time given\", messageBody);\r\n\r\n  client.messages\r\n    .create({\r\n      // body: messageBedy,\r\n      contentVariables: JSON.stringify({ 1: `${messageBody}` }),\r\n      from: `whatsapp:${fromNumber}`,\r\n      contentSid,\r\n      to: `whatsapp:+1${phoneNumber}`,\r\n    })\r\n    .then((message) => {\r\n      notify(`Message sent to ${phoneNumber}! Message SID: ${message.sid}`);\r\n      console.log(`Message SID: ${message.sid}`);\r\n    })\r\n    .catch((error) => {\r\n      notify(`Error sending message: ${error.message}`);\r\n      console.error(\"Error:\", error);\r\n    });\r\n} catch (err) {\r\n  console.error(\"There was an error running the twilio script\");\r\n  console.error(\"Error\", err);\r\n}\r\n\r\n\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-18T23:39:46Z"},{"name":"Log Past X Minutes to Calendar","description":"","author":"Pavel 'Strajk' Dolecek","twitter":"straaajk","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","discussion":"https://github.com/johnlindquist/kit/discussions/1534","url":"","title":"Log Past X Minutes to Calendar","command":"log-past-x-minutes-to-calendar","content":"https://github.com/user-attachments/assets/af3d70d8-5223-461b-8146-6b6de1e8e3d1\r\n\r\n\r\n[Open log-past-x-minutes-to-cal in Script Kit](https://scriptkit.com/api/new?name=log-past-x-minutes-to-cal&url=https://gist.githubusercontent.com/Strajk/b7f2002bf9d88a5c4654a7257e250c59/raw/2b97244f5832bf792079781ce290064890c0a4a0/log-past-x-minutes-to-cal.js\")\r\n\r\n```js\r\n// Name: Log Past X Minutes to Calendar\r\n// Description: Asks for duration in minutes, event title, and (on first use) calendar name\r\n// Author: Pavel 'Strajk' Dolecek <www.strajk.me>\r\n// Twitter: @straaajk\r\n// me.strajk:status SHARED\r\n\r\nconst minutes = await arg(\"Enter the duration (in minutes) to log retroactively\")\r\nconst title = await arg(\"Describe the activity you want to log\")\r\n\r\nlet calendar = await env(\"SCRIPTKIT_LOG_CALENDAR_NAME\", {\r\n  hint: `Enter the exact name of an existing calendar in your Calendar app`,\r\n})\r\n\r\nawait applescript(`\r\n  tell application \"Calendar\"\r\n    switch view to week view\r\n    tell calendar \"${calendar}\"\r\n      set theCurrentDate to current date\r\n      make new event at end with properties {summary:\"${title}\", start date:theCurrentDate - ${minutes} * minutes, end date:theCurrentDate}\r\n    end tell\r\n  end tell\r\n`)\r\n\r\nawait notify(`Logged ${minutes} minutes of ${title} to ${calendar}`)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-11T18:28:41Z"},{"menu":"Super Search across multiple websites","description":"","author":"Pavel 'Strajk' Dolecek","twitter":"straaajk","bEWARE":"Discord search requires my userscript:","https":"//github.com/Strajk/setup/blob/master/user-scripts/discord-search-from-q-url-param.user.js","avatar":"https://avatars.githubusercontent.com/u/697301?u=180b0c1e04a21a9411a66126f71fa09693324238&v=4","user":"Strajk","discussion":"https://github.com/johnlindquist/kit/discussions/1533","url":"https://gist.githubusercontent.com/Strajk/65c9cda3426f2fbb8540bf1f94f0e484/raw/40f31e1c4841adb371803b4f60b1d9849b4f005a/super-search.ts","title":"Super Search across multiple websites – stupid simple script I use all the time :D","command":"super-search-across-multiple-websites-stupid-simple-script-i-use-all-the-time-d","content":"\r\nhttps://github.com/user-attachments/assets/8a961f10-9ec0-4e90-9016-cfd77a90f46d\r\n\r\n\r\n[Open super-search in Script Kit](https://scriptkit.com/api/new?name=super-search&url=https://gist.githubusercontent.com/Strajk/65c9cda3426f2fbb8540bf1f94f0e484/raw/40f31e1c4841adb371803b4f60b1d9849b4f005a/super-search.ts\")\r\n\r\n```ts\r\n// Menu: Super Search across multiple websites\r\n// Description: Search multiple websites, in bulk, in your browser\r\n// Author: Pavel 'Strajk' Dolecek <www.strajk.me>\r\n// Twitter: @straaajk\r\n//// Shortcut: command option ;\r\n// me.strajk:status WIP\r\n\r\n// BEWARE: Discord search requires my userscript:\r\n// https://github.com/Strajk/setup/blob/master/user-scripts/discord-search-from-q-url-param.user.js\r\n\r\nlet templates = {\r\n  discord: `https://discord.com/channels/{slug}/?q={query}`,\r\n  githubRepo: `https://github.com/{slug}/issues?q={query}`,\r\n  githubDiscussion: `https://github.com/{slug}/discussions?discussions_q={query}`,\r\n  twitter: `https://x.com/search?q=from%3A{slug}+{query}`,\r\n  reddit: `https://www.reddit.com/r/{slug}/search?q={query}`,\r\n  // TODO:\r\n  // Slack: But even harder than Discord https://stackoverflow.com/questions/51541986/a-way-to-open-up-slack-search-ui-in-a-browser-from-a-url\r\n}\r\n\r\n// Each topic can only use search templates defined above (discord, githubRepo, githubDiscussion)\r\n// but doesn't need to include all of them - just some are enough\r\n// ⬇⬇⬇ EDIT TO YOUR LIKING ⬇⬇⬇\r\nlet topics: Record<string, Partial<{[K in keyof typeof templates]: string[]}>> = {\r\n  kit: {\r\n    discord: [`804053880266686464`],\r\n    githubRepo: [`johnlindquist/kit`],\r\n    githubDiscussion: [`johnlindquist/kit`],\r\n    twitter: [`scriptkitapp`],\r\n  },\r\n  litellm: {\r\n    discord: [`1123360753068540065`],\r\n    githubRepo: [`BerriAI/litellm`],\r\n    githubDiscussion: [`BerriAI/litellm`],\r\n    twitter: [`LiteLLM`],\r\n  },\r\n  wxt: {\r\n    discord: [`1212416027611365476`],\r\n    githubRepo: [`wxt-dev/wxt`],\r\n    githubDiscussion: [`wxt-dev/wxt`]\r\n  },\r\n  coolify: {\r\n    discord: [`459365938081431553`],\r\n    githubRepo: [`coollabsio/coolify`],\r\n    githubDiscussion: [`coollabsio/coolify`],\r\n    twitter: [`coolify`],\r\n  },\r\n  crawlee: {\r\n    discord: [`801163717915574323`],\r\n    githubRepo: [`apify/crawlee`],\r\n    githubDiscussion: [`apify/crawlee`]\r\n  },\r\n  mantine: {\r\n    discord: [`854810300876062770`],\r\n    githubRepo: [`mantinedev/mantine`],\r\n    githubDiscussion: [`orgs/mantinedev`], // note it's different from repo above\r\n    twitter: [`mantinedev`],\r\n  },\r\n  supabase: {\r\n    discord: [`839993398554656828`],\r\n    githubDiscussion: [`orgs/supabase`],\r\n    reddit: [`Supabase`],\r\n    githubRepo: [\r\n      `supabase/supabase`,\r\n      `supabase/supabase-js`,\r\n      `supabase/cli`,\r\n      `supabase/postgrest-js`,\r\n      `supabase/supabase-py`,\r\n    ],\r\n  },\r\n  pnpm: {\r\n    discord: [`731599538665553971`],\r\n    githubRepo: [`pnpm/pnpm`],\r\n    githubDiscussion: [`pnpm/pnpm`],\r\n  },\r\n  ai: {\r\n    discord: [\r\n      `1110910277110743103`, // superagent\r\n      `1153072414184452236`, // autogen\r\n      `822583790773862470`, // latentspace\r\n      `1122748573000409160`, // ai stack devs\r\n      `877056448956346408`, // lablablab\r\n    ],\r\n  },\r\n  nextjs: {\r\n    discord: [\r\n      `752553802359505017`, // nextjs\r\n      `966627436387266600`, // theo typesafe cult\r\n    ],\r\n  },\r\n  plasmo: {\r\n    githubDiscussion: [`PlasmoHQ/plasmo`],\r\n    githubRepo: [`PlasmoHQ/plasmo`],\r\n    discord: [`946290204443025438`],\r\n  },\r\n  scraping: {\r\n    discord: [\r\n      `646150246094602263`, // scraping in prod\r\n      `851364676688543744`, // scrapy\r\n      `737009125862408274`, // scraping enthusiasts\r\n    ],\r\n  }\r\n}\r\n\r\nlet hint = `${isMac ? `⌘` : `Control`}+o to edit`\r\nlet type = await arg({\r\n  placeholder: `What topic? ${hint}`,\r\n  choices: Object.keys(topics),\r\n})\r\nlet query = await arg('Query?')\r\n\r\n\r\nlet topicObj = topics[type] // e.g. { discord: ['123', '345'], github: ['foo'] }\r\nfor (const [key, slugs] of Object.entries(topicObj)) {\r\n  // key is e.g. discord, githubIssues, githubDiscussions, ...\r\n  // slugs are e.g. ['12356', 'facebook/react']\r\n  for (const slug of slugs) {\r\n    // slug e.g. '12356', 'facebook/react'\r\n    let urlTemplate = templates[key] // e.g. 'github.com/{id}/issues?q={query}'\r\n    let url = urlTemplate\r\n      .replace('{slug}', slug) // e.g. 'facebook/react'\r\n      .replace('{query}', encodeURI(query)) // e.g. 'foo'\r\n    exec(`open ${url}`)\r\n  }\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-11-10T19:35:40Z"},{"name":"Open saved reddit posts","description":"","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1528","url":"https://gist.githubusercontent.com/RicardoBassete/df6ef12b5d994bf4ae7c7d75166f7545/raw/cb3c0d69059438105e5f78884cbb0ff09c966e0c/open-saved-reddit-posts.ts","title":"Open saved reddit posts","command":"open-saved-reddit-posts","content":"[Open open-saved-reddit-posts in Script Kit](https://scriptkit.com/api/new?name=open-saved-reddit-posts&url=https://gist.githubusercontent.com/RicardoBassete/df6ef12b5d994bf4ae7c7d75166f7545/raw/cb3c0d69059438105e5f78884cbb0ff09c966e0c/open-saved-reddit-posts.ts\")\r\n\r\n```ts\r\n// Name: Open saved reddit posts\r\n// Description: Open the \"saved posts\" section on your Reddit profile page.\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport '@johnlindquist/kit'\r\n\r\nconst username = await env('REDDIT_USERNAME', {\r\n  placeholder: 'Your reddit username',\r\n})\r\n\r\nopen(`https://www.reddit.com/user/${username}/saved/`)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-10-09T16:14:14Z"},{"name":"Open cheatsheet page in cheatsheets.zip","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1525","url":"https://gist.githubusercontent.com/RicardoBassete/ffca95b3bf8d04fb3f13aebee3a3d19e/raw/89e2ca645a282c7273c506c40c53396ba6e7a25c/search-cheatsheets.ts","title":"Open cheatsheet page in cheatsheets.zip","command":"open-cheatsheet-page-in-cheatsheetszip","content":"[Open search-cheatsheets in Script Kit](https://scriptkit.com/api/new?name=search-cheatsheets&url=https://gist.githubusercontent.com/RicardoBassete/ffca95b3bf8d04fb3f13aebee3a3d19e/raw/89e2ca645a282c7273c506c40c53396ba6e7a25c/search-cheatsheets.ts\")\r\n\r\n```ts\r\n/*\r\n# Open cheatsheet page in [cheatsheets.zip](https://www.cheatsheets.zip/)\r\n*/\r\n\r\n// Name: Open cheatsheet page in cheatsheets.zip\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport '@johnlindquist/kit'\r\nimport { Choice } from '@johnlindquist/kit'\r\nimport * as cheerio from 'cheerio'\r\n\r\nconst baseURL = 'https://cheatsheets.zip'\r\n\r\nconst { data } = await get(baseURL)\r\nconst $ = cheerio.load(data)\r\n\r\nconst alreadyAdded = []\r\n\r\nconst items: Choice<string>[] = $('a')\r\n  .get()\r\n  .filter(a => $(a).attr('href').startsWith('/'))\r\n  .filter(a => $(a).attr('href') != '/')\r\n  .filter(a => {\r\n    const href = $(a).attr('href')\r\n    if (alreadyAdded.includes(href)) {\r\n      return false\r\n    } else {\r\n      alreadyAdded.push(href)\r\n      return true\r\n    }\r\n  })\r\n  .map(a => {\r\n    return {\r\n      value: `${baseURL}/${$(a).attr('href')}`,\r\n      name: $(a).find('p').text(),\r\n    }\r\n  })\r\n\r\nconst target = await arg('Select cheatsheet', items)\r\n\r\nopen(target)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-10-02T14:44:14Z"},{"preview":"docs","menu":"Open Project","description":"","shortcut":"command shift .","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","author":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1521","url":"https://gist.githubusercontent.com/Ambushfall/d647502a208a72b78cbd8f5123a32395/raw/3024a57c78bfe80b8917e15425d2b83c00d24c33/dev-project.ts","title":"Updated project management script","command":"updated-project-management-script","content":"\r\n[Open dev-project in Script Kit](https://scriptkit.com/api/new?name=dev-project&url=https://gist.githubusercontent.com/Ambushfall/d647502a208a72b78cbd8f5123a32395/raw/3024a57c78bfe80b8917e15425d2b83c00d24c33/dev-project.ts\")\r\n\r\n```js\r\n// Preview: docs\r\n// Menu: Open Project\r\n// Description: Opens a project in vscode\r\n// Shortcut: command shift .\r\n\r\nimport '@johnlindquist/kit'\r\nimport { rmdirSync, existsSync } from 'fs'\r\n\r\nconst envPath = await env('PROJECT_DIR')\r\nconst projectDir = home(envPath)\r\nconst isGit = (input: string | Record<string, string>) =>\r\n  typeof input == 'string' ? input.includes('github.com') : false\r\nconst unfilteredProjectList = await readdir(projectDir)\r\nconst projectList = unfilteredProjectList.filter(\r\n  (value: string) => !value.includes('.')\r\n)\r\n\r\nlet { projects, write } = await db('projects', {\r\n  projects: projectList\r\n})\r\n\r\nprojects.sort((a: string, b: string) => {\r\n  if (a < b) {\r\n    return -1\r\n  }\r\n  if (a > b) {\r\n    return 1\r\n  }\r\n  return 0\r\n})\r\n\r\nprojects.forEach(async (val: string) => {\r\n  if (val.includes('.')) {\r\n    projects.pop(val)\r\n    await write()\r\n  }\r\n})\r\n\r\nprojectList.forEach(async (value: string) => {\r\n  if (!projects.includes(value)) {\r\n    projects.push(value)\r\n    await write()\r\n  }\r\n})\r\n\r\nasync function addExistingF (input: string) {\r\n  const pathToFolder = await selectFolder()\r\n  const dirname = path.basename(pathToFolder)\r\n\r\n  const pathToDir = path.resolve(projectDir, dirname)\r\n  const dirExists = existsSync(pathToDir)\r\n  if (dirExists) {\r\n    projects.push(input)\r\n    await write()\r\n    await submit('exit')\r\n  }\r\n}\r\n\r\nasync function gitCloneRepo (input: string, state: any) {\r\n  if (isGit(input)) {\r\n    await term({\r\n      command: `git clone ${input}`,\r\n      cwd: projectDir,\r\n      shortcuts: [\r\n        {\r\n          name: 'Exit',\r\n          key: `${cmd}+w`,\r\n          bar: 'right',\r\n          onPress: async () => {\r\n            await mainScript()\r\n          }\r\n        },\r\n        {\r\n          name: 'Back to Main Menu',\r\n          key: `${cmd}+enter`,\r\n          bar: 'right',\r\n          onPress: async () => {\r\n            await submit('exit')\r\n          }\r\n        }\r\n      ]\r\n    })\r\n  } else {\r\n    throw new Error('Not a git repository!')\r\n  }\r\n}\r\n\r\nasync function removeProjectActionHandler (input: string, state: any) {\r\n  let project = state?.focused?.value\r\n  rmdirSync(path.resolve(projectDir, project), { recursive: true })\r\n\r\n  let indexOfProject = projects.indexOf(project)\r\n  projects.splice(indexOfProject, 1)\r\n  await write()\r\n  await submit('exit')\r\n}\r\n\r\nasync function purgeFromList (input: string, state: any) {\r\n  let project = state?.focused?.value\r\n  let indexOfProject = projects.indexOf(project)\r\n  projects.splice(indexOfProject, 1)\r\n  await write()\r\n  await submit('exit')\r\n}\r\n\r\nasync function createF (input: string, state: any) {\r\n  const dir = path.resolve(projectDir, input)\r\n  const exists = await isDir(dir)\r\n  if (exists) {\r\n    return `${input} already exists`\r\n  } else {\r\n    const { code, stderr, stdout } = mkdir(dir)\r\n    if (stderr) {\r\n      throw stderr\r\n    }\r\n  }\r\n  const initorNot = await arg('Create git repo?', ['yes', 'no'])\r\n  if (initorNot === 'yes') {\r\n    cd(dir)\r\n    execLog('git init')\r\n  }\r\n\r\n  projects.push(input)\r\n  await write()\r\n\r\n  edit('', dir)\r\n}\r\n\r\nconst specialChoices = [\r\n  {\r\n    miss: true,\r\n    name: 'Clone Git Repository',\r\n    onSubmit: gitCloneRepo\r\n  },\r\n  {\r\n    miss: true,\r\n    name: 'Add folder to list',\r\n    onSubmit: addExistingF\r\n  },\r\n  {\r\n    miss: true,\r\n    name: 'Create Project folder',\r\n    onSubmit: createF\r\n  }\r\n]\r\n\r\nwhile (true) {\r\n  const projList = projects.map(project => project.split('\\\\').pop())\r\n  const previewList = projList.concat(specialChoices)\r\n  let project = await arg(\r\n    {\r\n      placeholder: 'Projects',\r\n      actions: [\r\n        { name: 'Remove Project', onAction: removeProjectActionHandler },\r\n        {\r\n          name: 'Remove from List',\r\n          onAction: purgeFromList\r\n        }\r\n      ]\r\n    },\r\n    previewList\r\n  )\r\n  const isExistingProject =\r\n    projects.filter((e: string) => e.includes(project)).length !== 0\r\n  if (project !== 'exit') {\r\n    if (isExistingProject) {\r\n      edit('', path.resolve(projectDir, project))\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-09-25T14:22:39Z"},{"menu":"Spongebob Mocking!","description":"","author":"Ambushfall","shortcut":"ctrl shift x","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1517","url":"https://gist.githubusercontent.com/Ambushfall/82e9ebcfa94e42ae1a9c8eb50866e58c/raw/4458cc9b1f6656187503b537f7d7363dfc7cf433/spongebob-mock.ts","title":"Mess with your friends with this goofy script 🫶","command":"mess-with-your-friends-with-this-goofy-script","content":"\r\n[Open spongebob-mock in Script Kit](https://scriptkit.com/api/new?name=spongebob-mock&url=https://gist.githubusercontent.com/Ambushfall/82e9ebcfa94e42ae1a9c8eb50866e58c/raw/4458cc9b1f6656187503b537f7d7363dfc7cf433/spongebob-mock.ts\")\r\n\r\n```js\r\n// Menu: Spongebob Mocking!\r\n// Description: Copy, run and paste!\r\n// Author: Ambushfall\r\n// Shortcut: ctrl shift x\r\n\r\nimport '@johnlindquist/kit'\r\nconst str = await getSelectedText() || await clipboard.readText();\r\nconst splitStr = str.split(' ')\r\nvar newString = ''\r\n\r\nfor (let i = 0; i < splitStr.length; i++) {\r\n  for (let j = 0; j < splitStr[i].length; j++) {\r\n\r\n    // get last char index\r\n    const lastIndexOfSplit = splitStr[i].length - 1;\r\n\r\n    // If the index matches the current add space \r\n    const addTrailingSpace = j == lastIndexOfSplit ? ' ' : ''\r\n\r\n    const char = `${splitStr[i][j]}${addTrailingSpace}`\r\n    const formatChar = j % 2 == 0 ? char.toLowerCase() : char.toUpperCase()\r\n    newString += formatChar;\r\n  }\r\n}\r\n\r\nawait clipboard.writeText(newString);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-09-04T13:39:01Z"},{"preview":"docs","menu":"Open Project","description":"","shortcut":"command shift .","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","author":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1514","url":"","title":"Open Projects folder [Win]","command":"open-projects-folder-win","content":"\r\n[Open dev-project in Script Kit](https://scriptkit.com/api/new?name=dev-project&url=https://gist.githubusercontent.com/Ambushfall/f1ea4d5dbd50cb4ba5310ee2e965d9fa/raw/d749a7218eda3c6aefe57783f38b7414d3b4cff9/dev-project.js\")\r\n\r\n```js\r\n// Preview: docs\r\n// Menu: Open Project\r\n// Description: Opens a project in vscode\r\n// Shortcut: command shift .\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport * as fs from \"fs\"\r\n\r\nconst envPath = await env('PROJECT_DIR');\r\n\r\nconst projectDir = home(envPath);\r\n\r\nconst unfilteredProjectList = await readdir(projectDir);\r\nconst projectList = unfilteredProjectList.filter(value => !value.includes('.'));\r\n\r\nlet { projects, write } = await db(\"projects\", {\r\n    projects: projectList,\r\n})\r\n\r\nprojects.forEach(async val => {\r\n    if (val.includes('.')) {\r\n        projects.pop(val);\r\n        await write()\r\n    }\r\n})\r\n\r\nprojectList.forEach(async value => {\r\n\r\n    if (!projects.includes(value)) {\r\n        projects.push(value);\r\n        await write()\r\n    }\r\n})\r\n\r\n\r\nonTab(\"Open\", async () => {\r\n    let project = await arg(\"Open project:\", projects.map(project => project.split('\\\\').pop()))\r\n    edit('', path.resolve(projectDir, project))\r\n})\r\n\r\nonTab(\"Add Path\", async () => {\r\n    while (true) {\r\n        let project = await arg(\r\n            \"Add path to project:\",\r\n            md(projects.map(project => `* ${project.split('\\\\').pop()}`).join(\"\\n\"))\r\n        )\r\n        projects.push(project)\r\n        await write()\r\n    }\r\n})\r\n\r\nonTab(\"Remove\", async () => {\r\n    while (true) {\r\n        let project = await arg(\"Open project:\", projects.map(project => project.split('\\\\').pop()))\r\n        let del = await arg(`Delete project dir: ${project}?`, [\"yes\", \"no\"])\r\n        if (del === \"yes\") {\r\n            fs.rmSync(path.resolve(projectDir, project), { recursive: true, force: true });\r\n\r\n        }\r\n\r\n        project.split(':').length > 1 ? await rm(path.resolve(project)) : await rm(path.resolve(projectDir, project))\r\n\r\n        let indexOfProject = projects.indexOf(project)\r\n        projects.splice(indexOfProject, 1)\r\n        await write()\r\n    }\r\n})\r\n\r\nonTab(\"New Project\", async () => {\r\n    while (true) {\r\n        let project = await arg(\r\n            {\r\n                placeholder: \"Create new project:\", debounceInput: 400,\r\n                enter: \"Create\", validate: async (input) => {\r\n                    const dir = path.resolve(projectDir, input)\r\n                    const exists = await isDir(dir);\r\n                    if (exists) {\r\n                        return `${input} already exists`;\r\n                    } else {\r\n                        const { code, stderr, stdout } = mkdir(dir);\r\n                        if(stderr){\r\n                            throw stderr;\r\n                        }\r\n                    }\r\n                    const initorNot = await arg(\"Create git repo?\", [\"yes\", \"no\"])\r\n                    if (initorNot === \"yes\") {\r\n                        cd(dir);\r\n                        execLog(\"git init\");\r\n                    }\r\n                    edit('', dir)\r\n                    return true;\r\n                }\r\n            },\r\n\r\n        )\r\n        projects.push(project)\r\n        mkdir(path.resolve(projectDir, project))\r\n        await write()\r\n    }\r\n})\r\n\r\n\r\n// Test gitpush\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-09-03T09:39:09Z"},{"name":"Obsidian Helper","author":"Ambushfall","description":"","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1513","url":"https://gist.githubusercontent.com/Ambushfall/e679e84614aa8729ffbb8f9f4876f5b7/raw/ca46a26bc6b79a797ffdb7bf72dce5ce4565f436/obsidian-helper.ts","title":"Obsidian Helper","command":"obsidian-helper","content":"\r\n[Open obsidian-helper in Script Kit](https://scriptkit.com/api/new?name=obsidian-helper&url=https://gist.githubusercontent.com/Ambushfall/e679e84614aa8729ffbb8f9f4876f5b7/raw/ca46a26bc6b79a797ffdb7bf72dce5ce4565f436/obsidian-helper.ts\")\r\n\r\n```js\r\n// Name: Obsidian Helper\r\n// Author: Ambushfall\r\n// Description: Usable script to easily add small additions to obsidian and allows preview and edit of markdown files directly.\r\n\r\n// This is just for speed of use.\r\n\r\nimport '@johnlindquist/kit'\r\nimport { Choice } from '@johnlindquist/kit'\r\nimport { readFileSync } from 'fs'\r\nimport _ from 'lodash'\r\n\r\nlet { obsidiandir, write } = await db('obsidiandir')\r\n\r\nlet route =\r\n  obsidiandir.length > 0\r\n    ? await arg(\r\n        {\r\n          placeholder: 'Select Obsidian vault',\r\n          shortcuts: [\r\n            {\r\n              name: 'Cancel',\r\n              key: 'escape',\r\n              bar: 'right',\r\n              onPress: () => mainScript(),\r\n              visible: true\r\n            }\r\n          ],\r\n          onNoChoices: async input => {\r\n            setPanel(\r\n              md(\r\n                `# Vault location not found <code>${input}</code>\\n Type <kbd>enter</kbd> to create a new vault at this location: <code>${input}</code>`\r\n              )\r\n            )\r\n          },\r\n          onChoiceFocus: async (_, state) => {\r\n            const Files: string[] = await readdir(state.focused?.value)\r\n            const FilteredDir: string[] = Files.filter((file: string) =>\r\n              file.toLowerCase().includes('.md')\r\n            )\r\n            let html = `<h1>Note List:</h1><ul style=\"margin:20px; padding:10px;\">\\n`\r\n            FilteredDir.forEach(e => {\r\n              html += `<li>${e}</li>`\r\n            })\r\n            html += `</ul>`\r\n            setPreview(html)\r\n          }\r\n        },\r\n        obsidiandir.map((e: string) => {\r\n          return {\r\n            type: 'text',\r\n            name: e.split('\\\\').at(-1),\r\n            value: e\r\n          }\r\n        })\r\n      )\r\n    : await path({\r\n        hint: 'Paste path to your obsidian vault!'\r\n      })\r\n\r\nif (!obsidiandir.find((e: string) => e == route) || obsidiandir.length == 0) {\r\n  obsidiandir.push(route)\r\n  await write()\r\n}\r\n\r\nif (isDir(route)) {\r\n  const Files: string[] = await readdir(route)\r\n  const FilteredDir: string[] = Files.filter((file: string) =>\r\n    file.toLowerCase().includes('.md')\r\n  )\r\n\r\n  let { filename } = await arg(\r\n    {\r\n      placeholder: 'select File'\r\n    },\r\n    (): Choice[] => {\r\n      return FilteredDir.map((file: string) => {\r\n        const str = readFileSync(path.join(route, file), 'utf-8')\r\n        // log(str)\r\n        return {\r\n          type: 'text',\r\n          name: file.replaceAll('.md', ''),\r\n          value: {\r\n            filename: file\r\n          },\r\n          preview: () => md(str)\r\n        }\r\n      })\r\n    }\r\n  )\r\n\r\n  /**\r\n   * This is taken directly from the examples for editor functionality\r\n   *\r\n   */\r\n  let changed = false\r\n\r\n  let filePath = path.join(route, filename)\r\n  let autoSave = _.debounce(async input => {\r\n    await writeFile(filePath, input.trim())\r\n  }, 3000)\r\n  let value = await ensureReadFile(filePath)\r\n  let cmd = isWin ? 'ctrl' : 'cmd'\r\n\r\n  let content = await editor({\r\n    value,\r\n    scrollTo: 'bottom',\r\n    shortcuts: [\r\n      {\r\n        name: 'Save',\r\n        key: `${cmd}+s`,\r\n        onPress: input => {\r\n          submit(input)\r\n        },\r\n        bar: 'right'\r\n      },\r\n      {\r\n        name: 'Open',\r\n        key: `${cmd}+o`,\r\n        onPress: async () => {\r\n          open(filePath)\r\n        },\r\n        bar: 'right'\r\n      }\r\n    ],\r\n    onEscape: async input => {\r\n      submit(input)\r\n    },\r\n    onAbandon: async input => {\r\n      submit(input)\r\n    },\r\n    onInput: async input => {\r\n      changed = true\r\n      autoSave(input)\r\n    }\r\n  })\r\n  hide()\r\n\r\n  let trimmed = content.trim()\r\n\r\n  if (changed) {\r\n    await writeFile(filePath, trimmed)\r\n  }\r\n}\r\n\r\nprocess.exit(0)\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-08-27T23:42:27Z"},{"name":"Open game page in nexusmods.com","description":"","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1506","url":"https://gist.githubusercontent.com/RicardoBassete/c45d112f2a68daa58a9b000e515afec1/raw/a7e28efc5db0fc891cad7bade07db9ebab7e0971/open-game-nexusmods.ts","title":"Open game page in nexusmods.com","command":"open-game-page-in-nexusmodscom","content":"\r\n[Open open-game-nexusmods in Script Kit](https://scriptkit.com/api/new?name=open-game-nexusmods&url=https://gist.githubusercontent.com/RicardoBassete/c45d112f2a68daa58a9b000e515afec1/raw/a7e28efc5db0fc891cad7bade07db9ebab7e0971/open-game-nexusmods.ts\")\r\n\r\n```ts\r\n/*\r\n# Open game page in nexusmods.com\r\n\r\nLets the user select and open the page of a game in [nexusmods.com](https://www.nexusmods.com/).\r\n*/\r\n\r\n// Name: Open game page in nexusmods.com\r\n// Description: Lets the user select and open the page of a game in nexusmods.com.\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport '@johnlindquist/kit'\r\n\r\ninterface Category {\r\n  category_id: number\r\n  name: string\r\n  parent_category: boolean | number\r\n}\r\n\r\ninterface Game {\r\n  approved_date: number\r\n  authors: number\r\n  categories: Category[]\r\n  domain_name: string\r\n  downloads: number\r\n  file_count: number\r\n  file_endorsements: number\r\n  file_views: number\r\n  forum_url: string\r\n  genre: string\r\n  id: number\r\n  mods: number\r\n  name: string\r\n  nexusmods_url: string\r\n}\r\n\r\nconst GAMES_API = 'https://api.nexusmods.com/v1/games.json'\r\nconst API_KEY = await env('NEXUSMODS_API_KEY', {\r\n  panel: md(`## Get a [Nexus Mods Personal API Key](https://next.nexusmods.com/settings/api-keys)`),\r\n  ignoreBlur: true,\r\n  secret: true,\r\n})\r\n\r\nconst { data } = await get<Game[]>(GAMES_API, {\r\n  headers: {\r\n    accept: 'application/json',\r\n    apikey: API_KEY,\r\n  },\r\n})\r\n\r\nconst target = await arg({\r\n  placeholder: 'Select Game',\r\n  choices: data.map(game => {\r\n    return {\r\n      name: game.name,\r\n      description: game.nexusmods_url,\r\n      value: game.nexusmods_url,\r\n      img: `https://staticdelivery.nexusmods.com/Images/games/4_3/tile_${game.id}.jpg`,\r\n      height: 250,\r\n    }\r\n  }),\r\n})\r\n\r\nopen(target)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-07-21T20:47:26Z"},{"name":"Toggle System Theme","author":"Argi","description":"","avatar":"https://avatars.githubusercontent.com/u/122152641?u=f7e7a392e6ef254d74880b0cfd34af8038e20777&v=4","user":"arkatsy","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1503","url":"","title":"Toggle System Theme (Windows)","command":"toggle-system-theme-windows","content":"```ts\r\n// Name: Toggle System Theme\r\n// Author: arkatsy\r\n// Description: Toggles the system theme between light and dark mode.\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport * as _regedit from \"regedit\";\r\nimport { exec } from \"child_process\";\r\n\r\nconst regedit = _regedit.promisified;\r\nconst REGISTRY_PATH = \"HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Themes\\\\Personalize\";\r\nconst DARK_THEME_VALUE = 0;\r\nconst LIGHT_THEME_VALUE = 1;\r\n\r\ntype SettingValue = {\r\n  type: string;\r\n  value: typeof DARK_THEME_VALUE | typeof LIGHT_THEME_VALUE;\r\n};\r\n\r\ntype RegistryThemeKeys = {\r\n  AppsUseLightTheme: SettingValue;\r\n  SystemUsesLightTheme: SettingValue;\r\n};\r\n\r\nconst res = await regedit.list([REGISTRY_PATH]);\r\nconst settingValues = res[REGISTRY_PATH].values;\r\n\r\nif (!(\"AppsUseLightTheme\" in settingValues) || !(\"SystemUsesLightTheme\" in settingValues)) {\r\n  throw new Error(\"AppsUseLightTheme or SystemUsesLightTheme not found in registry\");\r\n}\r\n\r\nconst isDark = (settingValues as RegistryThemeKeys).AppsUseLightTheme.value === DARK_THEME_VALUE;\r\nconst nextThemeValue = isDark ? LIGHT_THEME_VALUE : DARK_THEME_VALUE;\r\n\r\nawait regedit.putValue({\r\n  [REGISTRY_PATH]: {\r\n    AppsUseLightTheme: {\r\n      type: \"REG_DWORD\",\r\n      value: nextThemeValue,\r\n    },\r\n    SystemUsesLightTheme: {\r\n      type: \"REG_DWORD\",\r\n      value: nextThemeValue,\r\n    },\r\n  },\r\n});\r\n\r\n// When SystemUsesLightTheme changes, some elements like the taskbar need to be restarted for the theme to apply properly.\r\nexec(\"taskkill /F /IM explorer.exe\", (error) => {\r\n  if (error) {\r\n    throw new Error(`Failed to kill explorer.exe: ${error.message}`);\r\n  }\r\n\r\n  exec(\"start explorer.exe\", (error) => {\r\n    if (error) {\r\n      throw new Error(`Failed to restart explorer.exe: ${error.message}`);\r\n    }\r\n  });\r\n});\r\n\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-07-10T21:00:18Z"},{"name":"Download video with yt-dlp","description":"","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1499","url":"https://gist.githubusercontent.com/RicardoBassete/ed260621be7c8ff5eb215445a1d57488/raw/24e7880e430e37291e0b1545aef02b38a560669a/download-with-yd-dlp.ts","title":"Download video with yt-dlp","command":"download-video-with-yt-dlp","content":"\r\n[Open download-with-yd-dlp in Script Kit](https://scriptkit.com/api/new?name=download-with-yd-dlp&url=https://gist.githubusercontent.com/RicardoBassete/ed260621be7c8ff5eb215445a1d57488/raw/24e7880e430e37291e0b1545aef02b38a560669a/download-with-yd-dlp.ts\")\r\n\r\n```js\r\n// Name: Download video with yt-dlp\r\n// Description: Download video with yt-dlp\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst outDir = home('Downloads', 'yt-dlp')\r\n\r\nconst flags = {\r\n  mp4: `-f \"bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best\" -o \"%(title)s.mp4\"`,\r\n  mp3: `-o \"%(title)s.mp3\" -x --audio-format mp3 --audio-quality 0`,\r\n}\r\n\r\nconst videoURl = await arg({\r\n  placeholder: 'Video URL',\r\n  alwaysOnTop: true\r\n})\r\n\r\nconst format = await arg({\r\n  placeholder: 'Select format',\r\n  alwaysOnTop: true,\r\n  choices: Object.keys(flags),\r\n  strict: true\r\n})\r\n\r\nawait hide()\r\n\r\nawait ensureDir(outDir)\r\ncd(outDir)\r\nawait exec(`yt-dlp ${flags[format]} \"${videoURl}\"`)\r\nnotify({\r\n  title: 'Finished downloading video',\r\n  message: `Location: ${outDir}`\r\n})\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-06-28T13:30:35Z"},{"name":"Trim video with ffmpeg","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1497","url":"https://gist.githubusercontent.com/RicardoBassete/605c47a5804b11df2f09290e5f8601cb/raw/af35fdb9b868b37f4bf1fed9f3cadfee69eabf03/trim-video-with-ffmpeg.ts","title":"Trim video with ffmpeg","command":"trim-video-with-ffmpeg","content":"\r\n[Open trim-video-with-ffmpeg in Script Kit](https://scriptkit.com/api/new?name=trim-video-with-ffmpeg&url=https://gist.githubusercontent.com/RicardoBassete/605c47a5804b11df2f09290e5f8601cb/raw/af35fdb9b868b37f4bf1fed9f3cadfee69eabf03/trim-video-with-ffmpeg.ts\")\r\n\r\n```js\r\n// Name: Trim video with ffmpeg\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { basename, dirname, extname } from \"node:path\"\r\n\r\nconst inputPath = await selectFile('Select your video file')\r\n\r\nconst start = await arg('Start (hh:mm:ss)')\r\nconst end = await arg('End (hh:mm:ss)')\r\nconst outputName = await arg('Output name')\r\n\r\nconst fileDir = dirname(inputPath)\r\nconst ext = extname(inputPath)\r\n\r\nconst flags = [\r\n  `-i \"${inputPath}\"`,\r\n  `-ss ${start}`,\r\n  `-to ${end}`,\r\n  `-c copy \"${outputName}.${ext}\"`\r\n]\r\n\r\ncd(fileDir)\r\nawait hide()\r\nawait exec(`ffmpeg ${flags.join(' ')}`)\r\nnotify({\r\n  title: \"Trim video with ffmpeg\",\r\n  message: `Finished trimming ${basename(inputPath)}`\r\n})\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-06-26T20:02:02Z"},{"name":"Install with Homebrew","description":"","author":"Nick Hoyer","version":"1.0","avatar":"https://avatars.githubusercontent.com/u/9862931?u=d47b0d0b10bbbb01ffbb7a8f849602a7c8906d3b&v=4","user":"Nickhoyer","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1496","url":"https://gist.githubusercontent.com/Nickhoyer/62cd5dc59d24bee62504f43b9401bd55/raw/fdb01a84d6fc103565c82bd1c764850263caf98b/install-with-homebrew.ts","title":"Install a package using Homebrew","command":"install-a-package-using-homebrew","content":"\r\n[Open install-with-homebrew in Script Kit](https://scriptkit.com/api/new?name=install-with-homebrew&url=https://gist.githubusercontent.com/Nickhoyer/62cd5dc59d24bee62504f43b9401bd55/raw/fdb01a84d6fc103565c82bd1c764850263caf98b/install-with-homebrew.ts\")\r\n\r\n```js\r\n// Name: Install with Homebrew\r\n// Description: Install a package using Homebrew\r\n// Author: Nickolas Høyer-Larsen\r\n// Version: 1.0\r\n\r\nimport { exec as execRaw } from \"node:child_process\";\r\nimport { promisify } from \"node:util\";\r\nimport \"@johnlindquist/kit\";\r\nconst exec = promisify(execRaw);\r\n\r\ntype InfoType = {\r\n\tname?: string;\r\n\tdescription?: string;\r\n\tversion?: string;\r\n\tfromUrl?: string;\r\n\tprojectUrl?: string;\r\n\tanalytics?: string;\r\n\tartifacts?: string;\r\n\tinstalled?: boolean;\r\n};\r\n\r\nconst extractExtraDetails = (input) => ({\r\n\t\tversion: (input.match(/==> [\\w\\s]+: ([\\d.]+)/i) || [null])[1] || null,\r\n\t\tfromUrl: (input.match(/From: (https?:\\/\\/[^\\s]+)/i) || [null])[1] || null,\r\n\t\tprojectUrl: (input.match(/https?:\\/\\/[^\\s]+/i) || [])[0] || null,\r\n\t\tinstalled: !input.includes(\"Not installed\")\r\n\t});\r\n\r\nfunction parseToJSON(input): InfoType {\r\n\tconst result = input.split(\"\\n\").reduce((acc, line) => {\r\n\t\tif (line.startsWith(\"==>\")) {\r\n\t\t\tacc.currentKey = line.replace(\"==>\", \"\").trim().toLowerCase();\r\n\t\t\tacc[acc.currentKey] = \"\";\r\n\t\t} else if (acc.currentKey) {\r\n\t\t\tacc[acc.currentKey] += ` ${line.trim()}`;\r\n\t\t}\r\n\t\treturn acc;\r\n\t}, {});\r\n\r\n\tObject.keys(result).forEach(key => {\r\n\t\tresult[key] = result[key].trim();\r\n\t});\r\n\r\n\treturn { ...result, ...extractExtraDetails(input) };\r\n}\r\n\r\nconst packageName = await arg(\"Package name\", div(`\r\n\t<h1>Install a Homebrew Package</h1>\r\n\t<p class=\"text-sm font-normal\">Enter the name of the package you want to install.<br> You will see package details and be asked for confirmation before the installation proceeds.</p>\r\n`, \"p-4\"));\r\n\r\nconst { stdout: infoStdOut } = await exec(\r\n\t`PATH=\"/opt/homebrew/bin:$PATH\" brew info ${packageName}`,\r\n);\r\nconst info = parseToJSON(infoStdOut);\r\nif (info.installed) {\r\n\tsetTimeout(() => {\r\n\t\texit();\r\n\t}, 3000);\r\n\tawait div(md(`## Package is already installed. \r\n\r\nExiting in 3 seconds...`));\r\n}\r\nconst shouldInstall = await div(\r\n\t{\r\n\t\thtml: `\r\n${info.name ? `<h1><strong>${info.name}</strong> (${info.version})</h1>` : \"\"}\r\n${info.version ? `<a href=\"${info.projectUrl}\">${info.projectUrl}</a>` : \"\"}\r\n${info.description ? `<p>${info.description}</p>` : \"\"}\r\n${info.fromUrl ? `<p><strong>From:</strong> ${info.fromUrl}</p>` : \"\"}\r\n${md(`### Do you want to install this package?\r\n* [Yes](submit:yes)\r\n* [No](submit:no)`)}\r\n`.trim(),\r\n\t},\r\n\t\"p-8\",\r\n);\r\nif (shouldInstall === \"yes\") {\r\n\tawait term(\r\n\t\t`PATH=\"/opt/homebrew/bin:$PATH\" brew install ${packageName} && exit`,\r\n\t);\r\n\tsetTimeout(() => {\r\n\t\texit();\r\n\t}, 3000);\r\n\tawait div(md(`## Package has been succesfully installed!\r\n\r\nExiting in 3 seconds...`));\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-06-26T17:22:00Z"},{"name":"Create Apple Note","shortcut":"command option control a","avatar":"https://avatars.githubusercontent.com/u/14251963?u=0b0aa05d6cecad78bfe2ce8d2f0754dfe86b2e6e&v=4","user":"burhanrashid52","author":"Burhanuddin Rashid","twitter":"burhanrashid52","discussion":"https://github.com/johnlindquist/kit/discussions/1490","url":"","title":"Create Apple Note","command":"create-apple-note","content":"Although we can do the same using Apple Shortcuts on Mac, I find it to be too slow and the window for typing notes is very small. This is my initial version; perhaps we can convert the Markdown version from the editor to Apple Notes formatting.\r\n\r\nI already have a script for note creation and I would love to contribute to the Community Script if it's a common use case.\r\n\r\n```ts\r\n// Name: Create Apple Note\r\n// Shortcut: command option control a\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nimport * as applescript from 'applescript';\r\n\r\nfunction createAppleNoteScript(content: string) {\r\n  const title = 'Note created on ' + new Date().toLocaleDateString();\r\n  return `\r\n        tell application \"Notes\"\r\n            tell account \"iCloud\"\r\n                tell folder \"Notes\"\r\n                    make new note with properties {name:\"${title}\", body:\"${content}\"}\r\n                end tell\r\n            end tell\r\n        end tell\r\n    `;\r\n}\r\n\r\nfunction createAppleNote(content: string) {\r\n  const script = createAppleNoteScript(content);\r\n\r\n  applescript.execString(script, (err: Error | null, result: any) => {\r\n    if (err) {\r\n      console.error('Error creating note:', err);\r\n    } else {\r\n      console.log('Note created successfully:', result);\r\n    }\r\n  });\r\n}\r\n\r\nconst text = await editor(\"\");\r\ncreateAppleNote(text);\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-27T09:55:01Z"},{"name":"JSON to TypeScript","description":"","avatar":"https://avatars.githubusercontent.com/u/7313176?u=43cad991021da72ffa8a08a33fd0eb4dfbae8570&v=4","user":"JosXa","author":"Joscha Götzer","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1488","url":"https://gist.githubusercontent.com/JosXa/822f880443e6f735057cb1f21a08dce0/raw/7d3e00a0af84e8bfbea810a3e17372190325876a/json-to-typescript.ts","title":"JSON to TypeScript Models","command":"json-to-typescript-models","content":"[Open json-to-typescript in Script Kit](https://scriptkit.com/api/new?name=json-to-typescript&url=https://gist.githubusercontent.com/JosXa/822f880443e6f735057cb1f21a08dce0/raw/7d3e00a0af84e8bfbea810a3e17372190325876a/json-to-typescript.ts\")\r\n\r\n### Demo\r\n\r\nhttps://github.com/johnlindquist/kit/assets/7313176/504d163c-60b3-45f9-b805-3c3090bbb876\r\n\r\n```js\r\n// Name: JSON to TypeScript\r\n// Description: Convert some JSON to TypeScript models\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nimport jsonToTS from \"json-to-ts\"\r\n\r\nimport { submitShortcut } from \"@johnlindquist/kit/core/utils\"\r\nimport { refreshable } from \"@josxa/kit-utils\"\r\nimport { crudArg } from \"@josxa/kit-utils\"\r\nimport ModernError from \"modern-errors\"\r\n\r\nlet json = args[0]\r\n\r\nif (!json) {\r\n  json = await editor({\r\n    language: \"json\",\r\n    validate(input: string): true | string {\r\n      try {\r\n        JSON.parse(input)\r\n        return true\r\n      } catch (err) {\r\n        return ModernError.normalize(err).message\r\n      }\r\n    },\r\n    shortcuts: [submitShortcut],\r\n  })\r\n}\r\n\r\nconst rootName = await crudArg(\"Name of the root type?\")\r\n\r\nconst options: Parameters<typeof jsonToTS>[1] = {\r\n  rootName,\r\n  useTypeAlias: true,\r\n}\r\n\r\nawait refreshable(async ({ refresh }) => {\r\n  let types = \"\"\r\n\r\n  try {\r\n    types = `${jsonToTS(JSON.parse(json), options).join(\"\\n\\n\")}\\n`\r\n  } catch (error) {\r\n    const hint = ModernError.normalize(error).message\r\n    setHint(hint)\r\n    exit()\r\n  }\r\n\r\n  if (options.useTypeAlias) {\r\n    types = types.replaceAll(/^type /g, \"export type \")\r\n  } else {\r\n    types = types.replaceAll(/^interface /g, \"export interface \")\r\n  }\r\n\r\n  await editor({\r\n    value: types,\r\n    language: \"ts\",\r\n    shortcuts: [\r\n      {\r\n        key: `${cmd}+shift+t`,\r\n        name: `Use ${options.useTypeAlias ? \"Interfaces\" : \"Types\"}`,\r\n        onPress: () => {\r\n          options.useTypeAlias = !options.useTypeAlias\r\n          refresh()\r\n        },\r\n        visible: true,\r\n        bar: \"right\",\r\n      },\r\n      {\r\n        name: \"Copy to Clipboard\",\r\n        key: `${cmd}+shift+c`,\r\n        onPress: async (input) => {\r\n          await clipboard.writeText(input)\r\n          setHint(\"Copied to clipboard\")\r\n        },\r\n        visible: true,\r\n        bar: \"right\",\r\n      },\r\n    ],\r\n  })\r\n})\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-23T18:26:04Z"},{"name":"AWS S3","description":"","keyword":"AWS","author":null,"avatar":"https://avatars.githubusercontent.com/u/35391131?v=4","user":"DrTrojanDevil","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1487","url":"","title":"AWS S3 Explore, CRUD & Download...effortlessly 😎","command":"aws-s3-explore-crud-and-downloadeffortlessly","content":"[do s3 stuff in script kit ](https://github.com/DrTrojanDevil/aws_kenv/blob/main/scripts/aws-s3.ts)\r\n\r\n```typescript\r\n// Name: AWS S3 \r\n// Description: A utility to interact with s3 buckets\r\n// Keyword: AWS\r\n// Author: Aaron Walker, Ph. D. \r\n\r\n/**\r\n * AWS S3 Utility Script\r\n *\r\n * This script provides a command-line utility for interacting with AWS S3 buckets using the Script Kit framework.\r\n * It allows users to list, upload, download, view, edit, and delete objects in S3 buckets.\r\n * The script leverages the AWS SDK for JavaScript (v3).\r\n *\r\n * Key Features:\r\n * - List S3 buckets and their contents, including folders and files.\r\n * - Navigate through bucket folders with support for returning to previous levels.\r\n * - Upload files to a specified path within a bucket, with overwrite confirmation.\r\n * - Download files from S3 buckets to the local filesystem.\r\n * - Open text files in an editor for viewing and modification.\r\n * - Save modified files either locally or back to the S3 bucket.\r\n * - Display images directly within the script interface.\r\n * - Delete files from S3 buckets with confirmation.\r\n *\r\n * Usage:\r\n * - Initialize AWS credentials and region using environment variables.\r\n * - Select an S3 bucket to interact with from the list of available buckets.\r\n * - Use the provided options to navigate folders, upload files, download files, edit text files, and delete files.\r\n *\r\n * Requirements:\r\n * - AWS SDK for JavaScript (v3)\r\n * - Script Kit framework\r\n * - js-yaml and node-jq packages for handling YAML and JSON formatting\r\n *\r\n * github: DrTrojanDevil\r\n */\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { S3Client, ListBucketsCommand, ListObjectsCommand, GetObjectCommand, HeadObjectCommand, PutObjectCommand, DeleteObjectCommand } from \"@aws-sdk/client-s3\"\r\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\"\r\nimport yaml from 'js-yaml'\r\nimport jq from 'node-jq'\r\n\r\n//TODO\r\n//1. add some commands to change aws creds and region \r\n\r\n// Initialize environment variables\r\nconst accessKeyId = await env(\"AWS_ACCESS_KEY_ID\", \"Enter your AWS Access Key ID\")\r\nconst secretAccessKey = await env(\"AWS_SECRET_ACCESS_KEY\", \"Enter your AWS Secret Access Key\")\r\nconst awsRegion = await env(\"AWS_REGION\", \"us-west-2\");\r\n\r\n// Initialize AWS S3 client\r\nconst s3 = new S3Client({\r\n  region: awsRegion,\r\n  credentials: {\r\n    accessKeyId,\r\n    secretAccessKey,\r\n  },\r\n})\r\n\r\n// SVG icons\r\nconst icons = {\r\n  bucketIcon: `\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\" fill=\"currentColor\">\r\n    <path d=\"M12 2C10.895 2 10 2.895 10 4H4C3.447 4 3 4.447 3 5V7C3 7.553 3.447 8 4 8V20C4 21.104 4.896 22 6 22H18C19.104 22 20 21.104 20 20V8C20.553 8 21 7.553 21 7V5C21 4.447 20.553 4 20 4H14C14 2.895 13.105 2 12 2zM10 4H14C14.553 4 15 4.447 15 5H9C9 4.447 9.447 4 10 4zM5 7V5H19V7H5zM6 20V8H18V20H6z\"/>\r\n  </svg>\r\n  `,\r\n  folderIcon: `\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\" fill=\"currentColor\">\r\n    <path d=\"M10 4L12 6H20C21.104 6 22 6.896 22 8V18C22 19.104 21.104 20 20 20H4C2.896 20 2 19.104 2 18V6C2 4.896 2.896 4 4 4H10zM4 8V18H20V8H4z\"/>\r\n  </svg>\r\n  `,\r\n  fileIcon: `\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\" fill=\"currentColor\">\r\n    <path d=\"M14 2H6C4.896 2 4 2.896 4 4V20C4 21.104 4.896 22 6 22H18C19.104 22 20 21.104 20 20V8L14 2zM14 4L18 8H14V4zM6 4H12V9H18V20H6V4z\"/>\r\n  </svg>\r\n  `,\r\n  uploadIcon: `\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\" fill=\"currentColor\">\r\n    <path d=\"M12 2L7 7H10V15H14V7H17L12 2zM5 19H19V21H5V19z\"/>\r\n  </svg>\r\n  `\r\n};\r\n\r\nfunction isTextFile(key: string) {\r\n  const txtTypes = {\r\n    '.txt': 'plaintext',\r\n    '.json': 'json',\r\n    '.yml': 'yaml',\r\n    '.yaml': 'yaml',\r\n    '.js': 'javascript',\r\n    '.ts': 'typescript',\r\n    '.html': 'html',\r\n    '.css': 'css',\r\n    '.md': 'markdown',\r\n    '.xml': 'xml',\r\n    '.sh': 'shell',\r\n    '.py': 'python',\r\n  }\r\n  for (const t of Object.keys(txtTypes)) {\r\n    if (key.endsWith(t)) {\r\n      return txtTypes[t]\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nasync function confirmAction(message: string): Promise<boolean> {\r\n  const confirm = await arg(message, [\r\n    { name: 'Yes', value: 'yes' },\r\n    { name: 'No', value: 'no' },\r\n  ])\r\n  return confirm === 'yes'\r\n}\r\n\r\nasync function* s3Explorer(bucketName: string, prefix: string = \"\") {\r\n  const history: string[] = []\r\n\r\n  try {\r\n    while (true) {\r\n      const objectCommand = new ListObjectsCommand({ Bucket: bucketName, Prefix: prefix, Delimiter: '/' })\r\n      const objectData = await s3.send(objectCommand)\r\n\r\n      if ((!objectData.Contents || objectData.Contents.length === 0) && (!objectData.CommonPrefixes || objectData.CommonPrefixes.length === 0)) {\r\n        await div(md(`### No objects found in bucket: ${bucketName} with prefix: ${prefix}`))\r\n        return\r\n      }\r\n\r\n      const items = [\r\n        { name: \"Return to Bucket Selection\", value: \"RETURN_TO_BUCKET_SELECTION\", html: `<div style=\"display: flex; align-items: center;\">${icons.bucketIcon}<span style=\"margin-left: 10px;\">Return to Bucket Selection</span></div>` },\r\n        ...(prefix ? [{ name: \"..\", value: \"..\", html: `<div style=\"display: flex; align-items: center;\">${icons.folderIcon}<span style=\"margin-left: 10px;\">..</span></div>` }] : []),\r\n        { name: \"Upload\", value: \"UPLOAD\", html: `<div style=\"display: flex; align-items: center;\">${icons.uploadIcon}<span style=\"margin-left: 10px;\">Upload</span></div>` },\r\n        ...(objectData.CommonPrefixes || []).map(item => ({\r\n          name: item.Prefix || \"Unnamed Prefix\",\r\n          value: item.Prefix || \"Unnamed Prefix\",\r\n          html: `<div style=\"display: flex; align-items: center;\">${icons.folderIcon}<span style=\"margin-left: 10px;\">${item.Prefix}</span></div>`\r\n        })),\r\n        ...(objectData.Contents || []).map(item => {\r\n          const key = item.Key || \"Unnamed Key\";\r\n          return {\r\n            name: key,\r\n            value: key,\r\n            preview: async () => {\r\n              const headObjectCommand = new HeadObjectCommand({ Bucket: bucketName, Key: key })\r\n              const headData = await s3.send(headObjectCommand)\r\n              const contentType = headData.ContentType || \"\"\r\n\r\n              const getObjectCommand = new GetObjectCommand({ Bucket: bucketName, Key: key })\r\n              const url = await getSignedUrl(s3, getObjectCommand, { expiresIn: 3600 })\r\n\r\n              if (contentType.startsWith(\"image/\")) {\r\n                return md(`### ${key}\\n![${key}](${url})`)\r\n              } else if (contentType === \"application/json\" || key.endsWith(\".json\")) {\r\n                const response = await fetch(url)\r\n                const jsonData = await response.json()\r\n                const formattedJson = await jq.run('.', jsonData, { input: 'json' })\r\n                return md(`### ${key}\\n\\`\\`\\`json\\n${formattedJson}\\n\\`\\`\\``)\r\n              } else if (contentType === \"application/x-yaml\" || contentType === \"text/yaml\" || key.endsWith(\".yml\") || key.endsWith(\".yaml\")) {\r\n                const response = await fetch(url)\r\n                const yamlData = await response.text()\r\n                const formattedYaml = yaml.dump(yaml.load(yamlData))\r\n                return md(`### ${key}\\n\\`\\`\\`yaml\\n${formattedYaml}\\n\\`\\`\\``)\r\n              } else {\r\n                const response = await fetch(url)\r\n                const textData = await response.text()\r\n                return md(`### ${key}\\n\\`\\`\\`text\\n${textData}\\n\\`\\`\\``)\r\n              }\r\n            },\r\n            html: `<div style=\"display: flex; align-items: center;\">${icons.fileIcon}<span style=\"margin-left: 10px;\">${key}</span></div>`\r\n          }\r\n        })\r\n      ]\r\n\r\n      const selectedItem = yield await arg(`Select an item in ${bucketName} (prefix: ${prefix})`, items, {\r\n        onAbandon: () => {\r\n          if (history.length > 0) {\r\n            prefix = history.pop() || ''\r\n            arg.hint = \"\"\r\n          } else {\r\n            prefix = \"\"\r\n            arg.hint = \"\"\r\n          }\r\n        },\r\n      })\r\n\r\n      if (selectedItem === \"RETURN_TO_BUCKET_SELECTION\") {\r\n        return\r\n      } else if (selectedItem === \"..\") {\r\n        if (history.length > 0) {\r\n          prefix = history.pop() || ''\r\n        } else {\r\n          prefix = \"\"\r\n        }\r\n      } else if (selectedItem === \"UPLOAD\") {\r\n        const keyPath = await arg(\"Enter the key path to upload:\")\r\n        const finalKeyPath = prefix ? `${prefix}${keyPath}` : keyPath\r\n\r\n        // Check if the file already exists\r\n        try {\r\n          const headObjectCommand = new HeadObjectCommand({ Bucket: bucketName, Key: finalKeyPath })\r\n          await s3.send(headObjectCommand)\r\n          const overwrite = await confirmAction(`File already exists at ${finalKeyPath}. Do you want to overwrite it?`)\r\n          if (!overwrite) {\r\n            continue\r\n          }\r\n        } catch (err) {\r\n          // File does not exist, proceed with upload\r\n        }\r\n\r\n        const filePath = await path({ hint: `Select the file to upload to ${finalKeyPath}` })\r\n        const fileContent = await readFile(filePath)\r\n\r\n        const putObjectCommand = new PutObjectCommand({\r\n          Bucket: bucketName,\r\n          Key: finalKeyPath,\r\n          Body: fileContent,\r\n        })\r\n        await s3.send(putObjectCommand)\r\n        await div(md(`### File successfully uploaded to ${finalKeyPath}`))\r\n\r\n      } else if (selectedItem.endsWith(\"/\")) {\r\n        history.push(prefix)\r\n        prefix = selectedItem\r\n      } else {\r\n        const headObjectCommand = new HeadObjectCommand({ Bucket: bucketName, Key: selectedItem })\r\n        const headData = await s3.send(headObjectCommand)\r\n        const contentType = headData.ContentType || \"\"\r\n\r\n        const getObjectCommand = new GetObjectCommand({ Bucket: bucketName, Key: selectedItem })\r\n        const url = await getSignedUrl(s3, getObjectCommand, { expiresIn: 3600 })\r\n        const res = isTextFile(selectedItem)\r\n        if (res) {\r\n          const action = await arg(`What would you like to do with ${selectedItem}?`, [\r\n            { name: 'Download', value: 'download' },\r\n            { name: 'Open in editor', value: 'open' },\r\n            { name: 'Delete', value: 'delete' },\r\n          ])\r\n          if (action === 'download') {\r\n            const filePath = await path({ hint: `Select download location for ${selectedItem}` })\r\n            await download(url, filePath)\r\n          } else if (action === 'open') {\r\n            const response = await fetch(url)\r\n            const textData = await response.text()\r\n            const prettyData = await jq.run('.', textData, { input: 'string' })\r\n            if (typeof prettyData === 'string') {\r\n              const editedData = await editor({\r\n                value: prettyData,\r\n                language: res\r\n              });\r\n\r\n              const nextAction = await arg(`What would you like to do with the edited version of: ${selectedItem}?`, [\r\n                { name: 'Save Locally', value: 'saveLocal' },\r\n                { name: 'Save to Bucket', value: 'saveBucket' },\r\n              ])\r\n\r\n              if (nextAction === 'saveLocal') {\r\n                const saveDestinationPath = await path() // Select a path that doesn't exist\r\n                await writeFile(saveDestinationPath, editedData)\r\n                await div(md(`### File successfully saved locally to ${saveDestinationPath}`))\r\n              } else if (nextAction === 'saveBucket') {\r\n                const confirmSave = await confirmAction(`Are you sure you want to overwrite the file at ${selectedItem}?`)\r\n                if (confirmSave) {\r\n                  const putObjectCommand = new PutObjectCommand({\r\n                    Bucket: bucketName,\r\n                    Key: selectedItem,\r\n                    Body: editedData,\r\n                    ContentType: contentType\r\n                  })\r\n                  await s3.send(putObjectCommand)\r\n                  await div(md(`### File successfully saved to ${selectedItem}`))\r\n                }\r\n              }\r\n            }\r\n          } else if (action === 'delete') {\r\n            const confirmDelete = await confirmAction(`Are you sure you want to delete the file at ${selectedItem}?`)\r\n            if (confirmDelete) {\r\n              const deleteObjectCommand = new DeleteObjectCommand({ Bucket: bucketName, Key: selectedItem })\r\n              await s3.send(deleteObjectCommand)\r\n              await div(md(`### File successfully deleted: ${selectedItem}`))\r\n            }\r\n          }\r\n        } else {\r\n          const filePath = await path({ hint: `Select download location for ${selectedItem}` })\r\n          await download(url, filePath)\r\n        }\r\n        return\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Error:\", err)\r\n    await div(md(`### Error: ${err.message}`))\r\n  }\r\n}\r\n\r\nasync function selectBucket() {\r\n  const bucketCommand = new ListBucketsCommand({})\r\n  const bucketData = await s3.send(bucketCommand)\r\n\r\n  if (!bucketData.Buckets || bucketData.Buckets.length === 0) {\r\n    await div(md(`### No buckets found`))\r\n    return null\r\n  }\r\n\r\n  const buckets = bucketData.Buckets.map(bucket => bucket.Name).filter(name => name !== undefined) as string[]\r\n  const bucketOptions = buckets.map(bucket => ({\r\n    name: bucket,\r\n    value: bucket,\r\n    html: `<div style=\"display: flex; align-items: center;\">${icons.bucketIcon}<span style=\"margin-left: 10px;\">${bucket}</span></div>`\r\n  }))\r\n  const selectedBucket = await arg(\"Select a bucket\", bucketOptions)\r\n  return selectedBucket\r\n}\r\n\r\nwhile (true) {\r\n  const selectedBucket = await selectBucket()\r\n  if (selectedBucket) {\r\n    const iterator = s3Explorer(selectedBucket)\r\n    let result = await iterator.next()\r\n    while (!result.done) {\r\n      result = await iterator.next(result.value)\r\n    }\r\n  } else {\r\n    break\r\n  }\r\n}\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-22T23:44:09Z"},{"name":"Cron Expression Validator","description":"","shortcode":"cron","author":"Joscha Götzer","avatar":"https://avatars.githubusercontent.com/u/7313176?u=43cad991021da72ffa8a08a33fd0eb4dfbae8570&v=4","user":"JosXa","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1486","url":"https://gist.githubusercontent.com/JosXa/2abbd7626b4e091cfcf01707589c7dbd/raw/aca824eaf052e5f55690d133127f82120d789f63/cron-expression-validator.ts","title":"Cron Expression Validator (e.g. for Schedule Metadata)","command":"cron-expression-validator-eg-for-schedule-metadata","content":"[Open cron-expression-validator in Script Kit](https://scriptkit.com/api/new?name=cron-builder&url=https://gist.githubusercontent.com/JosXa/2abbd7626b4e091cfcf01707589c7dbd/raw/aca824eaf052e5f55690d133127f82120d789f63/cron-expression-validator.ts\")\r\n\r\nI'm quite proud of this one. Super useful when you need to build `// Schedule` metadata. Also a nice showcase for using [Signals](https://www.npmjs.com/package/@preact/signals-core) in node apps.\r\n\r\n### Demo\r\nhttps://github.com/johnlindquist/kit/assets/7313176/29beaabc-1703-4313-aa9b-f963ef5b52e3\r\n\r\n```ts\r\n// Name: Cron Expression Validator\r\n// Description: Validates and helps you build Crontab expressions\r\n// Shortcode: cron\r\n// Author: @JosXa, loosely based on Ricardo Gonçalves Bassete's version\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { computed, effect, signal } from \"@preact/signals-core\"\r\nimport cronstrue from \"cronstrue\"\r\nimport { markdownTable } from \"markdown-table\"\r\n\r\nconst FONT_SIZE = \"0.8em\"\r\n\r\nconst allowedCharsTable = markdownTable(\r\n  [\r\n    [\"Character\", \"Meaning\"],\r\n    [\"`*`\", \"any value\"],\r\n    [\"`,`\", \"value list separator\"],\r\n    [\"`-`\", \"range of values\"],\r\n    [\"`/`\", 'step values (e.g. `*/5 * * * *` for \"every 5 minutes\")'],\r\n  ],\r\n  { align: \"l\" },\r\n)\r\nconst tableHtml = md(allowedCharsTable).replace('<th align=\"left\">', '<th align=\"left\" style=\"width: 17%\">')\r\n\r\nconst input = signal(\"* * * * *\")\r\n\r\nconst parts = computed(() => input.value.split(\" \"))\r\n\r\nconst parsedExpression = computed(() => {\r\n  try {\r\n    return cronstrue.toString(input.value)\r\n  } catch (err) {\r\n    return undefined\r\n  }\r\n})\r\nconst isValid = computed(() => !!parsedExpression.value)\r\n\r\nconst asciiHint = computed(() => {\r\n  if (!input.value) {\r\n    return `\r\n| | | | |\r\n| | | | +----- day of the week (0 - 7) (Sunday = 0 or 7)\r\n| | | +------- month (1 - 12)\r\n| | +--------- day of the month (1 - 31)\r\n| +----------- hour (0 - 23)\r\n+------------- minute (0 - 59)\r\n`.trim()\r\n  }\r\n\r\n  const hasSecond = parts.value.length >= 6\r\n\r\n  const names = [\r\n    \"second (0 - 59)\",\r\n    \"minute (0 - 59)\",\r\n    \"hour (0 - 23)\",\r\n    \"day of the month (1 - 31)\",\r\n    \"month (1 - 12)\",\r\n    \"day of the week (0 - 7) (Sunday = 0 or 7)\",\r\n  ]\r\n  if (!hasSecond) {\r\n    names.splice(0, 1)\r\n  }\r\n\r\n  /*\r\n    0 1 2 3 4 5 👉 partIdx\r\n  0 | | | | | +----- day of the week (0 - 7) (Sunday = 0 or 7)\r\n  1 | | | | +------- month (1 - 12)\r\n  2 | | | +--------- day of the month (1 - 31)\r\n  3 | | +----------- hour (0 - 23)\r\n  4 | +------------- minute (0 - 59)\r\n  5 +--------------- second (0 - 59)\r\n  👇\r\n  lineIdx\r\n   */\r\n\r\n  const columns = parts.value.reduce(\r\n    (agg, part, partIdx) => {\r\n      const prev = agg[partIdx - 1]\r\n      const startCol = prev ? prev.endCol + 1 : 0\r\n      const endCol = startCol + part.length\r\n      const name = names[partIdx]!\r\n      agg.push({\r\n        partIdx,\r\n        startCol,\r\n        endCol,\r\n        part,\r\n        gapToPrevious: Math.max(0, endCol - startCol),\r\n        name,\r\n      })\r\n      return agg\r\n    },\r\n    [] as Array<{\r\n      startCol: number\r\n      endCol: number\r\n      part: string\r\n      gapToPrevious: number\r\n      partIdx: number\r\n      name: string\r\n    }>,\r\n  )\r\n\r\n  const lines: string[] = []\r\n  const maxLen = columns.slice(-1)[0]!.endCol + 5\r\n\r\n  for (let lineIdx = -1; lineIdx < columns.length; lineIdx++) {\r\n    let line = \"\"\r\n    for (const { gapToPrevious, partIdx, name } of columns) {\r\n      if (lineIdx === -1) {\r\n        line += \"|\"\r\n        line += \" \".repeat(gapToPrevious)\r\n        continue\r\n      }\r\n\r\n      if (partIdx + lineIdx === columns.length - 1) {\r\n        line += \"+\"\r\n        line = line.padEnd(maxLen, \"-\")\r\n        line += ` ${name}`\r\n        break\r\n      }\r\n\r\n      line += \"|\"\r\n      line += \" \".repeat(gapToPrevious)\r\n    }\r\n    lines.push(line)\r\n  }\r\n\r\n  return lines.join(\"\\n\")\r\n})\r\n\r\nconst asciiHintHtml = computed(() =>\r\n  `<div style=\"font-size: ${FONT_SIZE};\" class=\"px-4\"><pre>${asciiHint}</pre></div>`.trim(),\r\n)\r\n\r\nconst resultMessage = computed(() => {\r\n  if (!input.value) {\r\n    return \"\"\r\n  }\r\n  return (\r\n    \"<br>\" +\r\n    (parsedExpression.value\r\n      ? `<h3 class=\"px-4\" style=\"color: rgba(var(--color-primary), var(--tw-text-opacity))\">👉 ${parsedExpression.value}</h3>`\r\n      : `<h3 class=\"px-4\" style=\"color: #f65671\">❌ The expression \"${input.value}\" cannot be parsed.</h3>`)\r\n  )\r\n})\r\n\r\nconst enter = computed(() => (isValid.value ? \"Copy\" : \"\"))\r\nconst panel = computed(() => `<div>${asciiHintHtml.value}${resultMessage.value}<br><hr>${tableHtml}</div>`)\r\n\r\nconst cleanup: Array<() => void> = []\r\n\r\nawait arg({\r\n  placeholder: \"Type a Crontab expression\",\r\n  input: input.value,\r\n  className: \"p-0\",\r\n  inputClassName: \"font-mono\",\r\n  css: `\r\n#input {\r\n  min-width: 250px !important;\r\n  font-size: ${FONT_SIZE} !important;\r\n}\r\n`,\r\n  onInit() {\r\n    cleanup.push(effect(() => setEnter(enter.value)))\r\n    cleanup.push(effect(() => setPanel(panel.value)))\r\n  },\r\n  onInput(val) {\r\n    if (!val) {\r\n      input.value = \"\"\r\n      return\r\n    }\r\n\r\n    let sanitized = val\r\n      // Replace duplicate spaces\r\n      .replaceAll(/\\s{2,}/g, \" \")\r\n      // Leading whitespace\r\n      .replaceAll(/^\\s+/g, \"\")\r\n\r\n    const s = sanitized.split(\" \")\r\n\r\n    // Ensure maximum of 6 parts\r\n    if (s.length > 6) {\r\n      sanitized = s.slice(0, 6).join(\" \")\r\n    }\r\n\r\n    if (val !== sanitized) {\r\n      setInput(sanitized)\r\n    }\r\n\r\n    input.value = sanitized\r\n  },\r\n  enter: enter.value,\r\n  alwaysOnTop: true,\r\n})\r\n\r\ncleanup.forEach((fn) => fn())\r\nawait clipboard.writeText(input.value)\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-21T22:04:09Z"},{"name":"Urban Dictionary","keyword":"ud","avatar":"https://avatars.githubusercontent.com/u/7313176?u=43cad991021da72ffa8a08a33fd0eb4dfbae8570&v=4","user":"JosXa","author":"Joscha Götzer","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1484","url":"https://gist.githubusercontent.com/JosXa/72299a317837c0d10337bb10c62db935/raw/06bd86b58dd61e8efeb97e222882bf5d523580c7/urban-dictionary.ts","title":"Search Urban Dictionary (urbandictionary.com)","command":"search-urban-dictionary-urbandictionarycom","content":"\r\n[Open urban-dictionary in Script Kit](https://scriptkit.com/api/new?name=urban-dictionary&url=https://gist.githubusercontent.com/JosXa/72299a317837c0d10337bb10c62db935/raw/06bd86b58dd61e8efeb97e222882bf5d523580c7/urban-dictionary.ts\")\r\n\r\n```js\r\n// Name: Urban Dictionary\r\n// Keyword: ud\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport type { Choice } from \"@johnlindquist/kit\"\r\nimport { DateTime } from \"luxon\"\r\nimport { escapeHTML } from \"../../.kit/core/utils\"\r\n\r\nawait setInput(\"\")\r\n\r\nconst debouncedOnInput = debounce(async (input) => {\r\n  if (!input) {\r\n    return\r\n  }\r\n\r\n  try {\r\n    const choices = await getResultsAsChoices(input)\r\n    await setChoices(choices)\r\n  } finally {\r\n    setHint(\"\")\r\n  }\r\n}, 500)\r\n\r\nconst link = await arg({\r\n  placeholder: \"Search a word definition\",\r\n  onInput: (input) => {\r\n    setHint(\"Searching...\")\r\n    debouncedOnInput(input)\r\n  },\r\n})\r\n\r\nawait clipboard.writeText(link)\r\n\r\nnotify({ title: \"Urban Dictionary\", message: \"Definition URL copied to clipboard.\" })\r\nawait wait(200) // Somehow the notify function needs some time to complete...\r\n\r\ntype Definition = {\r\n  definition: string\r\n  permalink: string\r\n  thumbs_up: number\r\n  author: string\r\n  word: string\r\n  defid: number\r\n  current_vote: string\r\n  written_on: string\r\n  example: string\r\n  thumbs_down: number\r\n}\r\n\r\nasync function getResultsAsChoices(query: string) {\r\n  const response = await get<{ list: Definition[] }>(\r\n    `https://api.urbandictionary.com/v0/define?term=${encodeURI(query)}`,\r\n  )\r\n\r\n  return response.data.list.map(\r\n    (e) =>\r\n      ({\r\n        name: e.word,\r\n        description: e.definition.replaceAll(/[\\[\\]]/g, \"\"),\r\n        preview: formatMdDefinition(e),\r\n        value: e.permalink,\r\n      }) as Choice<string>,\r\n  )\r\n}\r\n\r\nfunction formatMdDefinition(def: Definition) {\r\n  const parts: string[] = []\r\n\r\n  parts.push(`# ${def.word}`)\r\n  parts.push(f(def.definition))\r\n  parts.push(\"<br><br>\")\r\n  parts.push(`<i>${f(def.example)}</i>`)\r\n  parts.push(\"<br><br>\")\r\n\r\n  const timestamp = DateTime.fromISO(def.written_on).toFormat(\"MMMM d, yyyy\")\r\n  const author =\r\n    def.author && `by [${def.author}](https://www.urbandictionary.com/author.php?author=${encodeURI(def.author)})`\r\n\r\n  parts.push(`<b>${author ? `${author} ` : \"\"}${timestamp}</b>`)\r\n  parts.push(\"<br>\")\r\n  parts.push(`👍 ${def.thumbs_up} | 👎 ${def.thumbs_down}`)\r\n\r\n  return md(parts.join(\"\\n\"))\r\n}\r\n\r\nfunction f(val: string) {\r\n  const result = val.replaceAll(\"\\r\\n\", \"\\n\")\r\n  return result.replaceAll(/\\[(.*?)]/g, (substring: string, ...args: any[]) => {\r\n    const term = escapeHTML(args[0])\r\n    return `[${term}](https://www.urbandictionary.com/define.php?term=${encodeURI(term)})`\r\n  })\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-20T01:44:36Z"},{"name":"Generate scripts.d.ts","description":"","avatar":"https://avatars.githubusercontent.com/u/7313176?u=43cad991021da72ffa8a08a33fd0eb4dfbae8570&v=4","user":"JosXa","author":"Joscha Götzer","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1482","url":"https://gist.githubusercontent.com/JosXa/9934c4749c3c25c82398cf0ab1ab107d/raw/5f6e4b0e3d7e93c71d9437cef5cabde13e5ea956/generate-scripts-declarations.ts","title":"Get autocompletion for the `run` command","command":"get-autocompletion-for-the-run-command","content":"This script generates a `scripts.d.ts` file that annotates the `run` command with the available script names, using declaration merging.\r\n\r\nhttps://github.com/johnlindquist/kit/assets/7313176/48344f2b-2eee-4383-9de8-39c023d0470e\r\n\r\n[Open generate-scripts-declarations in Script Kit](https://scriptkit.com/api/new?name=generate-scripts-declarations&url=https://gist.githubusercontent.com/JosXa/9934c4749c3c25c82398cf0ab1ab107d/raw/5f6e4b0e3d7e93c71d9437cef5cabde13e5ea956/generate-scripts-declarations.ts\")\r\n\r\n```js\r\n// Name: Generate scripts.d.ts\r\n// Description: Enables autocompletion for the `run` command\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nimport { writeFile } from \"node:fs/promises\"\r\n\r\nconst scripts = await getScripts()\r\n\r\nconst availableScripts = scripts.map((x) => `  | \"${x.command}\"`).join(\"\\n\")\r\n\r\nconst body = `// Do not edit. Autogenerated by generate-scripts-declarations.ts\r\nimport type { Run } from \"../../.kit/types/kit\"\r\n\r\ntype AvailableScript = \r\n${availableScripts};\r\n\r\ndeclare module \"@johnlindquist/kit/types/kit\" {\r\n  export interface Run {\r\n    // biome-ignore lint/style/useShorthandFunctionType: <explanation>\r\n    (command?: AvailableScript, ...args: string[]): Promise<any>\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  var run: Run\r\n}`\r\n\r\nawait ensureDir(kenvPath(\"@types\"))\r\n\r\nawait writeFile(kenvPath(\"@types\", \"scripts.d.ts\"), body, { encoding: \"utf-8\" })\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-20T00:23:07Z"},{"name":"Edit global .gitignore","description":"","avatar":"https://avatars.githubusercontent.com/u/7313176?u=43cad991021da72ffa8a08a33fd0eb4dfbae8570&v=4","user":"JosXa","author":"Joscha Götzer","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1481","url":"https://gist.githubusercontent.com/JosXa/81192502120d001785452a5acf15d233/raw/f69b65e68927cfc1671d51c13d36ddca887a0037/edit-global-gitignore.ts","title":"Edit global .gitignore file and configure git accordingly if it doesn't exist","command":"edit-global-gitignore-file-and-configure-git-accordingly-if-it-doesnt-exist","content":"\r\n[Open edit-global-gitignore in Script Kit](https://scriptkit.com/api/new?name=edit-global-gitignore&url=https://gist.githubusercontent.com/JosXa/81192502120d001785452a5acf15d233/raw/f69b65e68927cfc1671d51c13d36ddca887a0037/edit-global-gitignore.ts\")\r\n\r\nIt may make sense to unignore the `db/_edit-global-gitignore.json` database file if you want to share your global gitignore between computers (that share the same .kenv).\r\n\r\nAs a JetBrains user, this script comes in very handy when needing to ignore some of the Plugin config files that are automatically created in the .idea folder:\r\n```\r\n**/.idea/GitLink.xml\r\n**/.idea/deploymentTargetDropDown.xml\r\n**/.idea/gbrowser_project.xml\r\n**/.idea/highlightedFiles.xml\r\n**/.idea/discord.xml\r\n**/.idea/developer-tools.xml\r\n**/.idea/CustomInspectionsConfig.xml\r\n```\r\n\r\n```js\r\n// Name: Edit global .gitignore\r\n// Description: Opens an editor with the global .gitignore file and sets it up if it doesn't exist\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { writeFile } from \"node:fs/promises\"\r\nimport { startSpinner } from \"@josxa/kit-utils\"\r\n\r\nconst cache = await db({ defaultEntries: [] as string[] })\r\n\r\nconst DESIRED_IGNORE_PATH = home(\".global.gitignore\")\r\n\r\nconst ensureGlobalGitIgnorePathConfigured = async () => {\r\n  try {\r\n    const existing = await exec(\"git config --global core.excludesfile\")\r\n    debugger\r\n\r\n    if (existing.stdout.toString() !== DESIRED_IGNORE_PATH) {\r\n      await exec(`git config --global core.excludesfile \"${DESIRED_IGNORE_PATH}\"`)\r\n      await div(`Global gitconfig file configured to be at ${DESIRED_IGNORE_PATH}`)\r\n    }\r\n  } catch (err) {\r\n    await exec(`git config --global core.excludesfile \"${DESIRED_IGNORE_PATH}\"`)\r\n    await div(`Global gitconfig file configured to be at ${DESIRED_IGNORE_PATH}`)\r\n  }\r\n}\r\n\r\nawait ensureGlobalGitIgnorePathConfigured()\r\n\r\nconst content = await ensureReadFile(DESIRED_IGNORE_PATH, \"\", { encoding: \"utf-8\" })\r\n\r\nconst updated = ensureDefaultEntriesPresent(content).trim()\r\n\r\nif (updated !== content) {\r\n  await writeFile(DESIRED_IGNORE_PATH, updated, { encoding: \"utf-8\" })\r\n  await div(\"Inserted default entries and wrote to file!\")\r\n}\r\n\r\nconst edited = (await editor({ value: updated })).trim()\r\n\r\nif (edited !== updated) {\r\n  await writeFile(DESIRED_IGNORE_PATH, edited, { encoding: \"utf-8\" })\r\n  startSpinner(\"dots\", { initialMessage: \"Writing...\" })\r\n  await wait(1200)\r\n  await submit(\"done\")\r\n}\r\n\r\ncache.defaultEntries = edited.split(\"\\n\")\r\nawait cache.write()\r\n\r\nfunction ensureDefaultEntriesPresent(content: string): string {\r\n  const lines = content.split(\"\\n\")\r\n\r\n  for (const x of cache.defaultEntries) {\r\n    if (!lines.includes(x)) {\r\n      lines.unshift(x)\r\n    }\r\n  }\r\n\r\n  return lines.join(\"\\n\")\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-19T15:50:49Z"},{"name":"Scriptkit generated scripts explorer","description":"","cache":"true","avatar":"https://avatars.githubusercontent.com/u/37043239?u=3c9eb3fd184eef2fb6aee97af163640c8e75dbf9&v=4","user":"macro21KGB","author":"Mario De Luca","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1480","url":"https://gist.githubusercontent.com/macro21KGB/495afe68c03488841f1a106e0242e323/raw/6c59d9628c9412750577da3aca4311d85e5ec416/scriptkit-generated-scripts-explorer.ts","title":"AI Generated scripts explorer","command":"ai-generated-scripts-explorer","content":"\r\n[Open scriptkit-generated-scripts-explorer in Script Kit](https://scriptkit.com/api/new?name=scriptkit-generated-scripts-explorer&url=https://gist.githubusercontent.com/macro21KGB/495afe68c03488841f1a106e0242e323/raw/6c59d9628c9412750577da3aca4311d85e5ec416/scriptkit-generated-scripts-explorer.ts\")\r\n\r\n```js\r\n// Name: Scriptkit generated scripts explorer\r\n// Description: Explore and copy scripts generated by AI for scriptkit\r\n// Cache: true\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst getScripts = async (text: string): Promise<{ title: string, code: string }[]> => {\r\n    const result = [];\r\n\r\n    const sections = text.split(\"## \").filter(section => section.trim());\r\n\r\n    sections.forEach(section => {\r\n        const lines = section.split(\"\\n\");\r\n        const title = lines.shift()?.trim();\r\n        let codeBlock = '';\r\n\r\n        let inCodeBlock = false;\r\n\r\n        lines.forEach(line => {\r\n            if (line.trim().startsWith(\"```typescript\")) {\r\n                inCodeBlock = true;\r\n                codeBlock += line + '\\n';\r\n            } else if (line.trim() === \"```\") {\r\n                inCodeBlock = false;\r\n                codeBlock += line + '\\n';\r\n            } else if (inCodeBlock) {\r\n                codeBlock += line.replaceAll(\"\\`\", \"`\") + '\\n';\r\n            }\r\n        });\r\n\r\n        if (title && codeBlock) {\r\n            if (codeBlock.length > 20)\r\n                result.push({ title, code: codeBlock });\r\n        }\r\n    });\r\n\r\n\r\n    return result;\r\n}\r\n\r\nconst removeCodeBlock = (text: string): string => {\r\n    return text.replace(/```typescript/g, '').replace(/```/g, '');\r\n}\r\n\r\nconst rawGist = await get(\"https://gist.githubusercontent.com/johnlindquist/e9b9a800ec54b1f2ebc3911d86225ea7/raw/b7e0d43c352b8b23001a8e6819cc18d41b72932a/Script%2520Kit%2520Generated%2520Examples.md\")\r\nconst scripts = await getScripts(rawGist.data)\r\n\r\nconst script = await arg(\"Select a script\", scripts.map(script => {\r\n    return {\r\n        name: script.title,\r\n        value: script.code,\r\n        preview: () => {\r\n            return md(script.code)\r\n        }\r\n    }\r\n}))\r\n\r\nawait clipboard.writeText(removeCodeBlock(script))\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-17T12:10:25Z"},{"name":"Search Manga in Manganato","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","author":"Ricardo Bassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1475","url":"https://gist.githubusercontent.com/RicardoBassete/9c6fd5537a99ceb3f72814632e4fbfba/raw/dbae05736c6815390059a54f3cbbe28863ef1caa/read-manga.ts","title":"Search Manga in Manganato","command":"search-manga-in-manganato","content":"\r\n[Open read-manga in Script Kit](https://scriptkit.com/api/new?name=read-manga&url=https://gist.githubusercontent.com/RicardoBassete/9c6fd5537a99ceb3f72814632e4fbfba/raw/dbae05736c6815390059a54f3cbbe28863ef1caa/read-manga.ts\")\r\n\r\n```js\r\n// Name: Search Manga in Manganato\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { Choice } from \"@johnlindquist/kit\"\r\nimport cheerio from 'cheerio'\r\nimport axios from 'axios'\r\n\r\ntype Manga = {\r\n  title: string\r\n  url: string\r\n  imageUrl: string\r\n}\r\n\r\ntype Chapter = {\r\n  title: string\r\n  url: string\r\n}\r\n\r\nconst baseUrl = 'https://mangakakalot.com'\r\n\r\nasync function loadCheerio(url: string) {\r\n  const { data } = await axios.get(url)\r\n  const $ = cheerio.load(data)\r\n  return $\r\n}\r\n\r\nasync function searchManga(searchTerm: string): Promise<Manga[]> {\r\n  const searchUrl = `${baseUrl}/search/story/${searchTerm.toLowerCase().replaceAll(' ', '_')}`\r\n  const $ = await loadCheerio(searchUrl)\r\n  const mangas: Manga[] = $('div.story_item').get().map(el => {\r\n    return {\r\n      title: $(el).find('h3.story_name').text().replaceAll('\\n', ''),\r\n      imageUrl: $(el).find('img').attr('src'),\r\n      url: $(el).find('h3.story_name > a').attr('href')\r\n    }\r\n  })\r\n  return mangas\r\n}\r\n\r\nasync function getChapterLinks(mangaUrl: string): Promise<Chapter[]> {\r\n  const $ = await loadCheerio(mangaUrl)\r\n  const chapterList: Chapter[] = $('ul.row-content-chapter > li > a').get().map(chapter => {\r\n    return {\r\n      title: $(chapter).text().replaceAll('\\n', ''),\r\n      url: $(chapter).attr('href')\r\n    }\r\n  })\r\n  return chapterList\r\n}\r\n\r\nfunction buildMangaResult(manga: Manga): Choice {\r\n  return {\r\n    name: manga.title,\r\n    value: manga.url,\r\n    img: manga.imageUrl,\r\n    height: 250,\r\n    preview: buildPreview(manga)\r\n  }\r\n}\r\n\r\nfunction buildChapterResult(chapter: Chapter): Choice {\r\n  return {\r\n    name: chapter.title,\r\n    value: chapter.url,\r\n    description: chapter.url\r\n  }\r\n}\r\n\r\nfunction buildPreview(manga: Manga) {\r\n  return `\r\n    <div class=\"p-5 prose prose-sm\">\r\n      <img class=\"rounded\" src=\"${manga.imageUrl}\"/>\r\n    </div>\r\n  `\r\n}\r\n\r\nconst mangaURL = await arg('Manga name', async input => {\r\n  const mangas: Manga[] = await searchManga(input)\r\n  const results = mangas.map(manga => buildMangaResult(manga))\r\n  return results\r\n})\r\n\r\nconst openChapterOrPage: 'Page' | 'Chapter' = await arg('Open manga page or chapter', ['Page', 'Chapter'])\r\nif(openChapterOrPage == 'Page') {\r\n  open(mangaURL)\r\n} else {\r\n  const chapters = await getChapterLinks(mangaURL)\r\n  const targetChapter = await arg('Select chapter', chapters.map(chapter => buildChapterResult(chapter)))\r\n  open(targetChapter)\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-08T23:22:05Z"},{"name":"Search Novel","avatar":"https://avatars.githubusercontent.com/u/75525118?u=fdda435b2cb91854b8a98c7eb337a3c5a01a4563&v=4","user":"ivanleopoldo","author":"ivaintwc","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1473","url":"https://gist.githubusercontent.com/ivanleopoldo/dd9d0ea8e4f2d4304d69d90f75097b4f/raw/177a006cd84a316e913eae0ef29b2dcff14a8592/search-novel.ts","title":"Search Novel in NovelFull","command":"search-novel-in-novelfull","content":"\r\n[Open search-novel in Script Kit](https://scriptkit.com/api/new?name=search-novel&url=https://gist.githubusercontent.com/ivanleopoldo/dd9d0ea8e4f2d4304d69d90f75097b4f/raw/177a006cd84a316e913eae0ef29b2dcff14a8592/search-novel.ts\")\r\n\r\n```js\r\n// Name: Search Novel\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport * as cheerio from \"cheerio\";\r\nimport axios from \"axios\";\r\n\r\nlet baseURL = \"https://novelfull.net\";\r\n\r\nfunction template(title, link, img) {\r\n  return {\r\n    name: title,\r\n    value: link,\r\n    html: `\r\n        <div class=\"flex flex-row h-full w-full py-2\">\r\n            <img class=\"h-auto\" src=\"${img}\" />\r\n            <h2 class=\"flex-1 flex flex-row items-center justify-center\">${title}</h2>\r\n            <div class=\"flex flex-row text-xxs items-center justify-right\">open</div>\r\n        </div>\r\n    `,\r\n  };\r\n}\r\n\r\nlet url = await arg(\"keyword...\", async (keyword) => {\r\n  if (keyword.trim() === \"\") return [];\r\n\r\n  let { data } = await axios.get(\r\n    `${baseURL}/search?keyword=${keyword.toLowerCase().replace(\" \", \"+\")}`\r\n  );\r\n\r\n  let $ = cheerio.load(data);\r\n\r\n  let novels = $(\"div.row\")\r\n    .get()\r\n    .map((tag) => {\r\n      if ($(tag).hasClass(\"row\")) {\r\n        let title = $(tag).find(\".truyen-title\").text();\r\n        let link =\r\n          baseURL + $(tag).find(\".truyen-title\").find(\"a\").attr(\"href\");\r\n        let img = baseURL + $(tag).find(\"img\").attr(\"src\");\r\n        return template(title, link, img);\r\n      }\r\n    });\r\n  return novels.filter((n) => n.value !== `${baseURL}undefined`);\r\n});\r\n\r\nawait $`open ${url}`;\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-08T17:43:11Z"},{"name":"New Stashpad Doc","avatar":"https://avatars.githubusercontent.com/u/6728767?u=b5a972a60c7f17540a11d042d237eccf86802072&v=4","user":"tsmarin","author":"Theo Marin","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1472","url":"https://gist.githubusercontent.com/tsmarin/57069437e4ec2d802e4f6cbf7290bdba/raw/ee9aaee42c7c54c75749c0f68b0c63343f92bfb0/new-stashpad-doc.ts","title":"New Stashpad Doc","command":"new-stashpad-doc","content":"\r\n[Open new-stashpad-doc in Script Kit](https://scriptkit.com/api/new?name=new-stashpad-doc&url=https://gist.githubusercontent.com/tsmarin/57069437e4ec2d802e4f6cbf7290bdba/raw/ee9aaee42c7c54c75749c0f68b0c63343f92bfb0/new-stashpad-doc.ts\")\r\n\r\n```js\r\n// Name: New Stashpad Doc\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nopen('https://stash.new/')\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-04T22:55:46Z"},{"name":"Search Stashpad Docs","avatar":"https://avatars.githubusercontent.com/u/6728767?u=b5a972a60c7f17540a11d042d237eccf86802072&v=4","user":"tsmarin","author":"Theo Marin","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1471","url":"https://gist.githubusercontent.com/tsmarin/228b19479ffb9ea8b7b25f0efa4c959b/raw/72370f8c3e6b370a65e7f9060834f41e6f46e6cc/search-stashpad-docs.ts","title":"Search Stashpad Docs","command":"search-stashpad-docs","content":"\r\n[Open search-stashpad-docs in Script Kit](https://scriptkit.com/api/new?name=search-stashpad-docs&url=https://gist.githubusercontent.com/tsmarin/228b19479ffb9ea8b7b25f0efa4c959b/raw/72370f8c3e6b370a65e7f9060834f41e6f46e6cc/search-stashpad-docs.ts\")\r\n\r\n```js\r\n// Name: Search Stashpad Docs\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst fetch = await npm(\"node-fetch\");\r\n\r\ninterface RecentDoc {\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\ninterface QueryResult {\r\n  data: RecentDoc[];\r\n}\r\n\r\nconst apiKey = await env(\"STASHPAD_DOCS_API_KEY\", {\r\n  hint: `Login to your account on <a href=\"https://docs.stashpad.com\">Stashpad Docs</a> and generate an API key from the settings menu (top right corner).`,\r\n});\r\n\r\nasync function getRecentDocs(apiKey: string) {\r\n  const response = await fetch(`https://api.stashpad.live/v1/docs/recent?api_key=${apiKey}`);\r\n  if (response.status !== 200) {\r\n    throw new Error(\"Please make sure your API key is valid.\");\r\n  }\r\n  return ((await response.json()) as QueryResult).data;\r\n}\r\n\r\nconst recentDocList = await getRecentDocs(apiKey)\r\n\r\nconst doc = await arg({\r\n    placeholder: \"Select a doc to go to\",\r\n  },\r\n  recentDocList.map((d) => {\r\n    return {\r\n      name: d.title,\r\n      value: `https://docs.stashpad.com/document/${d.id}`,\r\n    };\r\n  })\r\n);\r\n\r\nopen(doc)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-04T22:52:55Z"},{"name":"Kill","description":"","keyword":"kill","pass":"true","avatar":"https://avatars.githubusercontent.com/u/7313176?u=43cad991021da72ffa8a08a33fd0eb4dfbae8570&v=4","user":"JosXa","author":"Joscha Götzer","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1467","url":"https://gist.githubusercontent.com/JosXa/18639e54f872b8cea47ef010dbeadd9a/raw/b7347c5dc18c8f31f22dc62487c18a65ae8732d0/kill.ts","title":"[Windows] Kill any running process by name","command":"windows-kill-any-running-process-by-name","content":"[Open in Script Kit](https://scriptkit.com/api/new?name=kill&url=https://gist.githubusercontent.com/JosXa/18639e54f872b8cea47ef010dbeadd9a/raw/b7347c5dc18c8f31f22dc62487c18a65ae8732d0/kill.ts\")\r\n\r\n```js\r\n// Name: Kill\r\n// Description: Immediately terminates a Windows process using `taskkill /F /im <name.exe>`\r\n// Keyword: kill\r\n// Pass: true\r\n\r\nimport '@johnlindquist/kit'\r\nimport { Choice } from '@johnlindquist/kit'\r\n\r\nconst cache = await db({ recents: [\"node.exe\"] as string[] })\r\n\r\nconst exe = arg.pass ?? await arg('Type the name of a .exe to kill', cache.recents.map(x => {\r\n  if (x === 'node.exe') {\r\n    return {\r\n      name: x,\r\n      description: \"CAUTION: This will stop all Kit Scripts (including this one, so there won't be an output)\",\r\n      value: x\r\n    } as Choice\r\n  }\r\n\r\n  return x\r\n}))\r\n\r\ncache.recents = Array.from(new Set(cache.recents).add(exe))\r\ncache.write().then()\r\n\r\ntry {\r\n  const res = await exec(`taskkill /F /im \"${exe}\"`)\r\n  await div(res.stdout + res.stderr)\r\n} catch (err) {\r\n  if (err.exitCode === 128) {\r\n    await div('No process was active.')\r\n  }\r\n  console.error(err);\r\n  exit()\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-05-03T21:58:23Z"},{"name":"Chrome bookmarks (with folder support)","author":"Taranveer (Taran) Bains","description":"","gitHub":"@tearingitup786","avatar":"https://avatars.githubusercontent.com/u/16584942?u=2e77702e9e84889ebbd425345332eb26b2bc2b9f&v=4","user":"tearingItUp786","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1462","url":"","title":"Navigate chrome bookmarks (with folder support)","command":"navigate-chrome-bookmarks-with-folder-support","content":"\r\n[Install script in Script Kit\r\n](https://scriptkit.com/api/new?name=chrome-bookmarks-with-folder-support&url=https://gist.githubusercontent.com/tearingItUp786/b74247729f2b3fabd2761b081f677b9b/raw/431602d0b3af34678282612d899b251045022999/chrome-bookmarks-with-folder-support.js)\r\n\r\n\r\n```javascript\r\n// Name: Chrome bookmarks (with folder support)\r\n// Author:  Taran \"tearing it up\" Bains\r\n// Description: Navigate your chrome bookmarks (even if they are in folders)!\r\n// GitHub: @tearingitup786\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Reading the Chrome bookmarks file from the user's system\r\n// Maybe allow for a choice of different browsers?\r\nlet bookmarks = await readFile(\r\n  home(\"Library/Application Support/Google/Chrome/Default/Bookmarks\"),\r\n);\r\n\r\nbookmarks = JSON.parse(bookmarks);\r\nbookmarks = bookmarks.roots.bookmark_bar.children;\r\n\r\n// Initializing an array to keep track of the navigation history\r\nlet historyStack = [];\r\n\r\nconst CUSTOMSEPARATOR = \"-CUSTOMSEPARATOR-\";\r\n// Loop to handle user interaction and navigation within bookmarks\r\n\r\nwhile (true) {\r\n  const getBookmark = ({ name, url, type }) => {\r\n    if (type === \"folder\") {\r\n      return {\r\n        name: `🗂️ ${name}`,\r\n        description: \"⤵️ Select directory\",\r\n        value: `folder${CUSTOMSEPARATOR}${name}`, // Encoding type and name for folders\r\n      };\r\n    }\r\n\r\n    return {\r\n      name: `⛓️  ${name}`,\r\n      description: url,\r\n      type,\r\n      value: `link${CUSTOMSEPARATOR}${url}`, // Encoding type and URL for links\r\n    };\r\n  };\r\n\r\n  // Generating options based on current level of bookmarks\r\n  let options = bookmarks.map(getBookmark);\r\n\r\n  // Adding a \"go back\" option if there is history in the stack\r\n  if (historyStack.length > 0) {\r\n    options = [\r\n      { name: \"..\", description: \"Go back\", value: \"go-back\" },\r\n      ...options,\r\n    ];\r\n  }\r\n\r\n  const lastSelection = await arg(\"Select A Bookmark!\", options);\r\n\r\n  if (lastSelection === \"go-back\") {\r\n    bookmarks = historyStack.pop();\r\n    continue;\r\n  }\r\n\r\n  // Splitting the value to determine the type and actual value (name or URL)\r\n  const [type, value] = lastSelection.split(CUSTOMSEPARATOR);\r\n\r\n  if (type === \"folder\") {\r\n    // push the old bookmarks into the stack\r\n    historyStack.push(bookmarks);\r\n    bookmarks = bookmarks.find((bookmark) => bookmark.name === value).children;\r\n    continue;\r\n  }\r\n\r\n  if (type === \"link\") {\r\n    exec(`open \"${value}\"`);\r\n    break;\r\n  }\r\n\r\n  console.log(\"Unknown type\", type);\r\n}\r\nsh(bookmarks);\r\n    bookmarks = bookmarks.find((bookmark) => bookmark.name === value).children;\r\n    continue;\r\n  }\r\n\r\n  if (type === \"link\") {\r\n    exec(`open \"${value}\"`);\r\n    break;\r\n  }\r\n\r\n  console.log(\"Unknown type\", type);\r\n}\r\n\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-04-24T22:19:00Z"},{"name":"Clear Windows Notifications","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1456","url":"https://gist.githubusercontent.com/RicardoBassete/dd11635349d60e0de129a79795ecca92/raw/0d1e80765182f419beb522f3fb0bf50a8d31d2e3/clear-windows-notifications.ts","title":"Clear Windows Notifications","command":"clear-windows-notifications","content":"\r\n[Open clear-windows-notifications in Script Kit](https://scriptkit.com/api/new?name=clear-windows-notifications&url=https://gist.githubusercontent.com/RicardoBassete/dd11635349d60e0de129a79795ecca92/raw/0d1e80765182f419beb522f3fb0bf50a8d31d2e3/clear-windows-notifications.ts\")\r\n\r\n```js\r\n// Name: Clear Windows Notifications\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst command = `\r\n  [Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] | Out-Null\r\n\r\n  # get the list of all registry keys\r\n  $notifications = Get-ChildItem HKCU:\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Notifications\\\\Settings | Select-Object Name\r\n\r\n  # iterate through the keys, extract the name that will be used in the clear function, and clear the notifications\r\n  for ($index = 0; $index -lt $notifications.Count; $index++) {\r\n      $name = $notifications[$index]\r\n      $split = $name -split \"\\\\\\\\\"\r\n      $last = $split[$split.Count - 1]\r\n      $last = $last.Substring(0, $last.Length - 1)\r\n      ([Windows.UI.Notifications.ToastNotificationManager]::History).clear($last)\r\n  }\r\n`\r\nexec(command, { shell: 'powershell.exe' })\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-04-17T15:03:35Z"},{"name":"OCR","description":"","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","author":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1455","url":"https://gist.githubusercontent.com/Ambushfall/f224078e3ffb89fbea7d70792c0d7016/raw/ea088b124f76e137d2817d614a6905dd4f5a0995/ocr.ts","title":"Fixed Screencapture OCR Script for Windows","command":"fixed-screencapture-ocr-script-for-windows","content":"\r\n#1202 This is the reference script, now fixed for Win\r\n\r\n[Open ocr in Script Kit](https://scriptkit.com/api/new?name=ocr&url=https://gist.githubusercontent.com/Ambushfall/f224078e3ffb89fbea7d70792c0d7016/raw/ea088b124f76e137d2817d614a6905dd4f5a0995/ocr.ts\")\r\n\r\n```js\r\n// Name: OCR\r\n// Description: Capture a screenshot and recognize the text using tesseract.js\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\n//both win and linux implementations were created by chatgpt (gpt4), without _any_ tests!! 😅\r\nconst captureScreenshot = async () => {\r\n    const tmpFile = kenvTmpPath(`screenshot-${Date.now()}.png`);\r\n    const scriptFile = kenvTmpPath('script.ps1');\r\n\r\n    if (isMac) {\r\n        await exec(`screencapture -i ${tmpFile}`);\r\n    } else if (isWin) {\r\n        const psScript = `Add-Type -AssemblyName System.Windows.Forms;\r\n        [System.Windows.Forms.SendKeys]::SendWait('%{PRTSC}');\r\n        Start-Sleep -m 500;\r\n        $clipboardData = Get-Clipboard -Format Image;\r\n        $clipboardData.Save('${tmpFile}', [System.Drawing.Imaging.ImageFormat]::Png);`;\r\n        \r\n        // Save to file as powershell inline parsing is tricky, there are special rules to this and it's a pain.\r\n        // We already have write on disk, so there's really no point in encoding it as a string.\r\n        await writeFile(scriptFile, psScript.replace(/\\n/g, ''))\r\n        \r\n        // Execute saved file\r\n        await exec(`powershell -File \"${scriptFile}\"`);\r\n    } else if (isLinux) {\r\n        // Check if gnome-screenshot is available\r\n        try {\r\n            await exec('gnome-screenshot --version');\r\n            await exec(`gnome-screenshot -f ${tmpFile}`);\r\n        } catch (error) {\r\n            // If gnome-screenshot is not available, try using ImageMagick's 'import' command\r\n            await exec(`import ${tmpFile}`);\r\n        }\r\n    }\r\n\r\n    return tmpFile;\r\n};\r\n\r\nconst recognizeText = async (filePath, language) => {\r\n    const { createWorker } = await npm(\"tesseract.js\");\r\n    const worker = await createWorker();\r\n\r\n    await worker.loadLanguage(language);\r\n    await worker.initialize(language);\r\n\r\n    const { data } = await worker.recognize(filePath);\r\n\r\n    await worker.terminate();\r\n\r\n    return data.text;\r\n};\r\n\r\nconst languages = [\r\n    { name: \"Spanish\", value: \"spa\" },\r\n    { name: \"French\", value: \"fra\" },\r\n    { name: \"Portuguese\", value: \"por\" },\r\n    { name: \"English\", value: \"eng\" },\r\n];\r\n//@todo train a model for typescript (https://github.com/tesseract-ocr/tesstrain)\r\n\r\n// if ctrl is pressed, show a modal to select a language\r\nconst selectedLanguage = flag.ctrl\r\n    ? await arg(\"Select a language:\", languages)\r\n    : \"eng\";\r\n\r\n// Hide the Kit modal before capturing the screenshot\r\nawait hide();\r\n\r\nconst filePath = await captureScreenshot();\r\nif (!await pathExists(filePath)) exit()\r\n\r\nconst text = await recognizeText(filePath, selectedLanguage);\r\n\r\nif (text) {\r\n    await clipboard.writeText(text.trim());\r\n    await notify(\"Text recognized and copied to clipboard\");\r\n} else {\r\n    await notify(\"No text found in the screenshot\");\r\n}\r\n\r\n// Clean up temporary file\r\nawait remove(filePath);\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-04-04T00:37:25Z"},{"name":"Run .bat/.ps1/.sh","description":"","note":"linux shell will only work with WSL or you can provide the Args for ps1 using the .sh extension if you have gitbash","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","author":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1454","url":"https://gist.githubusercontent.com/Ambushfall/354c586a93af7cc1d6931ac8ef5c954a/raw/c7897caaec29152ec3aa8527eeaf4106a70fd0a7/win32-run-script.ts","title":"win32-run-script","command":"win32-run-script","content":"\r\n[Open win32-run-script in Script Kit](https://scriptkit.com/api/new?name=win32-run-script&url=https://gist.githubusercontent.com/Ambushfall/354c586a93af7cc1d6931ac8ef5c954a/raw/c7897caaec29152ec3aa8527eeaf4106a70fd0a7/win32-run-script.ts\")\r\n\r\n```js\r\n// Name: Run .bat/.ps1/.sh\r\n// Description: Process Output to Kit via stream\r\n\r\nimport '@johnlindquist/kit'\r\n\r\n// @ts-expect-error\r\nimport { backToMainShortcut, highlightJavaScript } from '@johnlindquist/kit'\r\n\r\n// --- Create a shell script to run -----------------\r\n// `tmpPath` will store the file here:\r\n// ~/.kenv/tmp/process-shell-script-output/example.*\r\n\r\n// Note: linux shell will only work with WSL or you can provide the Args for ps1 using the .sh extension if you have gitbash\r\n\r\nconst fileName = 'example'\r\n\r\nconst selectedLang = {\r\n  name: '',\r\n  args: '',\r\n  ext: '',\r\n  echo: '',\r\n\r\n  set setVal (keyValueList: string[]) {\r\n    this[keyValueList[0]] = keyValueList[1]\r\n  }\r\n}\r\n\r\nconst objGen = (_lang: string, _ext: string, _args?: string) => {\r\n  _args = _args ? _args : ''\r\n  return {\r\n    name: _lang,\r\n    description: `Run Script using ${_lang}`,\r\n    value: _lang,\r\n    id: _ext,\r\n    arguments: _args,\r\n    preview: () => highlightJavaScript(tmpPath(`${fileName}.${_ext}`))\r\n  }\r\n}\r\n\r\nconst LangOptions = [\r\n  objGen(\r\n    'PowerShell',\r\n    'ps1',\r\n    'powershell -NoProfile -NonInteractive –ExecutionPolicy Bypass -File '\r\n  ),\r\n  objGen('Batch', 'bat'),\r\n  objGen('Bash', 'sh')\r\n]\r\n\r\nconst promptEditor = ['yes', 'no']\r\n\r\nconst selectedValue = await arg('Use editor?', promptEditor)\r\n\r\nconst useEditor = selectedValue === 'yes' ? true : false\r\n\r\n// define select options\r\n\r\nawait arg(\r\n  {\r\n    placeholder: 'Select Scripting Language...',\r\n    enter: 'Select',\r\n    shortcuts: [backToMainShortcut],\r\n    onChoiceFocus: async (input, { focused }) => {\r\n      selectedLang.setVal = ['args', focused['arguments']]\r\n      selectedLang.setVal = ['ext', focused.id]\r\n      selectedLang.setVal = ['name', focused.name]\r\n      selectedLang.setVal = [\r\n        'echo',\r\n        selectedLang.ext == 'bat' ? '@echo off' : ''\r\n      ]\r\n    }\r\n  },\r\n  LangOptions\r\n)\r\n\r\nconst shellScriptPath = kenvTmpPath(`${fileName}.${selectedLang.ext}`)\r\n\r\nconst editorConfig = {\r\n  hint: `Write code for ${selectedLang.ext} file.`,\r\n  description: 'Save to Run',\r\n  onInputSubmit: async (input: any) => {\r\n    selectedLang.ext == 'sh'\r\n      ? await submit(`${input}\r\n  exit`)\r\n      : await submit(input)\r\n  }\r\n}\r\n\r\n// Using ping to simulate waiting for a long process and because it's natively supported across PS and Bat files\r\n// Note: If you use a code that would natively not run in bat like \"ls\" it will\r\nlet scriptContents = useEditor\r\n  ? await editor(editorConfig)\r\n  : `${selectedLang.echo}\r\necho \"hello\"\r\necho \"Done\"\r\n${selectedLang.ext == 'sh' ? 'exit' : ''}\r\n`\r\n\r\nawait writeFile(shellScriptPath, scriptContents)\r\n\r\n// Just a wrapper to highlight with code in PS style\r\nconst codeWrapper = (string: string, extension: any) => `\r\n\\`\\`\\`${extension}\r\n${string}\r\n\\`\\`\\`\r\n`\r\nlet output = ``\r\n\r\n// This is used to avoid kit window closing on process exit\r\nlet divPromise = div()\r\n\r\nconst outHandler = async (out: string) => {\r\n  output += `${out}\\n`\r\n  setDiv(await highlight(`${codeWrapper(output, selectedLang.ext)}`))\r\n}\r\n\r\n// Note: We have to use this janky way of executing PS as it would launch in Notepad or fail entirely.\r\nconst execArgs =\r\n  selectedLang.ext == 'sh'\r\n    ? `cd ${tmpPath()} && bash ${fileName}.sh`\r\n    : `${selectedLang.args}${shellScriptPath}`\r\n\r\n// inspect(execArgs)\r\nlet { stdout } = execLog(execArgs, outHandler)\r\n\r\nsetAlwaysOnTop(true)\r\nsetIgnoreBlur(true)\r\n\r\nawait divPromise\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-04-03T23:04:18Z"},{"name":"Search on Youtube","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1453","url":"https://gist.githubusercontent.com/RicardoBassete/6d9e99ed325ed4d6b2d66214bd7b79d3/raw/434b8edf81fa10305b04f87ad9f9a6b1d6b51cd8/search-on-youtube.ts","title":"Search on Youtube","command":"search-on-youtube","content":"\r\n[Open search-on-youtube in Script Kit](https://scriptkit.com/api/new?name=search-on-youtube&url=https://gist.githubusercontent.com/RicardoBassete/6d9e99ed325ed4d6b2d66214bd7b79d3/raw/434b8edf81fa10305b04f87ad9f9a6b1d6b51cd8/search-on-youtube.ts\")\r\n\r\n```js\r\n// Name: Search on Youtube\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst keyword = await arg('Search Youtube...')\r\nconst searchURL = `https://www.youtube.com/results?search_query=${keyword.toLowerCase().trim().replaceAll(' ', '+')}`\r\n\r\nopen(searchURL)\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-03-21T13:27:00Z"},{"name":"Search Game in Steam Charts","description":"","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1451","url":"https://gist.githubusercontent.com/RicardoBassete/b8b7fccb99809eb75b86618304890dd2/raw/471f34aee8f664bae8948f7040c4abd79476154f/steam-charts.ts","title":"Search Game in Steam Charts","command":"search-game-in-steam-charts","content":"\r\n[Open steam-charts in Script Kit](https://scriptkit.com/api/new?name=steam-charts&url=https://gist.githubusercontent.com/RicardoBassete/b8b7fccb99809eb75b86618304890dd2/raw/471f34aee8f664bae8948f7040c4abd79476154f/steam-charts.ts\")\r\n\r\n```js\r\n// Name: Search Game in Steam Charts\r\n// Description: Search Game in https://steamcharts.com/\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport cheerio from 'cheerio'\r\nimport axios from 'axios'\r\nimport { Choice } from \"@johnlindquist/kit\"\r\n\r\ninterface Game {\r\n  name: string\r\n  link: string\r\n  img: string\r\n  currentPlayers: string \r\n  monthAvg: string \r\n  monthGain: string \r\n  monthGainPercent: string \r\n}\r\n\r\nasync function searchGames(keyword: string) {\r\n  const baseURL = 'https://steamcharts.com'\r\n  const searchURL = `${baseURL}/search/?q=${keyword.toLowerCase().replaceAll(' ', '+')}`\r\n  const { data } = await axios.get(searchURL)\r\n  const $ = cheerio.load(data)\r\n\r\n  const result: Game[] = $('tr').get().map(el => {\r\n    const tr = $(el)\r\n    const imgEl = tr.find('td').get()[0]\r\n    const nameEl = tr.find('td').get()[1]\r\n    const currentPlayersEl = tr.find('td').get()[2]\r\n    const monthAvgEl = tr.find('td').get()[3]\r\n    const monthGainEl = tr.find('td').get()[4]\r\n    const monthGainPercentEl = tr.find('td').get()[5]\r\n\r\n    return {\r\n      img: `${baseURL}${$(imgEl).find('img').attr('src')}`,\r\n      name: $(nameEl).text().replaceAll('\\t', '').replaceAll('\\n', ''),\r\n      link: `${baseURL}${$(nameEl).find('a').attr('href')}`,\r\n      currentPlayers: $(currentPlayersEl).text(),\r\n      monthAvg: $(monthAvgEl).text(),\r\n      monthGain: $(monthGainEl).text(),\r\n      monthGainPercent: $(monthGainPercentEl).text()\r\n    }\r\n  })\r\n\r\n  const games = result.filter(game => game.name !== '')\r\n  return games\r\n}\r\n\r\nfunction buildPreview(game: Game) {\r\n\r\n  const getColor = (text: string) => {\r\n    if(text.startsWith('-')) {\r\n      return 'text-red-500'\r\n    } else if (text.startsWith('+')) {\r\n      return 'text-green-500'\r\n    } else {\r\n       return ''\r\n    }\r\n  }\r\n\r\n  return `\r\n    <div class=\"p-5 prose prose-sm\">\r\n      <img class=\"w-full rounded\" src=\"${game.img}\"/>\r\n      <h2>${game.name}</h2>\r\n      <div class=\"w-full h-10 flex flex-row items-center font-bold justify-start uppercase\">\r\n        Current Players: ${game.currentPlayers}\r\n      </div>\r\n      <div class=\"w-full h-10 flex flex-row items-center font-bold justify-start uppercase\">\r\n        30-Day Avg.: ${game.monthAvg}\r\n      </div>\r\n      <div class=\"w-full h-10 flex flex-row items-center font-bold justify-start uppercase ${getColor(game.monthGain)}\">\r\n        30-Day Gain: ${game.monthGain}\r\n      </div>\r\n      <div class=\"w-full h-10 flex flex-row items-center font-bold justify-start uppercase ${getColor(game.monthGainPercent)}\">\r\n        30-Day % Gain: ${game.monthGainPercent}\r\n      </div>\r\n    </div>\r\n  `\r\n}\r\n\r\nfunction buildResult(game: Game): Choice {\r\n  return {\r\n    name: game.name,\r\n    value: game.link,\r\n    img: game.img,\r\n    preview: buildPreview(game)\r\n  }\r\n}\r\n\r\nconst keyword = await arg('Keyword')\r\nconst games = await searchGames(keyword)\r\n\r\nconst game = await arg('Select game', games.map(game => buildResult(game)))\r\nopen(game)\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-03-14T14:12:05Z"},{"avatar":"https://avatars.githubusercontent.com/u/36151712?u=d3e3f16a8bdefff55ee199760f3e6b5b9c8025e1&v=4","user":"greener-hayden","author":"hayden","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1449","url":"","title":"HotkeylessAHK Search Interface","command":"hotkeylessahk-search-interface","content":"This plugin introduces a front-end interface for [HotkeylessAHK ](https://github.com/sebinside/HotkeylessAHK), providing a user-friendly way to interact with the available commands. This plugin is compatible with both the original AHK 1.1 supported version and the stable AHK 2.0 fork currently under review.\r\n\r\nKey features:\r\n- Fetches the list of commands from the server by making a GET request to `http://localhost:42800/list`\r\n- Presents the commands in a searchable and selectable format\r\n- Allows users to easily search for and select the desired command\r\n- Sends the selected command to the server by making a GET request to `http://localhost:42800/send/${command}`\r\n- Enables the server to execute the corresponding action associated with the command\r\n\r\nThe plugin provides a seamless integration between the front-end interface and the back-end server, enhancing the user experience and making it more convenient to interact with the HotkeylessAHK platform.\r\n\r\nTo test the plugin follow the instructions on how to set up [HotkeylessAHK](https://github.com/sebinside/HotkeylessAHK)\r\n\r\n![preview](https://github.com/johnlindquist/kit/assets/36151712/1344b759-a623-4370-bfd5-18a49a3e0373)\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-03-10T22:43:15Z"},{"name":"Get summary about something from wikipedia","description":"","keycode":"wi","avatar":"https://avatars.githubusercontent.com/u/37043239?u=3c9eb3fd184eef2fb6aee97af163640c8e75dbf9&v=4","user":"macro21KGB","author":"Mario De Luca","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1447","url":"https://gist.githubusercontent.com/macro21KGB/d0ec0d9fa9b30e4fa0069c8930586e8b/raw/5f143014b73c505d0887f8b1e2355bd85dfc0377/get-summary-about-something.ts","title":"Get summary about something on wikipedia","command":"get-summary-about-something-on-wikipedia","content":"\r\n[Open get-summary-about-something in Script Kit](https://scriptkit.com/api/new?name=get-summary-about-something&url=https://gist.githubusercontent.com/macro21KGB/d0ec0d9fa9b30e4fa0069c8930586e8b/raw/5f143014b73c505d0887f8b1e2355bd85dfc0377/get-summary-about-something.ts\")\r\n\r\n```js\r\n// Name: Get summary about something from wikipedia\r\n// Description: Search something on wikipedia and get a summary about it\r\n// Keycode: wi\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nimport wiki from 'wikipedia';\r\n\r\n\r\n\r\nawait arg('What do you want to search for? (wikipedia)', async (input) => {\r\n    if (input.length < 3) {\r\n        return \"<p class='p-2 text-slate-500'>Search value must be at least 3 characters</p>\";\r\n    }\r\n    try {\r\n        const pageSummary = await wiki.summary(input);\r\n        if (pageSummary.extract == null || pageSummary.extract == \"\") {\r\n            return (md(`No summary found for ${input}`));\r\n        }\r\n        else {\r\n            return (md(pageSummary.extract));\r\n        }\r\n\r\n    } catch {\r\n        return (md(`No summary found for ${input}`));\r\n    }\r\n})\r\n\r\n\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-03-07T10:04:18Z"},{"name":"Private GitHub Script Manager","description":"","author":"Dan","avatar":"https://avatars.githubusercontent.com/u/8266776?v=4","user":"daniel-crouch","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1445","url":"","title":"Private GitHub Script Manager","command":"private-github-script-manager","content":"[Open Private GitHub Script Manager in Script Kit](https://scriptkit.com/api/new?name=private-github-script-manager&url=https://gist.githubusercontent.com/daniel-crouch/b076a032a8782aecc798c5731e37b1ba/raw/e7f4d44912f1dd3714998315633359bbf5d2c0e2/private-github-script-manager.js)\r\n\r\n```javascript\r\n// Name: Private GitHub Script Manager\r\n// Description: Allows you to find and install all the nice scripts your organisation have created\r\n// Author: Daniel Crouch\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst gitHubPAT = await env(\"PGSM_GITHUB_PAT\");\r\nconst gitHubOrg = await env(\"PGSM_GITHUB_ORG\");\r\nconst gitHubRepo = await env(\"PGSM_REPO_NAME\");\r\nconst branch =  await env(\"PGSM_BRANCH\");\r\nconst rawContentBaseUri = `https://raw.githubusercontent.com/${gitHubOrg}/${gitHubRepo}/${branch}`;\r\n\r\nconst apiCall = async (details) => {\r\n  const { url, httpMethod, body, headers, authType } = details;\r\n\r\n  return await get(url, {\r\n    method: httpMethod,\r\n    body,\r\n    headers: {\r\n      ...headers,\r\n      \"Accept-Encoding\": \"gzip, deflate, br\",\r\n      Authorization: `${authType} ${gitHubPAT}`,\r\n    },\r\n  })\r\n    .then((respData) => respData.data)\r\n    .catch((error) => {\r\n      console.error(\"Error:\", error);\r\n    });\r\n};\r\n\r\nconst rawFiles = {};\r\nconst getRawFile = async (fileName) => {\r\n  if (rawFiles[fileName]) {\r\n    return rawFiles[fileName];\r\n  }\r\n  const url = `${rawContentBaseUri}/${fileName}`;\r\n  const rawFileHeaders = {\r\n    Accept: \"application/vnd.github.v3.raw\",\r\n  };\r\n  rawFiles[fileName] = await apiCall({\r\n    url,\r\n    httpMethod,\r\n    headers: rawFileHeaders,\r\n    authType: \"Token\",\r\n  });\r\n  return rawFiles[fileName];\r\n};\r\n\r\nconst getValueFromComment = (comments, key) => {\r\n  const comment = comments.find((comment) => comment.includes(key));\r\n  if (!comment) return null;\r\n  return comment.match(new RegExp(`${key}: (.*)`))[1];\r\n}\r\n\r\nconst httpMethod = \"GET\";\r\n\r\nconst scriptsUrl = `https://api.github.com/repos/${gitHubOrg}/${gitHubRepo}/git/trees/${branch}?recursive=1`;\r\nconst rawScriptsHeaders = {\r\n  Accept: \"*/*\",\r\n};\r\nconst rawScriptsResponse = await apiCall({\r\n  url: scriptsUrl,\r\n  httpMethod,\r\n  headers: rawScriptsHeaders,\r\n  authType: \"Bearer\",\r\n});\r\n\r\nconst scriptFiles = rawScriptsResponse.tree\r\n  .filter(\r\n    (f) =>\r\n      f.path.indexOf(\"src/\") === 0 &&\r\n      f.path.indexOf(\".test.js\") === -1 &&\r\n      f.path.indexOf(\".md\") === -1\r\n  )\r\n  .map((f) => ({\r\n    path: f.path,\r\n    scriptName: f.path.replace(\"src/\", \"\"),\r\n  }));\r\n\r\nfor (const script of scriptFiles) {\r\n  const rawFile = await getRawFile(script.path);\r\n  const comments = rawFile.match(/\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/gm);\r\n  script.name = getValueFromComment(comments, \"Name\");\r\n  script.menu = getValueFromComment(comments, \"Menu\");\r\n  script.description = getValueFromComment(comments, \"Description\");\r\n  script.author = getValueFromComment(comments, \"Author\");\r\n}\r\n\r\nconst selectedScript = await arg(\r\n  `Select Private Script:`,\r\n  scriptFiles.map(({ name, menu, description, scriptName, path }) => {\r\n    return {\r\n      name: name || menu || scriptName,\r\n      description: description || scriptName,\r\n      value: { scriptName, path },\r\n      preview: async () => {\r\n        const displayName = name || menu || scriptName;\r\n        const displayDescription = description || scriptName;\r\n        return md(`# ${displayName}\r\n${displayDescription}`);\r\n      },\r\n    };\r\n  })\r\n);\r\n\r\nconst scriptFilePath = `${await env(\"KENV\")}/scripts/${\r\n  selectedScript.scriptName\r\n}`;\r\n\r\nconst selectedScriptRawFile = await getRawFile(selectedScript.path);\r\n\r\nawait outputFile(scriptFilePath, selectedScriptRawFile);\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-02-29T15:50:00Z"},{"name":"Search board games on BoardGameGeek","avatar":"https://avatars.githubusercontent.com/u/37043239?u=3c9eb3fd184eef2fb6aee97af163640c8e75dbf9&v=4","user":"macro21KGB","author":"Mario De Luca","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1444","url":"https://gist.githubusercontent.com/macro21KGB/74069bb77677fa025235e62e92610165/raw/67292fa146c3514320719a8a075bc34048282a17/search-board-games-on-boardgamegeek.ts","title":"Search Boardgames on BoardGameGeek","command":"search-boardgames-on-boardgamegeek","content":"\r\n[Open Search Boardgames on BoardGameGeek in Script Kit](https://scriptkit.com/api/new?name=search-board-games-on-boardgamegeek&url=https://gist.githubusercontent.com/macro21KGB/74069bb77677fa025235e62e92610165/raw/67292fa146c3514320719a8a075bc34048282a17/search-board-games-on-boardgamegeek.ts\")\r\n\r\n```js\r\n// Name: Search board games on BoardGameGeek\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { parseStringPromise } from \"xml2js\"\r\n\r\nconst BASE_URL = \"https://boardgamegeek.com\"\r\n\r\ntype GameInfo = {\r\n    href: string;\r\n    id: string;\r\n    name: string;\r\n    nameid: string;\r\n    objectid: string;\r\n    objecttype: string;\r\n    ordtitle: string;\r\n    rep_imageid: number;\r\n    sortindex: string;\r\n    type: string;\r\n    yearpublished: number;\r\n};\r\n// \r\n\r\n\r\nconst getBoardGames = async (query: string): Promise<GameInfo[]> => {\r\n    if (!query) return [];\r\n\r\n    const xmlString = (await get<string>(`${BASE_URL}/xmlapi2/search?query=${encodeURIComponent(query)}&type=boardgame`)).data\r\n\r\n    const result = await parseStringPromise(xmlString, { trim: true }).catch(async error => {\r\n        await div(`Error parsing XML: ${error.message}`, \"text-red-500\")\r\n    })\r\n\r\n    if (!result) return [];\r\n\r\n    const games = result['items']['item'] || [];\r\n\r\n    const convertedGames = games.map(convertToGameInfo);\r\n    return convertedGames;\r\n};\r\n\r\nconst convertToGameInfo = (item: any) => {\r\n\r\n\r\n    try {\r\n        return {\r\n            id: item.$.id,\r\n            name: item.name[0].$.value,\r\n            yearpublished: item.yearpublished[0].$.value\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            id: \"\",\r\n            name: \"Error parsing game\",\r\n            yearpublished: 0\r\n\r\n        }\r\n    }\r\n}\r\n\r\nconst selectedGame = await arg(\"Search for a board game on BoardGameGeek\", async (query) => {\r\n    const games = await getBoardGames(query);\r\n    return games.map(game => ({\r\n        name: game.name,\r\n        value: game\r\n    }));\r\n});\r\n\r\nconst getInfoOfGameWithId = async (id: string) => {\r\n    const result = await get<string>(`${BASE_URL}/xmlapi2/thing?id=${id}&videos=0&comments=0&marketplace=0&stats=1`).catch(async error => {\r\n        await div(`Error parsing XML: ${error.message}`, \"text-red-500\")\r\n    })\r\n\r\n    if (!result) return;\r\n\r\n    const parsed = await parseStringPromise(result.data, { trim: true }).catch(async error => {\r\n        await div(`Error parsing XML: ${error.message}`, \"text-red-500\")\r\n    })\r\n\r\n    const item = parsed.items.item[0]\r\n\r\n    const gameInfo = {\r\n        minPLayers: item.minplayers[0].$.value,\r\n        maxPlayers: item.maxplayers[0].$.value,\r\n        averageRating: item.statistics[0].ratings[0].average[0].$.value,\r\n        description: item.description[0],\r\n        image: item.image[0],\r\n    }\r\n\r\n    return gameInfo;\r\n}\r\n\r\nconst gameInfo = await getInfoOfGameWithId(selectedGame.id)\r\n\r\nawait div({\r\n    html: `\r\n        <h1>${selectedGame.name} <span class=\"italic text-slate-500\">(${selectedGame.yearpublished})</span></h1>\r\n        <p class=\"text-slate-600 italic\">${gameInfo.minPLayers} - ${gameInfo.maxPlayers} players</p> \r\n        <p>Average rating: <span class=\"font-bold\">${parseFloat(gameInfo.averageRating).toFixed(2)}</span></p>\r\n        <img class=\"w-20 absolute top-2 right-2\" src=\"${gameInfo.image}\" alt=\"${selectedGame.name}\">\r\n        <p class=\"italic\">${gameInfo.description}</p>\r\n`,\r\n    actions: [\r\n        {\r\n            name: \"Open on BoardGameGeek\",\r\n            onAction: () => {\r\n                open(`${BASE_URL}/boardgame/${selectedGame.id}`)\r\n            }\r\n\r\n        }\r\n    ]\r\n}, \"p-2\")\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-02-23T20:12:49Z"},{"name":"Hacker news browser","author":"Mario De Luca","avatar":"https://avatars.githubusercontent.com/u/37043239?u=3c9eb3fd184eef2fb6aee97af163640c8e75dbf9&v=4","user":"macro21KGB","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1443","url":"","title":"Hacker News Browser","command":"hacker-news-browser","content":"[Open Hacker News Browser in Script Kit](https://scriptkit.com/api/new?name=hacker-news-broweser&url=https://gist.github.com/macro21KGB/e11906f02318ff2c3977c31fac2eed02)\r\n\r\n```ts\r\n// Name: Hacker news browser\r\n// Author: Mario De Luca\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\ninterface Story {\r\n    by: string;\r\n    descendants: number;\r\n    id: number;\r\n    kids: number[];\r\n    score: number;\r\n    time: number;\r\n    title: string;\r\n    type: string;\r\n    url: string;\r\n}\r\n\r\nconst BASE_URL = \"https://hacker-news.firebaseio.com/v0/\"\r\n\r\nconst getTopStories = async (): Promise<number[]> => {\r\n    const response = await get<number[]>(`${BASE_URL}topstories.json`)\r\n    return response.data.slice(0, 100)\r\n}\r\n\r\nconst getStory = async (id: number): Promise<Story> => {\r\n    const response = await fetch(`${BASE_URL}item/${id}.json`)\r\n    return await response.json()\r\n}\r\n\r\nconst getStories = async (): Promise<Story[]> => {\r\n    div(\"Loading stories...\", \"p-2 text-center\")\r\n    const ids = await getTopStories()\r\n    const stories = await Promise.all(ids.map(getStory))\r\n    return stories\r\n}\r\n\r\n// sort by time and get the top 100 stories\r\nconst stories = (await getStories()).sort((a, b) => b.time - a.time)\r\n\r\nconst convertUnixToDate = (unix: number) => {\r\n    const locale = Intl.DateTimeFormat().resolvedOptions().locale;\r\n    return Intl.DateTimeFormat(locale, { dateStyle: \"short\", timeStyle: \"short\" }).format(new Date(unix * 1000))\r\n\r\n}\r\n\r\nconst chosenStory = await arg(`Choose a story (${stories.length} stories)`, () => {\r\n    return stories.map(story => {\r\n        return {\r\n            name: story.title,\r\n            description: `by ${story.by} - ${story.url} (${convertUnixToDate(story.time)})`,\r\n            value: story\r\n        }\r\n    })\r\n\r\n})\r\n\r\nopen(chosenStory.url)\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-02-23T15:24:25Z"},{"name":"Empty Trash","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1442","url":"https://gist.githubusercontent.com/RicardoBassete/2528d31bff3eef0dc611f5d82de58bc7/raw/d1f1d8eda9a820207bb28289eb70e1fd7878f3fe/empty-trash.ts","title":"Empty Trash","command":"empty-trash","content":"\r\n[Open empty-trash in Script Kit](https://scriptkit.com/api/new?name=empty-trash&url=https://gist.githubusercontent.com/RicardoBassete/2528d31bff3eef0dc611f5d82de58bc7/raw/d1f1d8eda9a820207bb28289eb70e1fd7878f3fe/empty-trash.ts\")\r\n\r\n```js\r\n// Name: Empty Trash\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport emptyTrash from 'empty-trash'\r\n\r\nawait emptyTrash()\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-02-22T20:54:32Z"},{"name":"Cron Builder","description":"","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1441","url":"https://gist.githubusercontent.com/RicardoBassete/d0cd96f55dab5c2e2e08666e28b17204/raw/836eb77e86c3c5e656048c552dd0b05ea51ab735/cron-builder.ts","title":"Cron Builder","command":"cron-builder","content":"\r\n[Open cron-builder in Script Kit](https://scriptkit.com/api/new?name=cron-builder&url=https://gist.githubusercontent.com/RicardoBassete/d0cd96f55dab5c2e2e08666e28b17204/raw/836eb77e86c3c5e656048c552dd0b05ea51ab735/cron-builder.ts\")\r\n\r\n``` js\r\n// Name: Cron Builder\r\n// Description: Prompts user for desired intervals, creates a cron schedule based on user input, and describes it\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport cronstrue from 'cronstrue';\r\n\r\nconst commonValues = [\r\n  '------------------------------',\r\n  '* =\tany value',\r\n  ', =\tvalue list separator',\r\n  '- =\trange of values',\r\n  '/ =\tstep values',\r\n]\r\n\r\nconst minuteValues = [\r\n  \"Allowed Values = 0 - 59\",\r\n  ...commonValues,\r\n]\r\n\r\nconst hourValues = [\r\n  \"Allowed Values = 0 - 23\",\r\n  ...commonValues,\r\n]\r\n\r\nconst dayMonthValues = [\r\n  \"Allowed Values = 1 - 31\",\r\n  ...commonValues,\r\n]\r\n\r\nconst monthValues = [\r\n  \"Allowed Values = 1 - 12\",\r\n  ...commonValues,\r\n]\r\n\r\nconst dayWeekValues = [\r\n  \"Allowed Values = 0 - 6\",\r\n  '------------------------------',\r\n  \"0 = Sunday\",\r\n  \"1 = Monday\",\r\n  \"2 = Tuesday\",\r\n  \"3 = Wednesday\",\r\n  \"4 = Thursday\",\r\n  \"5 = Friday\",\r\n  \"6 = Saturday\",\r\n  ...commonValues\r\n]\r\n\r\nconst minute = await arg({\r\n  placeholder: 'Minute interval, default is *',\r\n  alwaysOnTop: true,\r\n  hint: minuteValues.join('\\n')\r\n}).then(input => input === '' ? '*' : input)\r\n\r\nconst hour = await arg({\r\n  placeholder: 'Hour interval, default is *',\r\n  alwaysOnTop: true,\r\n  hint: hourValues.join('\\n')\r\n}).then(input => input === '' ? '*' : input)\r\n\r\nconst dayMonth = await arg({\r\n  placeholder: 'Day of the month interval, default is *',\r\n  alwaysOnTop: true,\r\n  hint: dayMonthValues.join('\\n')\r\n}).then(input => input === '' ? '*' : input)\r\n\r\nconst month = await arg({\r\n  placeholder: 'Month interval, default is *',\r\n  alwaysOnTop: true,\r\n  hint: monthValues.join('\\n')\r\n}).then(input => input === '' ? '*' : input)\r\n\r\nconst dayWeek = await arg({\r\n  placeholder: 'Day of the week interval, default is *',\r\n  alwaysOnTop: true,\r\n  hint: dayWeekValues.join('\\n')\r\n}).then(input => input === '' ? '*' : input)\r\n\r\nconst result = `${minute} ${hour} ${dayMonth} ${month} ${dayWeek}`\r\n\r\nawait div({\r\n  alwaysOnTop: true,\r\n  enter: 'Press Enter to paste result',\r\n  html: `\r\n    <div class=\"p-5 prose prose-sm\">\r\n    <h1>${cronstrue.toString(result)}</h1>\r\n    <p>${result}</p>\r\n    </div>\r\n  `,\r\n  onSubmit: () => setSelectedText(result)\r\n})\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-02-22T16:49:42Z"},{"name":"Connect / Disconnect Bluetooth Devices","description":"","video":"https://media.schmedu.com/videos/connect-bluetooth.mp4","alert":"Make sure to have \"blueutil\" via brew installed","author":"Eddie","twitter":"schmedu_","linkedin":"https://www.linkedin.com/in/euffelmann/","website":"https://schmedu.com","avatar":"https://avatars.githubusercontent.com/u/8198764?u=8159fd937f0836c330f0aed6c4d518c48461072e&v=4","user":"Schmedu","discussion":"https://github.com/johnlindquist/kit/discussions/1440","url":"https://gist.githubusercontent.com/Schmedu/a65b0b565199cbdf6f795d2aa2e5b3f7/raw/f2fc7b1562d440d76e9e48c019767a2739207481/connect-bluetooth-devices.ts","title":"Connect & Disconnect Bluetooth Devices (via `blueutil`) 📶","command":"connect-and-disconnect-bluetooth-devices-via-blueutil","content":"After buying new bluetooth headphones I got annoyed with manually connecting and disconnecting them with the mouse, so I sat down and created this little script here.\r\n\r\nIt lists all your paired devices and toggles the connectivity status for the selected device.\r\nEnjoy!\r\n\r\n⚠️ You should have `blueutils` installed via `brew`. Simply run `brew install blueutil`. The script will recognize whether you have it installed and asks if you want to run the command in the terminal\r\n\r\n[Open connect-bluetooth-devices in Script Kit](https://scriptkit.com/api/new?name=connect-bluetooth-devices&url=https://gist.githubusercontent.com/Schmedu/a65b0b565199cbdf6f795d2aa2e5b3f7/raw/f2fc7b1562d440d76e9e48c019767a2739207481/connect-bluetooth-devices.ts\")\r\n\r\n```js\r\n// Name: Connect / Disconnect Bluetooth Devices\r\n// Description: Toggles a bluetooth device connection\r\n// Video: https://media.schmedu.com/videos/connect-bluetooth.mp4\r\n// Alert: Make sure to have \"blueutil\" via brew installed\r\n// Author: Eduard Uffelmann\r\n// Twitter: @schmedu_\r\n// Linkedin: https://www.linkedin.com/in/euffelmann/\r\n// Website: https://schmedu.com\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport fs from \"fs\";\r\n\r\nconst BLUEUTIL_PATH = \"/opt/homebrew/bin/blueutil\";\r\n\r\nif (!fs.existsSync(BLUEUTIL_PATH)) {\r\n    let installBlueutil = await arg(\r\n        {\r\n            placeholder: \"Please install blueutil\",\r\n        },\r\n        [\r\n            {\r\n                name: \"Install with brew\",\r\n                description:\r\n                    \"Assumes you have brew installed. This will run `brew install blueutil` in your terminal.\",\r\n                value: true,\r\n            },\r\n            {\r\n                name: \"Cancel\",\r\n                value: false,\r\n            },\r\n        ]\r\n    );\r\n    if (installBlueutil) {\r\n        await terminal(`brew install blueutil`);\r\n    }\r\n    notify(\"Rerurn the script after installing blueutil\");\r\n    exit();\r\n}\r\n\r\nfunction parseBluetoothDevices(\r\n    output: string\r\n): { address: string; name: string; connected: boolean }[] {\r\n    const devices: { address: string; name: string; connected: boolean }[] = [];\r\n\r\n    const lines = output.split(\"\\n\");\r\n    for (const line of lines) {\r\n        const addressMatches = line.match(/address: ([\\w-]+),/);\r\n        const connectedMatches = line.match(/(, connected|not connected)/);\r\n        const nameMatches = line.match(/name: \"(.*?)\"/);\r\n\r\n        if (addressMatches && connectedMatches && nameMatches) {\r\n            const address = addressMatches[1];\r\n            const connected = connectedMatches[0].trim() === \", connected\";\r\n            const name = nameMatches[1];\r\n\r\n            devices.push({ address, name, connected });\r\n        }\r\n    }\r\n    return devices;\r\n}\r\n\r\nlet { stdout } = await exec(`${BLUEUTIL_PATH} --paired`);\r\nlet devices = parseBluetoothDevices(stdout);\r\n\r\nlet device = await arg(\r\n    {\r\n        placeholder: \"Device\",\r\n        shortcuts: [],\r\n    },\r\n    devices.map((d) => {\r\n        return {\r\n            name: d.name,\r\n            description: d.connected ? \"Connected\" : \"Not connected\",\r\n            value: d,\r\n        };\r\n    })\r\n);\r\n\r\nif (device.connected) {\r\n    console.log(`Disconnecting ${device.name}`);\r\n    await exec(`${BLUEUTIL_PATH} --disconnect \"${device.address}\"`);\r\n} else {\r\n    console.log(`Connecting ${device.name}`);\r\n    await exec(`${BLUEUTIL_PATH} --connect \"${device.address}\"`);\r\n}\r\nnotify(`Toggled bluetooth device connection for ${device.name}`);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-02-16T16:07:38Z"},{"avatar":"https://avatars.githubusercontent.com/u/70103896?u=19768da42575fd954e0c8259d2357e9e743b3a69&v=4","user":"0PandaDEV","author":"PandaDEV","twitter":"PandaDEV_","discussion":"https://github.com/johnlindquist/kit/discussions/1438","url":"https://gist.githubusercontent.com/0PandaDEV/218de4a0d4c956f684a0b24a979b7ffb/raw/2fb0af5f7d1081749e987a9ab2969c5fd76cff9a/transfer.sh-uploader.ts","title":"Transfer.sh Uploader","command":"transfersh-uploader","content":"I made a script to quickly upload a file to transfer.sh, which is a file hoster that allows up to 10 GB and is controlled over the terminal with `curl` normally. The URL is copied to your clipboard automatically after upload has finished.\r\n\r\n[Code/Gist](https://gist.githubusercontent.com/0PandaDEV/218de4a0d4c956f684a0b24a979b7ffb/raw/2fb0af5f7d1081749e987a9ab2969c5fd76cff9a/transfer.sh-uploader.ts)\r\n\r\n[Direct Installation link](https://scriptkit.com/api/new?name=transfer-sh-uploader&url=https://gist.githubusercontent.com/0PandaDEV/218de4a0d4c956f684a0b24a979b7ffb/raw/2fb0af5f7d1081749e987a9ab2969c5fd76cff9a/transfer.sh-uploader.ts)\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-02-13T20:36:40Z"},{"name":"Clear Powershell History","description":"","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1436","url":"","title":"Clear Powershell History","command":"clear-powershell-history","content":"\r\n[Clear Powershell History](https://scriptkit.com/api/new?name=clear-powershell-history&url=https://gist.githubusercontent.com/RicardoBassete/a74fd71e3b8c2151ab403ea4cb8da68b/raw/90a44f844927d6c9ca4dc9ae0fada72c4cc5a743/clear-powershell-history.ts)\r\n\r\n```javascript\r\n// Name: Clear Powershell History\r\n// Description: Clear powershell history file on windows\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst filePath = home('AppData', 'Roaming', 'Microsoft', 'Windows', 'PowerShell', 'PSReadline', 'ConsoleHost_history.txt')\r\n\r\nwriteFile(filePath, '')\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-02-08T11:39:06Z"},{"name":"Chmod Calculator","description":"","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1434","url":"","title":"Chmod Calculator","command":"chmod-calculator","content":"\r\n[Chmod Calculator](https://scriptkit.com/api/new?name=chmod-calculator&url=https://gist.githubusercontent.com/RicardoBassete/93c2aa363da0759d0336c5ccbb4e41dd/raw/cef03f6a9da3b66af31bebbd869386472daa77db/chmod-calculator.ts)\r\n\r\n```js\r\n// Name: Chmod Calculator\r\n// Description: Asks the user what permissions to grant to a file/folder and creates a chmod command with those permissions\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst permissions = ['read', 'write', 'execute']\r\n\r\nfunction getValue(permissions: string[]) {\r\n  const r = permissions.includes('read') ? 4 : 0\r\n  const w = permissions.includes('write') ? 2 : 0\r\n  const x = permissions.includes('execute') ? 1 : 0\r\n  return r+w+x\r\n}\r\n\r\nconst ownerPermissions: string[] = await select({\r\n  placeholder: 'Owner permissions',\r\n  alwaysOnTop: true,\r\n  strict: true,\r\n}, permissions)\r\n\r\nconst groupPermissions: string[] = await select({\r\n  placeholder: 'Group permissions',\r\n  alwaysOnTop: true,\r\n  strict: true,\r\n}, permissions)\r\n\r\nconst publicPermissions: string[] = await select({\r\n  placeholder: 'Public permissions',\r\n  alwaysOnTop: true,\r\n  strict: true,\r\n}, permissions)\r\n\r\nconst command = `chmod ${getValue(ownerPermissions)}${getValue(groupPermissions)}${getValue(publicPermissions)}`\r\n\r\nsetSelectedText(command)\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-02-03T13:05:46Z"},{"name":"⌛ Presentation Timer","avatar":"https://avatars.githubusercontent.com/u/994384?v=4","user":"ryan-nauman","author":"Ryan Nauman","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1433","url":"","title":"Presentation Timer for osx","command":"presentation-timer-for-osx","content":"Injects a countdown into an active webpage. Supports any webpage as well as google slideshow.\r\n\r\n[Open presentation-timer in Script Kit](https://scriptkit.com/api/new?name=presentation-timer&url=https://gist.githubusercontent.com/ryan-nauman/4782305497131e163492dfef7ab8ee89/raw/f209013265b6b869249fb2a4bd416832c1b0bc77/presentation-timer.ts%22)\r\n\r\n<img width=\"1136\" alt=\"image\" src=\"https://github.com/johnlindquist/kit/assets/994384/733d1991-3417-4247-b8d8-43dc84928674\">\r\n<img width=\"1136\" alt=\"image\" src=\"https://github.com/johnlindquist/kit/assets/994384/6acd75f8-15bd-477d-a456-0dea277c3e84\">\r\n<img width=\"1092\" alt=\"image\" src=\"https://github.com/johnlindquist/kit/assets/994384/d728cea3-2853-4c39-ba2c-e08a7deabf29\">\r\n\r\n```typescript\r\n// Name: ⌛ Presentation Timer\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nimport parse from 'parse-duration';\r\n\r\nlet timer = await arg(\r\n  'Enter duration for timer (e.g. 3 [minutes], 90s, 15m30s)',\r\n);\r\nif (/^\\d+$/.test(timer)) {\r\n  timer += 'm';\r\n}\r\n\r\nlet parsedMs = parse(timer);\r\nlet COUNTDOWN_ID = 'the-final-countdown';\r\n\r\nlet js = `\r\n(() => {\r\n  let countdownMs = ${parsedMs} + 2000; // 2000ms buffer for script to start\r\n  let iframeElement = document.querySelector('iframe.punch-present-iframe');\r\n  let existingCountdown = document.getElementById('${COUNTDOWN_ID}');\r\n\r\n  if (existingCountdown) {\r\n    existingCountdown.parentNode.removeChild(existingCountdown);\r\n  }\r\n\r\n  if (iframeElement) {\r\n    let existingCountdownInIframe = iframeElement.contentDocument.getElementById('${COUNTDOWN_ID}');\r\n    if (existingCountdownInIframe) {\r\n      existingCountdownInIframe.parentNode.removeChild(existingCountdownInIframe);\r\n    }\r\n  }\r\n\r\n  let countdownElement = document.createElement('div');\r\n  countdownElement.id = '${COUNTDOWN_ID}';\r\n\r\n  if (iframeElement) {\r\n    iframeElement.contentDocument.body.appendChild(countdownElement);\r\n  } else {\r\n    document.body.appendChild(countdownElement);\r\n  }\r\n\r\n  countdownElement.style.fontSize = '2em';\r\n  countdownElement.style.fontFamily = 'monospace';\r\n  countdownElement.style.color = 'white';\r\n  countdownElement.style.textShadow = '1px 1px 1px black';\r\n  countdownElement.style.position = 'absolute';\r\n  countdownElement.style.top = '0';\r\n  countdownElement.style.right = '0';\r\n  countdownElement.style.padding = '10px';\r\n  countdownElement.style.zIndex = '999999999';\r\n\r\n  // Set the date we're counting down to\r\n  let countDownDate = new Date().getTime() + countdownMs;\r\n\r\n  if (countdownMs > 0) {\r\n    let countdownInterval = setInterval(function () {\r\n      let now = new Date().getTime();\r\n      let distance = countDownDate - now;\r\n      let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n      let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n      let seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n      if (distance > 0) {\r\n        if (distance <= 60000) {\r\n          // If below 1 minute, change text to red\r\n          countdownElement.style.color = 'red';\r\n        }\r\n\r\n        let countdownText = '';\r\n        if (hours > 0) {\r\n          countdownText += (hours < 10 ? '0' : '') + hours + ':';\r\n        }\r\n\r\n        countdownText += (minutes < 10 ? '0' : '') + minutes + ':'\r\n                      + (seconds < 10 ? '0' : '') + seconds;\r\n\r\n        countdownElement.textContent = countdownText;\r\n      } else {\r\n        clearInterval(countdownInterval);\r\n        countdownElement.textContent = 'TIME IS UP!';\r\n      }\r\n    }, 1000);\r\n  }\r\n})();\r\n`;\r\n\r\nawait applescript(`\r\ntell application \"Google Chrome\" to tell window 1\r\n\tget execute active tab javascript \"\r\n\r\n${js}\r\n\r\n\"\r\nend tell\r\n`);\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-02-02T13:53:07Z"},{"name":"Clear Downloads Folder","description":"","author":"Ricardo Bassete","avatar":"https://avatars.githubusercontent.com/u/30296977?u=ea4af50555c544062d7ad624196f35c1dd6936a3&v=4","user":"RicardoBassete","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1432","url":"","title":"Clear Downloads Folder","command":"clear-downloads-folder","content":"\r\n[Clear Downloads Folder](https://scriptkit.com/api/new?name=clear-downloads-folder&url=https://gist.githubusercontent.com/RicardoBassete/e5205e620a594cd5d75f7043af924d76/raw/a96a5c30477e0815cc589aafeac82b104c336a12/clear-downloads-folder.ts)\r\n\r\n``` ts\r\n// Name: Clear Downloads Folder\r\n// Description: Lists files and folders within your downloads folder and asks which items you want to remove\r\n// Author: Ricardo Gonçalves Bassete\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst downloadsFolder = home('Downloads')\r\n\r\nconst items = await readdir(downloadsFolder)\r\n\r\nconst itemsToRemove: string[] = await select({\r\n  placeholder: 'Select the items you want to remove',\r\n  alwaysOnTop: true,\r\n  strict: true,\r\n}, items)\r\n\r\nconst wishToRemove = await arg({\r\n  placeholder: 'This will remove all selected items, do you want to continue?',\r\n  choices: [\r\n    { name: 'Yes', value: true },\r\n    { name: 'No', value: false }\r\n  ],\r\n  strict: true\r\n})\r\n\r\nif(wishToRemove) {\r\n  itemsToRemove.forEach(item => {\r\n    const itemPath = path.resolve(downloadsFolder, item)\r\n    remove(itemPath)\r\n  })\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-02-01T21:46:07Z"},{"name":"Oil prices","description":"","author":"Alfredo de la Calle","github":"https://github.com/bytelovers","avatar":"https://avatars.githubusercontent.com/u/4060697?u=c2540f0cb9e5f2b18a2ac956682f4e4bdb752433&v=4","user":"bytelovers","twitter":"bytelovers","discussion":"https://github.com/johnlindquist/kit/discussions/1427","url":"","title":"Get all prices of oil stations by town in Spain","command":"get-all-prices-of-oil-stations-by-town-in-spain","content":"This is my first shared script :)\r\n\r\n[Open gas-prices in Script Kit](https://scriptkit.com/api/new?name=gas-prices&url=https://gist.githubusercontent.com/bytelovers/dd5c582d590026599c05ac04cfca2314/raw/06cbbe9eed62d0b91f87603a37016b34408c3582/gas-prices.js%22)\r\n\r\n![Screenshot 2024-01-17 at 17 33 30](https://github.com/johnlindquist/kit/assets/4060697/a493a2e3-31e3-4f91-934a-ddb088cc3808)\r\n\r\n```javascript\r\n// Name: Oil prices\r\n// Description: Prices of oil stations in Spain\r\n// Author: Alfredo de la Calle\r\n// Github: https://github.com/bytelovers\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nimport dayjs from \"dayjs\";\r\n\r\nconst baseUrl = \"https://sedeaplicaciones.minetur.gob.es\";\r\nconst basePath = `${baseUrl}/ServiciosRESTCarburantes/PreciosCarburantes`;\r\nconst listadosEndpoint = `${basePath}/Listados`;\r\nconst preciosEndpoint = `${basePath}/EstacionesTerrestresHist`;\r\n\r\nconst previewEESS = async (municipalities) => {\r\n  const EESSbyMunicipios = async (date = null, municipios) => {\r\n    const _data = [];\r\n\r\n    const prs = municipios.map(async (municipio) => {\r\n      try {\r\n        const { data } = await get(\r\n          `${preciosEndpoint}/FiltroMunicipio/${date}/${municipio}`\r\n        );\r\n\r\n        return data;\r\n      } catch (e) {\r\n        return { ListaEESSPrecio: [] };\r\n      }\r\n    });\r\n\r\n    await Promise.all(prs).then((results) =>\r\n      results.forEach((result) => {\r\n        _data.push(...result.ListaEESSPrecio);\r\n      })\r\n    );\r\n\r\n    return { ListaEESSPrecio: _data };\r\n  };\r\n\r\n  const stations = await EESSbyMunicipios(\r\n    dayjs().subtract(1, \"day\").format(\"DD-MM-YYYY\"),\r\n    municipalities\r\n  );\r\n\r\n  const results = stations.ListaEESSPrecio\r\n    .map((station) => {\r\n      const {\r\n        Rótulo: name,\r\n        Dirección: address,\r\n        \"Precio Gasolina 95\": gasolina95,\r\n        \"Precio Gasolina 98\": gasolina98,\r\n        \"Precio Gasoleo A\": gasoleoA,\r\n        \"Precio Gasoleo Premium\": gasoleoPremium,\r\n        \"Precio Gasoleo B\": gasoleoB,\r\n        \"Precio Gasolina 95 E5\": gasolina95E5,\r\n        \"Precio Gasolina 98 E5\": gasolina98E5,\r\n        \"Fecha Suministro\": fechaSuministro,\r\n      } = station;\r\n\r\n      return `|${name}|${address}|${gasolina95E5 ?? \"\"}|${gasolina98E5 ?? \"\"}|${\r\n        gasoleoA ?? \"\"\r\n      }|${gasoleoPremium ?? \"\"}|${gasoleoB ?? \"\"}|${fechaSuministro ?? \"\"}|`;\r\n    })\r\n    .join(\"\\n\");\r\n\r\n  return results;\r\n};\r\n\r\nlet provinceSelected = await arg({\r\n  placeholder: \"Select a province\",\r\n  choices: async () => {\r\n    const { data } = await get(`${listadosEndpoint}/Provincias`);\r\n    return data?.map((p) => ({ name: p.Provincia, value: p.IDPovincia }));\r\n  },\r\n});\r\n\r\nawait arg({\r\n  placeholder: \"Select a locality\",\r\n\r\n  choices: async () => {\r\n    const { data } = await get(\r\n      `${listadosEndpoint}/MunicipiosPorProvincia/${provinceSelected}`\r\n    );\r\n    return data?.map((p) => ({\r\n      name: p.Municipio,\r\n      value: p.IDMunicipio,\r\n      preview: async () => {\r\n        const options = await previewEESS([p.IDMunicipio]);\r\n        return md(`\r\n|Estación|Dirección|Precio Gasolina 95|Precio Gasolina 98|Precio Gasoleo A|Precio Gasoleo Premium|Precio Gasoleo B|Fecha Suministro|\r\n|---|---|---|---|---|---|---|---|\r\n${options}\r\n`);\r\n      },\r\n    }));\r\n  },\r\n});\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-01-17T16:29:52Z"},{"name":"Fix Spelling and Grammar","author":"Kevin Kipp","email":"kevin.kipp@gmail.com","twitter":null,"github":"https://github.com/third774","avatar":"https://avatars.githubusercontent.com/u/8732191?u=caaddd4af0ba14e7e5e0be0247f5ab5d583bf639&v=4","user":"third774","discussion":"https://github.com/johnlindquist/kit/discussions/1425","url":"https://gist.githubusercontent.com/third774/031ee03124495aed893c45d9f8b2c0fa/raw/03a6de3412718724a35c07530dceaa2e2bc8011e/fix-spelling-and-grammar.ts","title":"Fix Spelling and Grammar (using OpenAI)","command":"fix-spelling-and-grammar-using-openai","content":"\r\n[Open fix-spelling-and-grammar in Script Kit](https://scriptkit.com/api/new?name=fix-spelling-and-grammar&url=https://gist.githubusercontent.com/third774/031ee03124495aed893c45d9f8b2c0fa/raw/03a6de3412718724a35c07530dceaa2e2bc8011e/fix-spelling-and-grammar.ts\")\r\n\r\n```js\r\n// Name: Fix Spelling and Grammar\r\n// Author: Kevin Kipp\r\n// Email: kevin.kipp@gmail.com\r\n// Twitter: https://twitter.com/kevin_kipp\r\n// Github: https://github.com/third774\r\n\r\nimport '@johnlindquist/kit';\r\nimport OpenAI from 'openai';\r\n\r\nconst openai = new OpenAI({\r\n  apiKey: await env('OPENAI_API_KEY', {\r\n    secret: true,\r\n  }),\r\n});\r\n\r\nconst text = await getSelectedText();\r\n\r\nconst completion = await openai.chat.completions.create({\r\n  messages: [\r\n    {\r\n      role: 'user',\r\n      content: `You are an editor and you are tasked with fixing the spelling and grammar of the following text:\r\n---\r\nText to fix:\r\n${text}\r\n---\r\n\r\nThe corrected text is:`,\r\n    },\r\n  ],\r\n  model: 'gpt-3.5-turbo',\r\n  temperature: 0,\r\n});\r\n\r\nconst insertText = await editor(completion.choices[0].message.content);\r\n\r\nawait setSelectedText(insertText);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-01-16T06:49:57Z"},{"name":"mov to mp4","description":"","author":"Luis Arce","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/13188414?u=3e7a37a490085f46721b050746138b32d296162c&v=4","user":"Luis0Antonio","discussion":"https://github.com/johnlindquist/kit/discussions/1419","url":"","title":"Convert video .mov to .mp4","command":"convert-video-mov-to-mp4","content":"\r\n[Open mov-to-mp4 in Script Kit](https://scriptkit.com/api/new?name=mov-to-mp4&url=https://gist.githubusercontent.com/Luis0Antonio/9c78f14c684abc6b1370d3c2078c8ca6/raw/9ac43ccaa9842e2e83de7267e08d30bb8338293e/mov-to-mp4.js\")\r\n\r\n```js\r\n// Name: mov to mp4\r\n// Description: Drop one mov file and it will export it to mp4 in the same directory\r\n// Author: Luis Arce\r\n// Twitter: @LuisArceParedes\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet fileRef = await drop()\r\n\r\nconst targetExtension = \".mp4\";\r\nconst { path } = fileRef[0];\r\nconst pathWithOutExtension = path.split(\".\")[0];\r\n\r\nawait $`ffmpeg -i ${path} ${pathWithOutExtension}${targetExtension}`\r\n```\r\n\r\n# Prerequisites:\r\n1. Install [ffmpeg](https://ffmpeg.org/) to use the terminal to convert the file.\r\nYou can use brew: `brew install ffmpeg`\r\n2. Kit: Sync $PATH from Terminal to Kit.app\r\n\r\n\r\nExample using it:\r\n\r\nhttps://github.com/johnlindquist/kit/assets/13188414/0959108e-be58-4787-88be-ac8ab988f04f\r\n\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-01-06T01:20:10Z"},{"name":"Open Recent VS Code Project v2","gitHub":"@benschlegel","author":"Ben Schlegel","description":"","shortcut":"cmd shift o","avatar":"https://avatars.githubusercontent.com/u/31989404?u=4ba7bcfbff291ba4adb74a54a19a5844d343229b&v=4","user":"benschlegel","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1418","url":"https://gist.githubusercontent.com/benschlegel/0f060bdce4ebe208793d6eb8cfa3571f/raw/f61c9f33732c368b205e97cb8bf8488e7d83d9dd/open-recent-vs-code-project.ts","title":"Open Recent VS Code Project v2","command":"open-recent-vs-code-project-v2","content":"Open recent vscode project with support for `Remote Explorer` (SSH/WSL, etc) and `Virtual Desktop` (Remote Github project). Also displays projects in a more user friendly way (short labels for project names with full path below) and now has full windows support!\r\n\r\n[Open open-recent-vs-code-project in Script Kit](https://scriptkit.com/api/new?name=open-recent-vs-code-project&url=https://gist.githubusercontent.com/benschlegel/0f060bdce4ebe208793d6eb8cfa3571f/raw/f61c9f33732c368b205e97cb8bf8488e7d83d9dd/open-recent-vs-code-project.ts\")\r\n\r\nBased on the original project by @johnlindquist \r\n\r\nLooks something like this when run:\r\n\r\n![image](https://github.com/johnlindquist/kit/assets/31989404/7d94363c-7194-4f6a-868e-cc8ce430c0b5)\r\n\r\n(Also supports opening recent projects that are a single file, set `includeSingleFiles=true` to enable)\r\n\r\n```js\r\n// Name: Open Recent VS Code Project v2\r\n// GitHub: @benschlegel\r\n// Author: Ben Schlegel\r\n// Description: Open recent vscode project (with remote connection support)\r\n// Shortcode code\r\n// Shortcut: cmd shift o\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { Action } from \"@johnlindquist/kit\"\r\nimport { URL, fileURLToPath } from \"url\"\r\nimport * as path from 'path';\r\n\r\n/**\r\n * Wether to include projects that are a single file in recent projects (defaults to false)\r\n */\r\nconst includeSingleFiles = false\r\n\r\n// /Users/johnlindquist/Library/Application Support/Code/User/globalStorage/state.vscdb\r\nlet filename = home(\"Library\", \"Application Support\", \"Code\", \"User\", \"globalStorage\", \"state.vscdb\")\r\n// windows path\r\nif (isWin) filename = home(\"AppData\", \"Roaming\", \"Code\", \"User\", \"globalStorage\", \"state.vscdb\")\r\n// @ts-ignore\r\nlet { default: sqlite3 } = await import(\"sqlite3\")\r\nlet { open } = await import(\"sqlite\")\r\n\r\nconst db = await open({\r\n  filename,\r\n  driver: sqlite3.Database,\r\n})\r\n\r\nlet key = `history.recentlyOpenedPathsList`\r\nlet table = `ItemTable`\r\n\r\nlet result = await db.get(`SELECT * FROM ${table} WHERE key = '${key}'`)\r\nlet recentPaths = JSON.parse(result.value)\r\n\r\n// Collect all \"recent project\" data and parse it for display in kit (special cases for vscode-remote, virtual desktop and single files)\r\nlet recentFilePaths: Action[] = []\r\nfor (const entry of recentPaths.entries) {\r\n  // Check if entry is a folder\r\n  if (entry.folderUri) {\r\n    if (entry.folderUri.startsWith(\"file://\")) {\r\n      // Default case (recent project is a regular folder)\r\n      let path = fileURLToPath(new URL(entry.folderUri))\r\n      const label = getLabelFromPath(path)\r\n\r\n      if (path.includes(\":\\\\\")) {\r\n        path = getCapitalizedPath(path)\r\n      }\r\n\r\n      recentFilePaths.push({name: label ?? \"fallback\", description: path, value: path})\r\n    } else if ((entry.folderUri.startsWith(\"vscode-remote://\") || entry.folderUri.startsWith(\"vscode-vfs://\"))) {\r\n      // Project is a folder but on remote (ssh or github virtual desktop)\r\n      const label = entry.label ?? getLabelFromPath(entry.folderUri, true);\r\n      // vscode remote session expects to be launched like `code --folder-uri=vscode-remote://<path>` (same for vscode-vfs)\r\n      const value = `--folder-uri=${entry.folderUri}`\r\n      recentFilePaths.push({name: label, description: entry.folderUri, value: value})\r\n    }\r\n  } else {\r\n    // This branch only occurs if recent project is a single file instead of entire folder (ignored by default)\r\n    // To also add single files to recent projects, go to line 9 and change `includeSingleFiles` from false to true\r\n    if (includeSingleFiles) {\r\n      try {\r\n        const path = fileURLToPath(new URL(entry.fileUri))\r\n        const label = getLabelFromPath(path)\r\n        recentFilePaths.push({name: label, description: path, value: path})\r\n      } catch (error) {\r\n        // In case recent project is different non supported type\r\n        console.error(`Failed to parse ${entry.folderUri}. Error: ${error}`)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nlet recentPath = await arg(\"Open recent project\", recentFilePaths)\r\nhide()\r\nawait exec(`code ${recentPath}`)\r\n\r\nfunction getLabelFromPath(inPath: string, isRemote = false) {\r\n  const outPathBase = path.basename(inPath)\r\n  if (!isRemote) {\r\n    return outPathBase\r\n  } else {\r\n    const parts = inPath.split(\"%2B\");\r\n    const protocol = parts[0].split(\"://\")[1].replaceAll(\"-remote\", \"\").toUpperCase();\r\n    const host = parts[1].split(\"/\")[0];\r\n\r\n    return `${outPathBase} [${protocol}: ${host}]`\r\n  }\r\n}\r\n\r\nfunction getCapitalizedPath(path: string) {\r\n  const firstCharNew = path.charAt(0).toUpperCase();\r\n  const slicedPath = path.slice(1)\r\n  return firstCharNew + slicedPath;\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2024-01-03T15:47:22Z"},{"name":"Feedbin Unread","author":"Kevin Kipp","email":"kevin.kipp@gmail.com","twitter":null,"github":"https://github.com/third774","avatar":"https://avatars.githubusercontent.com/u/8732191?u=caaddd4af0ba14e7e5e0be0247f5ab5d583bf639&v=4","user":"third774","discussion":"https://github.com/johnlindquist/kit/discussions/1400","url":"https://gist.githubusercontent.com/third774/cc637739fb0ee73ba8c5ea115ce07cf3/raw/f3b7dff7e672eaaa4bd0d892de0200e84b5ac52e/feedbin-unread.ts","title":"Feedbin Unread","command":"feedbin-unread","content":"[Open feedbin-unread in Script Kit](https://scriptkit.com/api/new?name=feedbin-unread&url=https://gist.githubusercontent.com/third774/cc637739fb0ee73ba8c5ea115ce07cf3/raw/f3b7dff7e672eaaa4bd0d892de0200e84b5ac52e/feedbin-unread.ts\")\r\n\r\n[Feedbin](https://feedbin.com/) is an RSS reader with a [public REST API](https://github.com/feedbin/feedbin-api). This script grabs your unread articles and presents them for selection — selecting one will open it in your browser and mark it as read.\r\n\r\n```ts\r\n// Name: Feedbin Unread\r\n// Author: Kevin Kipp\r\n// Email: kevin.kipp@gmail.com\r\n// Twitter: https://twitter.com/kevin_kipp\r\n// Github: https://github.com/third774\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nconst feedbinUsername = await env('FEEDBIN_USERNAME');\r\nconst feedbinPassword = await env('FEEDBIN_PASSWORD', () =>\r\n  arg({\r\n    placeholder: 'Feedbin Password',\r\n    secret: true,\r\n  }),\r\n);\r\nconst headers = {\r\n  Authorization: `Basic ${btoa(`${feedbinUsername}:${feedbinPassword}`)}`,\r\n};\r\n\r\ntype Entries = EntriesItem[];\r\ninterface EntriesItem {\r\n  author: null;\r\n  content: string;\r\n  created_at: string;\r\n  extracted_content_url: string;\r\n  feed_id: number;\r\n  id: number;\r\n  published: string;\r\n  summary: string;\r\n  title: string;\r\n  url: string;\r\n}\r\n\r\nconst { data } = await get<Entries>(\r\n  `https://api.feedbin.com/v2/entries.json?read=false`,\r\n  { headers },\r\n);\r\n\r\nconst selection = await arg<EntriesItem>(\r\n  {\r\n    name: data.length > 0 ? 'Article Title' : 'No unread articles',\r\n    actions: [\r\n      {\r\n        name: 'Open',\r\n        onAction: async (_, state) => {\r\n          open(state.focused.value.url);\r\n          finishScript();\r\n        },\r\n        shortcut: 'o',\r\n      },\r\n      {\r\n        name: 'Mark as read',\r\n        onAction: async (_, state) => {\r\n          await post(\r\n            `https://api.feedbin.com/v2/unread_entries/delete.json`,\r\n            { unread_entries: [state.focused.value.id] },\r\n            { headers },\r\n          );\r\n        },\r\n        shortcut: 'm',\r\n      },\r\n    ],\r\n  },\r\n\r\n  data.map((item: any) => ({\r\n    name: item.title,\r\n    description: item.url,\r\n    value: item,\r\n  })),\r\n);\r\n\r\nawait open(selection.url);\r\nawait post(\r\n  `https://api.feedbin.com/v2/unread_entries/delete.json`,\r\n  { unread_entries: [selection.id] },\r\n  { headers },\r\n);\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-12-15T21:48:30Z"},{"name":"Flutter Release Builds","description":"","author":"Rohan","twitter":"rohanjsh","--use-defaults":"Use default values.","--no-flavor":"Build without flavors.","avatar":"https://avatars.githubusercontent.com/u/35066779?u=63cdc660661f24fdfdf810717c3cf1baa711a887&v=4","user":"rohanjsh","discussion":"https://github.com/johnlindquist/kit/discussions/1395","url":"","title":"Script to generate release builds for a Flutter Mobile App (Flavors Supported)","command":"script-to-generate-release-builds-for-a-flutter-mobile-app-flavors-supported","content":"```sh\r\n# Name: Flutter Release Builds\r\n# Description: Generate release builds for flutter app\r\n# Author: Rohan Joshi\r\n# Twitter: @rohanjsh\r\n\r\n#!/bin/bash\r\n\r\n#!  DEFAULTS\r\n#!  Change these to your own\r\n#!  PASS --use-defaults FLAG, TO USE THESE DEFAULTS\r\ndefault_num_flavors=2\r\ndefault_flavors=(\"dev\" \"lib/main_dev.dart\" \"prod\" \"lib/main_prod.dart\")\r\ndefault_build_types=(\"apk\" \"appbundle\" \"ipa\")\r\n\r\n#  DESCRIPTION\r\n# Automates Flutter project builds with flavor and type options.\r\n\r\n# Prerequisites:\r\n# - Flutter installed and configured.\r\n# - Bash shell environment.\r\n\r\n# Options:\r\n# --use-defaults: Use default values.\r\n# --no-flavor: Build without flavors.\r\n\r\n# Usage:\r\n# - Default: ./build_script.sh\r\n# - Custom: ./build_script.sh --use-defaults\r\n# - No Flavor: ./build_script.sh --no-flavor\r\n\r\n# How To Guide:\r\n# - Run the script and follow prompts for custom builds.\r\n#   - Number of flavors\r\n#   - Flavor name and entry point for each flavor\r\n#   - Build types to generate\r\n# - Script creates timestamped build directories.\r\n\r\n# Exit on any error, unbound variable, or error in a pipeline\r\nset -euo pipefail\r\n\r\n#! +--------------------------+\r\n#! |      GLOBAL VARIABLES    |\r\n#! +--------------------------+\r\n# Define variables to store states of both flags\r\nuse_defaults=false\r\nno_flavor=false\r\n# Define available flags\r\nvalid_flags=\"use-defaults,h,no-flavor\"\r\n\r\n# Get the current date and time\r\ncurrent_date_time=$(date \"+%Y-%m-%d_%H-%M-%S\")\r\n\r\n#+---------------------------------+\r\n#|     Function Declarations       |\r\n#+---------------------------------+\r\n#! Function to run flutter commands, ALTER COMMANDS AS NEEDED (project specific)\r\nrun_flutter_commands() {\r\n    echo \"🚀 Cleaning, fetching dependencies, and running build processes...\"\r\n    flutter clean\r\n    flutter pub get\r\n    dart pub get\r\n    #! Uncomment the following line if you are using build_runner\r\n    # dart run build_runner build --delete-conflicting-outputs\r\n}\r\n\r\n# Function to display an interactive menu for build types\r\nselect_build_types() {\r\n    if [[ $use_defaults == true ]]; then\r\n        build_types=(\"${default_build_types[@]}\")\r\n        return\r\n    fi\r\n\r\n    echo \"️  Select the build type(s) you want to generate:\"\r\n    echo \"  1. APK\"\r\n    echo \"  2. AAB (App Bundle)\"\r\n    echo \"  3. IPA\"\r\n\r\n    read -p \"Enter your choice (comma-separated numbers): \" build_type_choice\r\n\r\n    # Split the user input into an array of individual choices\r\n    IFS=',' read -r -a build_type_choices <<<\"$build_type_choice\"\r\n\r\n    build_types=()\r\n    # Loop through each choice and validate it\r\n    for choice in \"${build_type_choices[@]}\"; do\r\n        case \"$choice\" in\r\n        1) build_types+=(\"apk\") ;;\r\n        2) build_types+=(\"appbundle\") ;;\r\n        3) build_types+=(\"ipa\") ;;\r\n        *) echo \"Invalid choice: '$choice'. Ignoring.\" ;;\r\n        esac\r\n    done\r\n\r\n    # Check if any valid choices were selected\r\n    if [[ ${#build_types[@]} -eq 0 ]]; then\r\n        echo \"No valid build types selected. Exiting.\" && exit 1\r\n    fi\r\n}\r\n\r\n# Function to build and copy files\r\nbuild_and_copy_files() {\r\n    if [ \"$1\" == \"apk\" ]; then\r\n        flutter build $1 --flavor $2 -t $3 --split-per-abi\r\n    else\r\n        flutter build $1 --flavor $2 -t $3\r\n    fi\r\n\r\n    # Create a directory for the build\r\n    mkdir -p builds/$current_date_time/[$2-$1]\r\n\r\n    cp -r $4* builds/$current_date_time/[$2-$1]\r\n\r\n    echo \"✅ Build completed for $2 flavor and type $1\"\r\n}\r\n\r\n#function to call if no flavor is selected\r\nno_flavor_build(){\r\n    select_build_types\r\n    run_flutter_commands\r\n\r\n    # Directly run commands for each build type\r\n    for build_type in \"${build_types[@]}\"; do\r\n        case \"$build_type\" in\r\n        \"apk\")\r\n            flutter build apk --split-per-abi\r\n\r\n            # Create a directory for the build\r\n            mkdir -p builds/$current_date_time/[no-flavor-$build_type]\r\n\r\n            # Copy files for each build type\r\n            cp -r build/app/outputs/flutter-apk/* builds/$current_date_time/[no-flavor-$build_type]\r\n            ;;\r\n        \"appbundle\")\r\n            flutter build appbundle\r\n\r\n            # Create a directory for the build\r\n            mkdir -p builds/$current_date_time/[no-flavor-$build_type]\r\n\r\n            # Copy files over\r\n            cp -r build/app/outputs/bundle/* builds/$current_date_time/[no-flavor-$build_type]\r\n            ;;\r\n        \"ipa\")\r\n            flutter build ipa\r\n\r\n            # Create a directory for the build\r\n            mkdir -p builds/$current_date_time/[no-flavor-$build_type]\r\n\r\n            # Copy files over\r\n            cp -r build/ios/ipa/* builds/$current_date_time/[no-flavor-$build_type]\r\n            ;;\r\n        esac\r\n\r\n        # Create a directory for the build\r\n        mkdir -p builds/$current_date_time/[no-flavor-$build_type]\r\n\r\n        # Copy files for each build type\r\n        case \"$build_type\" in\r\n        \"apk\")\r\n            cp -r build/app/outputs/flutter-apk/* builds/$current_date_time/[no-flavor-$build_type]\r\n            ;;\r\n        \"appbundle\")\r\n            cp -r build/app/outputs/bundle/* builds/$current_date_time/[no-flavor-$build_type]\r\n            ;;\r\n        \"ipa\")\r\n            cp -r build/ios/ipa/* builds/$current_date_time/[no-flavor-$build_type]\r\n            ;;\r\n        esac\r\n\r\n    done\r\n\r\n    echo \"🎉 All builds completed successfully!, you can find all the builds in /builds folder\"\r\n\r\n    open builds/$current_date_time\r\n    exit 0\r\n}\r\n\r\n#+-------------------------+\r\n#|      Process flags      |\r\n#+-------------------------+\r\n# Process options using getopts\r\nwhile getopts \":h-:\" opt; do\r\n    case $opt in\r\n    -)\r\n        case $OPTARG in\r\n        use-defaults)\r\n            use_defaults=true\r\n            ;;\r\n        h)\r\n            echo \"Usage: $0 [--$valid_flags]\"\r\n            exit 0\r\n            ;;\r\n        no-flavor)\r\n            no_flavor=true\r\n            ;;\r\n        *)\r\n            echo \"Invalid option: --$OPTARG\" >&2\r\n            echo \"Available options: $valid_flags\" >&2\r\n            exit 1\r\n            ;;\r\n        esac\r\n        ;;\r\n    h)\r\n        echo \"Usage: $0 [--$valid_flags]\"\r\n        exit 0\r\n        ;;\r\n    \\?)\r\n        echo \"Invalid option: -$OPTARG\" >&2\r\n        echo \"Available options: $valid_flags\" >&2\r\n        exit 1\r\n        ;;\r\n    esac\r\ndone\r\n\r\n# Check if the no-flavor flag is set\r\nif [[ $no_flavor == true ]]; then\r\n    no_flavor_build\r\nfi\r\n\r\n#+-------------------------+\r\n#|      Get arguments      |\r\n#+-------------------------+\r\n# Check if the flag is set and take appropriate action\r\nif [[ $use_defaults == true ]]; then\r\n    num_flavors=$default_num_flavors\r\n    flavors=(\"${default_flavors[@]}\")\r\n    select_build_types\r\nelse\r\n    # if no-flavor, then skip this step\r\n    if [[ $no_flavor == false ]]; then\r\n        read -p \"🤔 Number of flavors?  \" num_flavors\r\n\r\n        #if flavor is 0, then call \r\n        if [[ $num_flavors -eq 0 ]]; then\r\n            no_flavor_build\r\n        fi\r\n        # Array to store flavor information\r\n        declare -a flavors\r\n\r\n        # Prompt the user for flavor information\r\n        for ((i = 1; i <= num_flavors; i++)); do\r\n            read -p \"🍦 Flavor $i name:  \" flavor_name\r\n            read -p \"📄 Entry point location of flavor $i (eg. lib/main_dev.dart): \" main_dart_location\r\n\r\n            #check if the file exists\r\n            #if it does not exist, then ask again\r\n            while [[ ! -f $main_dart_location ]]; do\r\n                echo \"🚫 File $main_dart_location does not exist, try again\"\r\n                read -p \"📄 Entry point location of flavor $i (eg. lib/main_dev.dart): \" main_dart_location\r\n            done\r\n\r\n            # Add flavor information to the array\r\n            flavors+=(\"$flavor_name\" \"$main_dart_location\")\r\n        done\r\n\r\n        select_build_types\r\n    fi\r\nfi\r\n\r\nrun_flutter_commands\r\n\r\n# Build and copy files for each flavor\r\nfor ((i = 0; i < ${#flavors[@]}; i += 2)); do\r\n    flavor_name=${flavors[i]}\r\n    main_dart_location=${flavors[i + 1]}\r\n\r\n    # Build and copy files for each build type\r\n    for build_type in \"${build_types[@]}\"; do\r\n        case \"$build_type\" in\r\n        \"apk\")\r\n            output_directory=\"build/app/outputs/flutter-apk/\"\r\n            ;;\r\n        \"appbundle\")\r\n            output_directory=\"build/app/outputs/bundle/\"\r\n            ;;\r\n        \"ipa\")\r\n            output_directory=\"build/ios/ipa/\"\r\n            ;;\r\n        esac\r\n\r\n        # Build and copy files for the flavor and build type\r\n        build_and_copy_files $build_type $flavor_name $main_dart_location $output_directory\r\n    done\r\ndone\r\n\r\nopen builds/$current_date_time\r\n\r\necho \"🎉 All builds completed successfully!, you can find all the builds in /builds folder\"\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-12-13T16:05:09Z"},{"avatar":"https://avatars.githubusercontent.com/u/52321532?u=ddb1a0825917a338122fd15542276e3b29f2f4af&v=4","user":"awakenedhaggis","author":null,"twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1390","url":"","title":"Query Kagi FastGPT","command":"query-kagi-fastgpt","content":"Wanted to make something similar to the OpenAi integrations already made for people who are subscribed to Kagi\r\n\r\n[Gist here](https://gist.github.com/awakenedhaggis/bd9dbf2421325117f7e5c20f62e1c99f)\r\n\r\n`Enter` to submit a query\r\n`Ctrl/Command + R` to rerun a query\r\n`Ctrl/Command + W` to close the window","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-12-04T23:37:23Z"},{"name":"Shortcut to Speakers","shortcut":"cmd shift m","avatar":"https://avatars.githubusercontent.com/u/3072458?u=cb1f8ec2b30c2c745c8f33c8225dee605b5ceab1&v=4","user":"AquiGorka","author":"Gorka Ludlow","twitter":"AquiGorka","discussion":"https://github.com/johnlindquist/kit/discussions/1388","url":"","title":"Keyboard shortcut to switch audio output to speakers","command":"keyboard-shortcut-to-switch-audio-output-to-speakers","content":"Existing alias: `alias smac=\"SwitchAudioSource -s \\\"MacBook Pro Speakers\\\"\"`  (uses [switchaudio-osx](https://github.com/deweller/switchaudio-osx))\r\n\r\nScript:\r\n\r\n```\r\n// Name: Shortcut to Speakers\r\n// Shortcut: cmd shift m\r\nimport \"@johnlindquist/kit\"\r\nawait $`/bin/zsh -lic smac`\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-12-04T17:37:52Z"},{"name":"Shortcut to Headphones","shortcut":"cmd shift h","avatar":"https://avatars.githubusercontent.com/u/3072458?u=cb1f8ec2b30c2c745c8f33c8225dee605b5ceab1&v=4","user":"AquiGorka","author":"Gorka Ludlow","twitter":"AquiGorka","discussion":"https://github.com/johnlindquist/kit/discussions/1387","url":"","title":"Keyboard shortcut to switch audio output to headphones","command":"keyboard-shortcut-to-switch-audio-output-to-headphones","content":"Existing alias: `alias shead=\"SwitchAudioSource -s \\\"External Headphones\\\"\"` (uses [switchaudio-osx](https://github.com/deweller/switchaudio-osx))\r\n\r\nScript:\r\n```\r\n// Name: Shortcut to Headphones\r\n// Shortcut: cmd shift h\r\nimport \"@johnlindquist/kit\"\r\nawait $`/bin/zsh -lic shead`\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-12-04T17:37:11Z"},{"name":"Dummy Data","description":"","author":"Nghia","avatar":"https://avatars.githubusercontent.com/u/80865148?u=07e3e5fc35d602ce6b3d58f26e60d5feb5cc4d48&v=4","user":"NGH14","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1373","url":"","title":"Generate Dummy Data","command":"generate-dummy-data","content":"[Install dummy-data](https://scriptkit.com/api/new?name=dummy-data&url=https://gist.githubusercontent.com/NGH14/b2efa176296362f26732bdc4fcf69402/raw/0d3ebc2ba760c720419cbd7399ed8dde62f0ca81/dummy-data.js)\r\n\r\n\r\n```js\r\n// Name: Dummy Data\r\n// Description: Generate fake data for real use-case (that #version just generate fields about person and color)\r\n// Author: Nghia Vu (Ngh14)\r\n\r\nimport '@johnlindquist/kit';\r\nimport falso from '@ngneat/falso';\r\n\r\nlet counts = 1;\r\n\r\nconst randZodiacSign = () => {\r\n\tconst zodiacSigns = [\r\n\t\t'Aries',\r\n\t\t'Taurus',\r\n\t\t'Gemini',\r\n\t\t'Cancer',\r\n\t\t'Leo',\r\n\t\t'Virgo',\r\n\t\t'Libra',\r\n\t\t'Scorpio',\r\n\t\t'Sagittarius',\r\n\t\t'Capricorn',\r\n\t\t'Aquarius',\r\n\t\t'Pisces',\r\n\t];\r\n\treturn falso.rand(zodiacSigns);\r\n};\r\n\r\nconst person = [\r\n\t{\r\n\t\tname: 'Full Name',\r\n\t\tvalue: () => falso.randFullName(),\r\n\t\tdescription: 'The complete name of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Title',\r\n\t\tvalue: () => falso.randPersonTitle(),\r\n\t\tdescription: 'The professional title of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Email',\r\n\t\tvalue: () => falso.randEmail(),\r\n\t\tdescription: 'The email address of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Phone',\r\n\t\tvalue: () => falso.randPhoneNumber(),\r\n\t\tdescription: 'The phone number of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Address',\r\n\t\tvalue: () => falso.randAddress(),\r\n\t\tdescription: 'The physical address of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Username',\r\n\t\tvalue: () => falso.randUserName(),\r\n\t\tdescription: 'The username chosen for the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Last Name',\r\n\t\tvalue: () => falso.randLastName(),\r\n\t\tdescription: 'The last name of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'First_Name',\r\n\t\tvalue: () => falso.randFirstName(),\r\n\t\tdescription: 'The first name of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Gender',\r\n\t\tvalue: () => falso.randGender(),\r\n\t\tdescription: 'The gender of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Avatar',\r\n\t\tvalue: () => falso.randAvatar(),\r\n\t\tdescription: 'The profile picture (avatar) of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Pronoun',\r\n\t\tvalue: () => falso.randPronoun(),\r\n\t\tdescription: 'The preferred pronoun of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Skill',\r\n\t\tvalue: () => falso.randSkill(),\r\n\t\tdescription: 'A skill associated with the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Password',\r\n\t\tvalue: () => falso.randPassword(),\r\n\t\tdescription: 'The password for the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Country',\r\n\t\tvalue: () => falso.randCountry(),\r\n\t\tdescription: 'The country of residence of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'City',\r\n\t\tvalue: () => falso.randCity(),\r\n\t\tdescription: 'The city of residence of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Role',\r\n\t\tvalue: () => falso.randRole(),\r\n\t\tdescription: 'The role or position held by the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Company',\r\n\t\tvalue: () => falso.randCompanyName(),\r\n\t\tdescription:\r\n\t\t\t'The name of the company associated with the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Subscription Plan',\r\n\t\tvalue: () => falso.randSubscriptionPlan(),\r\n\t\tdescription: 'The subscription plan chosen by the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Date of Birth',\r\n\t\tvalue: () => falso.randPastDate(),\r\n\t\tdescription: 'The date of birth of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Credit Card',\r\n\t\tvalue: () => falso.randCreditCard(),\r\n\t\tdescription: 'The randomly generated credit card information of the user.',\r\n\t},\r\n\t{\r\n\t\tname: 'User Agent',\r\n\t\tvalue: () => falso.randUserAgent(),\r\n\t\tdescription:\r\n\t\t\t'The user agent of the device used by the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'IP',\r\n\t\tvalue: () => falso.randIP(),\r\n\t\tdescription: 'The randomly generated IP address of the user.',\r\n\t},\r\n\t{\r\n\t\tname: 'IP6',\r\n\t\tvalue: () => falso.randIP6(),\r\n\t\tdescription: 'The randomly generated IPv6 address of the user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Zodiac Sign',\r\n\t\tvalue: () => randZodiacSign(),\r\n\t\tdescription: 'The randomly generated zodiac sign of the user.',\r\n\t},\r\n];\r\n\r\nconst color = [\r\n\t{\r\n\t\tname: 'Name',\r\n\t\tvalue: () => falso.randColor(),\r\n\t\tdescription: 'Generates a random color name.',\r\n\t},\r\n\t{\r\n\t\tname: 'HEX',\r\n\t\tvalue: () => falso.randHex(),\r\n\t\tdescription: 'Generates a random hexadecimal color code.',\r\n\t},\r\n\t{\r\n\t\tname: 'HSL',\r\n\t\tvalue: () => falso.randHsl(),\r\n\t\tdescription:\r\n\t\t\t'Generates a random HSL (Hue, Saturation, Lightness) color code.',\r\n\t},\r\n\t{\r\n\t\tname: 'RGB',\r\n\t\tvalue: () => falso.randRgb(),\r\n\t\tdescription: 'Generates a random RGB (Red, Green, Blue) color code.',\r\n\t},\r\n\t{\r\n\t\tname: 'RGBa',\r\n\t\tvalue: () => falso.randRgb({ alpha: true }),\r\n\t\tdescription:\r\n\t\t\t'Generates a random RGBA (Red, Green, Blue, Alpha) color code.',\r\n\t},\r\n];\r\n\r\nfunction filterDataField(arr, field) {\r\n\tconst filtered = {};\r\n\tarr.map(({ name, value }) => {\r\n\t\tif (field.includes(name)) {\r\n\t\t\tfiltered[name] = value();\r\n\t\t}\r\n\t});\r\n\treturn filtered;\r\n}\r\n\r\nfunction generateData({ types, fields, ...rest }) {\r\n\tconst arr = [];\r\n\r\n\tfor (let index = 0; index < counts; index++) {\r\n\t\tarr.push(filterDataField(types, fields));\r\n\t}\r\n\tsetSelectedText(JSON.stringify(arr));\r\n}\r\n\r\nlet types = await arg('Generate Random Data...', ['people', 'color']);\r\n\r\nif (types == 'people') {\r\n\tlet peopleField = await select(\r\n\t\t'Select a fields....',\r\n\t\tperson\r\n\t\t\t.sort((a, b) => a.name.localeCompare(b.name))\r\n\t\t\t.map(({ name, value, description }) => ({\r\n\t\t\t\tname,\r\n\t\t\t\tdescription,\r\n\t\t\t\tvalue: name,\r\n\t\t\t\theight: PROMPT.HEIGHT.XS,\r\n\t\t\t\tpreview: () => JSON.stringify(value()),\r\n\t\t\t})),\r\n\t);\r\n\r\n\tcounts = await arg({\r\n\t\tdescription: 'How many person records you want?',\r\n\t\tplaceholder: '1',\r\n\t});\r\n\r\n\tgenerateData({ types: person, fields: peopleField });\r\n} else if (types == 'color') {\r\n\tlet result = await arg(\r\n\t\t'Generate random color...',\r\n\t\tcolor.map(({ name, value, description }) => ({\r\n\t\t\tname,\r\n\t\t\tdescription,\r\n\t\t\tvalue: value(),\r\n\t\t\theight: PROMPT.HEIGHT.XS,\r\n\t\t\tpreview: () => value(),\r\n\t\t})),\r\n\t);\r\n\r\n\tsetSelectedText(result);\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-11-06T17:06:44Z"},{"name":"Switch Audio","description":"","author":"Nate Drake","avatar":"https://avatars.githubusercontent.com/u/73789?v=4","user":"ndrake","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1367","url":"","title":"Audio Output Switcher","command":"audio-output-switcher","content":"A Mac-only script using the [switchaudio-osx](https://github.com/deweller/switchaudio-osx) tool to quickly change audio output devices\r\n\r\n[Open switch-audio in Script Kit](https://scriptkit.com/api/new?name=switch-audio&url=https://gist.githubusercontent.com/ndrake/3c0840f03662a21900a81ec22ab734a1/raw/81b7c4c7538ca93eca953a6c34e58651f528fddf/switch-audio.js\")\r\n\r\n```js\r\n/*\r\n## Switch audio output device\r\n*/\r\n\r\n// Name: Switch Audio\r\n// Description: Switch audio output device (Mac only)\r\n// Author: Nate Drake\r\n\r\n// Install SwitchAudioSource with `brew install switchaudio-osx`\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst SwitchAudioSourcePath = '/opt/homebrew/bin/SwitchAudioSource'\r\n\r\nconst sasExists = await pathExists(SwitchAudioSourcePath)\r\n\r\nif (sasExists) {\r\n\r\n    const currentOutput = await $`${SwitchAudioSourcePath} -c`\r\n    const items = await $`${SwitchAudioSourcePath} -a -t output`\r\n\r\n    const choices = items.stdout.trim().split(/\\r?\\n/).filter(o => o !== currentOutput.stdout.trim())\r\n\r\n    let output = await arg(\r\n        {\r\n            placeholder: 'Pick ouput device'\r\n        },\r\n        choices\r\n    )\r\n\r\n    await $`${SwitchAudioSourcePath} -s ${output} -t output`\r\n} else {\r\n    await div(md(`ERROR: Please install SwitchAudioSource`))\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-11-01T01:28:45Z"},{"name":"Clipboard history","author":"Aldo Preciado","gitHub":"@aldirrix","shortcut":"command shift v","avatar":"https://avatars.githubusercontent.com/u/12806880?u=dd4d009aa8af0e17149a51a18969d29d1e4fd8de&v=4","user":"aldirrix","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1360","url":"","title":"Clipboard history with image preview","command":"clipboard-history-with-image-preview","content":"Hello there, first of all I would like to praise everyone that made this possible so far! I really like using kit and tweaking few scripts here and there for productivity.\r\n\r\nI was using an adapted version of the [community-available clipboard history](https://github.com/johnlindquist/kit/discussions/1120) but I was struggling with some errors regarding the database from time to time and this was also causing processes not being finished properly and running forever and forcing me to restart kit. The db file was also randomly deleted at times and other not so nice things that were basically making me having to come back from time to time.\r\n\r\n```\r\n[2023-05-22 08:51:17.374] [warn]  ☠️ ERROR PROMPT SHOULD SHOW ☠️\r\n[2023-05-22 08:51:17.393] [warn]  Error: ENOENT: no such file or directory, rename '/Users/aldo/.kenv/db/.clipboard-history.json.tmp' -> '/Users/aldo/.kenv/db/clipboard-history.json'\r\n```\r\n\r\nAfter dealing with it for few months, I realized we now have the `getClipboardHistory` function when the watcher is enabled so I'd like to share this with everyone so that we have a proper history paste with image preview that doesn't require the managing of a json file.\r\n\r\n```ts\r\n// Name: Clipboard history\r\n// Author: Aldo Preciado\r\n// GitHub: @aldirrix\r\n// Shortcut: command shift v\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst history = await getClipboardHistory();\r\n\r\nlet { value, type } = await arg(\"What to paste?\", () => {\r\n  return history.map(({ value, type, timestamp, maybeSecret }) => {\r\n    const multilinePreview = value.includes(\"\\n\")\r\n      ? `<div class=\"font-mono text-xs\">${value\r\n          .split(\"\\n\")\r\n          .map((line) => `<p>${line}</p>`)\r\n          .join(\"\")}<div>`\r\n      : null;\r\n\r\n    const preview = type === \"image\" ? `<img src=\"${value}\" alt=\"${value}\">` : multilinePreview;\r\n\r\n    return {\r\n      type,\r\n      name: maybeSecret ? value.slice(0, 2).padEnd(10, \"*\") : value,\r\n      value: {\r\n        value,\r\n        type,\r\n      },\r\n      description: timestamp,\r\n      preview,\r\n    };\r\n  });\r\n});\r\n\r\nif (type === \"text\") {\r\n  await setSelectedText(value);\r\n}\r\n\r\nif (type === \"image\") {\r\n  await copyPathAsImage(value);\r\n  await keystroke(\"command v\");\r\n}\r\n```\r\n\r\nOn the same note, is there a way for us to configure the `maybeSecret` property in the kit app? It seems like there has not been any discussion around it and I was wondering","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-10-16T08:25:15Z"},{"name":"Watch Screenshots Dir","watch":"~/Desktop/screenshots","description":"","avatar":"https://avatars.githubusercontent.com/u/25487857?u=8de0c1a02b8786762899a89fa547ddd29dc17c20&v=4","user":"vojtaholik","author":"Vojta Holik","twitter":"vojta_holik","discussion":"https://github.com/johnlindquist/kit/discussions/1357","url":"","title":"Screenshot tool alternative with Cloudinary","command":"screenshot-tool-alternative-with-cloudinary","content":"This is my alternative to _[insert your favorite screenshot upload tool]_. I use it in combination with [Record Screen script](https://github.com/johnlindquist/kit/discussions/1356).\r\n\r\nIt watches a `screenshots` directory on desktop and uploads any new file to Cloudinary. I have it then set to copy link to clipboard and move the file to trash. On top of that I have a dynamic route on my personal website to display the image/video along with a simple kvstore to track views (anonymously, just so that I know when someone view the file). It looks like [this](https://vojta.io/shots/1696935964744). Code for it is [here](https://github.com/vojtaholik/vojta-io-next/blob/main/src/pages/shots/%5Bpublic_id%5D.tsx).\r\n\r\nOne of nice things about Cloudinary is that if I record a video, all I have to do is replace`.mov` with `.gif` in url to get a gif.\r\n\r\nDon't forget to run following command in your terminal to change default screenshot (`cmd+shift+4`) location:\r\n```bash\r\ndefaults write com.apple.screencapture location ~/Desktop/screenshots\r\n``` \r\n\r\n[Open watch-screenshots in Script Kit](https://scriptkit.com/api/new?name=watch-screenshots&url=https://gist.githubusercontent.com/vojtaholik/3a7e5639544f2c62cbff989141f1da70/raw/c0782ea081d4afbe7bbd6e964d64f7f7b2b9fd54/watch-screenshots.js\")\r\n\r\n```js\r\n// Name: Watch Screenshots Dir\r\n// Watch: ~/Desktop/screenshots\r\n// Description: Don't forget to run following command in your terminal to set default screenshot directory in macOSX: defaults write com.apple.screencapture location ~/Desktop/screenshots\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport cloudinary from \"cloudinary\";\r\nimport trash from \"trash\";\r\n\r\nconst DIR = \"screenshots\";\r\nconst NOTIFY_SOUND_FILE_PATH = false; // home(\"Desktop/come-here-notification.mp3\");\r\nconst CUSTOM_DOMAIN = false; // 'https://vojta.io/shots/'\r\n\r\n// These are optional and automatically set by the watcher\r\nlet filePath = await arg();\r\nlet event = await arg();\r\n\r\n// Cloudinary options\r\nconst options = {\r\n  public_id: `${DIR}/${Date.now()}`,\r\n  unique_filename: true,\r\n  use_filename: true,\r\n  overwrite: true,\r\n  filename_override: true,\r\n};\r\n\r\ncloudinary.v2.config({\r\n  cloud_name: await env(\"CLOUDINARY_CLOUD_NAME\"),\r\n  api_key: await env(\"CLOUDINARY_API_KEY\"),\r\n  api_secret: await env(\"CLOUDINARY_API_SECRET\"),\r\n});\r\n\r\n// if file is added to DIR directory\r\nif (event === \"add\") {\r\n  await appendFile(home(`Desktop/${DIR}/download.log`), filePath + \"\\n\");\r\n  const isVideoFile = filePath.endsWith(\".mov\");\r\n\r\n  await cloudinary.v2.uploader.upload(\r\n    filePath,\r\n    { ...options, resource_type: isVideoFile ? \"video\" : \"image\" },\r\n    async (error, result) => {\r\n      if (error) {\r\n        console.error(\"Error uploading file:\", error);\r\n      } else {\r\n        if (result) {\r\n          await copy(\r\n            CUSTOM_DOMAIN\r\n              ? `${CUSTOM_DOMAIN}${result.public_id.replace(`${DIR}/`, \"\")}`\r\n              : isVideoFile\r\n              ? result.url.replace(\".mov\", \".mp4\")\r\n              : result.url\r\n          );\r\n          notify(\"✓ Uploaded to Cloudinary\");\r\n          NOTIFY_SOUND_FILE_PATH &&\r\n            (await playAudioFile(NOTIFY_SOUND_FILE_PATH));\r\n          await trash([filePath]);\r\n        }\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-10-12T09:42:34Z"},{"menu":"Record Screen","shortcut":"shift cmd 5","avatar":"https://avatars.githubusercontent.com/u/25487857?u=8de0c1a02b8786762899a89fa547ddd29dc17c20&v=4","user":"vojtaholik","author":"Vojta Holik","twitter":"vojta_holik","discussion":"https://github.com/johnlindquist/kit/discussions/1356","url":"","title":"Record Screen","command":"record-screen","content":"`shift + cmd + 5` will start a screen recording session on macOS Sonoma. It's got video trimming feature and is overall pretty good. I use it in combination with my [screenshot upload script](https://github.com/johnlindquist/kit/discussions/1357).\r\n\r\n[Open record-screen in Script Kit](https://scriptkit.com/api/new?name=record-screen&url=https://gist.githubusercontent.com/vojtaholik/ded540fc8b553751887adbc03abcca90/raw/973985e7ef57eff98d825229edfe5a00145e2978/record-screen.js\")\r\n\r\n```js\r\n// Menu: Record Screen\r\n// Shortcut: shift cmd 5\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nawait applescript(`\r\n--  # Setup to do a screen recording.\r\n\r\n# tell application \"QuickTime Player\" to new screen recording\r\n\r\n--  # Start the screen recording.\r\n\r\ntell application \"System Events\" to tell process \"Screen Shot\"\r\n    repeat until exists button \"Record\" of its front window\r\n        delay 0.1\r\n    end repeat\r\n    click button \"Record\" of its front window\r\nend tell\r\n\r\n--  # Set the time in seconds you want the recording to be.\r\n\r\ndelay 2\r\n\r\n--  # Stop the recording.\r\n\r\ntell application \"System Events\" to ¬\r\n    click menu bar item 1 ¬\r\n        of menu bar 1 ¬\r\n        of application process \"screencaptureui\"\r\n`);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-10-12T09:30:50Z"},{"name":"arc-default-theme","description":"","note":"This script modifies Arc Browser's `StorableSidebar.json` file. Use at your peril.","avatar":"https://avatars.githubusercontent.com/u/150462?u=6478fa6d3285adcd99bf6819f9f7758f4de0d277&v=4","user":"kkoscielniak","author":"Krystian Kościelniak","twitter":"pankoscielniak","discussion":"https://github.com/johnlindquist/kit/discussions/1354","url":"https://gist.githubusercontent.com/kkoscielniak/524092e7812d37c1d30f0dc5aea5d0f8/raw/4b54a4dc63537e6e021766d7a03fdd98ebce03b6/arc-default-theme.ts","title":"Arc: Use default theme","command":"arc-use-default-theme","content":"This script allows for choosing the Space in [Arc Browser](https://arc.net) and reuse the same theme for every other Space.\r\n\r\n> I've created it because I dislike the default theme in Arc but still want to have the same one for every Space I have. \r\n\r\n> Note: This script modifies Arc Browser's `StorableSidebar.json` file. Use at your peril.\r\n\r\n[Open arc-default-theme in Script Kit](https://scriptkit.com/api/new?name=arc-default-theme&url=https://gist.githubusercontent.com/kkoscielniak/524092e7812d37c1d30f0dc5aea5d0f8/raw/4b54a4dc63537e6e021766d7a03fdd98ebce03b6/arc-default-theme.ts\")\r\n\r\n```js\r\n// Name: arc-default-theme\r\n// Description: Pick an Arc Browser's Space and set its theme for all the other Arc Spaces. Tested with Arc v1.10.1.\r\n// Note: This script modifies Arc Browser's `StorableSidebar.json` file. Use at your peril.\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport { readdir, readFile, writeFile } from \"node:fs/promises\";\r\nimport { homedir } from \"node:os\";\r\nimport { join } from \"node:path\";\r\n\r\nconst { rimraf } = await npm(\"rimraf\");\r\nconst psList = await npm(\"ps-list\");\r\n\r\nconst ARC_LIBRARY_PATH = join(\r\n  homedir(),\r\n  \"Library\",\r\n  \"Application Support\",\r\n  \"Arc\"\r\n);\r\n\r\nasync function listSidebarCacheFiles(): Promise<string[]> {\r\n  const arcFileNames = await readdir(ARC_LIBRARY_PATH);\r\n\r\n  return arcFileNames.filter(\r\n    (file) =>\r\n      file.startsWith(\"StorableSidebar\") && file !== \"StorableSidebar.json\"\r\n  ) as string[];\r\n}\r\n\r\nasync function removeSidebarCacheFiles(): Promise<void> {\r\n  const sidebarCacheFileNames = await listSidebarCacheFiles();\r\n\r\n  for (const fileName of sidebarCacheFileNames) {\r\n    try {\r\n      await rimraf(join(ARC_LIBRARY_PATH, fileName));\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n}\r\n\r\nasync function findArcProcess(): Promise<{\r\n  name: string;\r\n  pid: number;\r\n}> {\r\n  const processes = await psList();\r\n\r\n  const arcProcess = processes.find((process) => process.name === \"Arc\");\r\n\r\n  return arcProcess;\r\n}\r\n\r\nasync function killArcProcess(): Promise<void> {\r\n  const arcProcess = await findArcProcess();\r\n\r\n  if (arcProcess) {\r\n    process.kill(arcProcess.pid);\r\n  }\r\n}\r\n\r\nasync function readStorableSidebarJson(): Promise<StorableSidebarJson> {\r\n  const storableSidebarJson = await readFile(\r\n    join(ARC_LIBRARY_PATH, \"StorableSidebar.json\"),\r\n    \"utf-8\"\r\n  );\r\n\r\n  return JSON.parse(storableSidebarJson) as StorableSidebarJson;\r\n}\r\n\r\nasync function getSourceSpaceTheme(\r\n  json: StorableSidebarJson,\r\n  sourceSpaceName: string\r\n): Promise<WindowTheme> {\r\n  const sourceSpace: SpaceModel = json.sidebarSyncState.spaceModels.find(\r\n    (spaceModel) =>\r\n      typeof spaceModel !== \"string\" &&\r\n      spaceModel.value?.title === sourceSpaceName\r\n  ) as SpaceModel;\r\n\r\n  return sourceSpace.value?.customInfo.windowTheme;\r\n}\r\n\r\nasync function getTargetSpaces(\r\n  json: StorableSidebarJson,\r\n  originalSpaceName: string\r\n): Promise<SpaceData[]> {\r\n  const itemsContainer = json.sidebar.containers.find((container) =>\r\n    Object.hasOwnProperty.call(container, \"items\")\r\n  );\r\n\r\n  if (itemsContainer) {\r\n    const spaces = itemsContainer.spaces as (string | SpaceData)[];\r\n\r\n    return spaces.filter(\r\n      (space) => typeof space !== \"string\" && space.title !== originalSpaceName\r\n    ) as SpaceData[];\r\n  }\r\n}\r\n\r\nasync function getTargetSpacesSynced(\r\n  json: StorableSidebarJson,\r\n  originalSpaceName: string\r\n): Promise<SpaceModel[]> {\r\n  return json.sidebarSyncState.spaceModels.filter(\r\n    (spaceModel) =>\r\n      typeof spaceModel !== \"string\" &&\r\n      spaceModel.value?.title !== originalSpaceName\r\n  ) as SpaceModel[];\r\n}\r\n\r\nasync function writeStorableSidebarJson(\r\n  json: StorableSidebarJson\r\n): Promise<void> {\r\n  await removeSidebarCacheFiles();\r\n\r\n  await writeFile(\r\n    join(ARC_LIBRARY_PATH, \"StorableSidebar.json\"),\r\n    JSON.stringify(json, null, 2)\r\n  );\r\n}\r\n\r\nasync function mapJsonToSpaceNames(\r\n  json: StorableSidebarJson\r\n): Promise<string[]> {\r\n  const itemsContainer = json.sidebar.containers.find((container) =>\r\n    Object.hasOwnProperty.call(container, \"spaces\")\r\n  );\r\n\r\n  if (itemsContainer) {\r\n    const spaces = itemsContainer.spaces as (string | SpaceData)[];\r\n\r\n    return (\r\n      spaces.filter((space) => typeof space !== \"string\") as SpaceData[]\r\n    ).map((space) => space.title);\r\n  }\r\n}\r\n\r\nasync function main(): Promise<void> {\r\n  await killArcProcess();\r\n  await removeSidebarCacheFiles();\r\n\r\n  const storableSidebarJson: StorableSidebarJson =\r\n    await readStorableSidebarJson();\r\n\r\n  const spaceNames = await mapJsonToSpaceNames(storableSidebarJson);\r\n\r\n  const sourceSpaceName = await arg(\r\n    \"Which Space theme you want to use for all the others?\",\r\n    spaceNames\r\n  );\r\n\r\n  const sourceSpaceTheme: WindowTheme = await getSourceSpaceTheme(\r\n    storableSidebarJson,\r\n    sourceSpaceName\r\n  );\r\n\r\n  const targetSpaces: SpaceData[] = await getTargetSpaces(\r\n    storableSidebarJson,\r\n    sourceSpaceName\r\n  );\r\n\r\n  for (const targetSpace of targetSpaces) {\r\n    targetSpace.customInfo.windowTheme = sourceSpaceTheme;\r\n  }\r\n\r\n  const targetSpacesSynced: SpaceModel[] = await getTargetSpacesSynced(\r\n    storableSidebarJson,\r\n    sourceSpaceName\r\n  );\r\n\r\n  for (const targetSpace of targetSpacesSynced) {\r\n    targetSpace.value.customInfo.windowTheme = sourceSpaceTheme;\r\n  }\r\n\r\n  writeStorableSidebarJson(storableSidebarJson);\r\n}\r\n\r\nawait main();\r\n\r\n// Interfaces ------------------------------------------------------------------\r\n\r\ninterface Color {\r\n  colorSpace: string;\r\n  red: number;\r\n  alpha: number;\r\n  blue: number;\r\n  green: number;\r\n}\r\n\r\ninterface ColorSettings {\r\n  [key: string]: Color;\r\n}\r\n\r\ninterface WindowTheme {\r\n  semanticColorPalette: {\r\n    appearanceBased: {\r\n      light: ColorSettings;\r\n      dark: ColorSettings;\r\n    };\r\n  };\r\n  [key: string]: unknown;\r\n}\r\n\r\ninterface CustomInfo {\r\n  windowTheme: WindowTheme;\r\n  [key: string]: unknown;\r\n}\r\n\r\ninterface SpaceData {\r\n  title: string;\r\n  customInfo: CustomInfo;\r\n  id: string;\r\n  [key: string]: unknown;\r\n}\r\n\r\ninterface SpaceModel {\r\n  value: SpaceData;\r\n  [key: string]: unknown;\r\n}\r\n\r\ninterface SidebarSyncState {\r\n  spaceModels: (string | SpaceModel)[];\r\n}\r\n\r\ninterface Sidebar {\r\n  containers: Array<\r\n    | {\r\n        spaces: (SpaceData | string)[];\r\n      }\r\n    | {\r\n        [key: string]: unknown;\r\n      }\r\n  >;\r\n}\r\n\r\ninterface StorableSidebarJson {\r\n  sidebarSyncState: SidebarSyncState;\r\n  sidebar: Sidebar;\r\n  [key: string]: unknown;\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-10-04T09:19:35Z"},{"avatar":"https://avatars.githubusercontent.com/u/76580?v=4","user":"abernier","author":"Antoine BERNIER","twitter":"abernier_","discussion":"https://github.com/johnlindquist/kit/discussions/1345","url":"","title":"generate-password","command":"generate-password","content":"[`Generate-password`](https://www.npmjs.com/package/generate-password)s variants:\r\n\r\n<img width=\"880\" alt=\"image\" src=\"https://user-images.githubusercontent.com/76580/269100710-c730f3b9-fa6d-4849-8477-a5fa0030215e.png\">\r\n\r\nCreate a [`~/.generatepasswordrc` file](https://www.npmjs.com/package/rc#standards) to change [defaults](https://www.npmjs.com/package/generate-password#user-content-available-options):\r\n\r\n```ini\r\nlength=12\r\nnumbers=true\r\nsymbols=true\r\n```\r\n\r\nSee source: https://gist.github.com/abernier/3dcf17422b23e151c2f60db874494233\r\n\r\n```ts\r\n// Generate password\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nimport { generate, generateMultiple, GenerateOptions } from \"generate-password\";\r\nimport rc from \"rc\";\r\n\r\nimport omit from \"lodash.omit\";\r\n\r\nimport { passwordStrength } from \"check-password-strength\";\r\n\r\nconst config = rc(\"generatepassword\", { length: 10 }); // create a ~/.generate-passwordrc file (see: https://www.npmjs.com/package/rc#standards)\r\n\r\nconst flags = {\r\n  copy: {\r\n    name: \"copy\",\r\n    shortcut: \"cmd+c\",\r\n  },\r\n};\r\n\r\nfunction formatVariant(o) {\r\n  if (Object.keys(o).length === 0) o = config;\r\n\r\n  const arr = [];\r\n  Object.keys(o).forEach((k) => {\r\n    if (o[k] === true) {\r\n      arr.push(`--${k}`);\r\n    } else if (o[k] === false) {\r\n      arr.push(`--no-${k}`);\r\n    }\r\n  });\r\n  return arr.join(\" \");\r\n}\r\n\r\nfunction sortedObj(o) {\r\n  return Object.fromEntries(Object.entries(o).sort());\r\n}\r\n\r\nconst chosenPass = await arg(\r\n  {\r\n    placeholder: (config.length && String(config.length)) || undefined,\r\n    description: `Length`,\r\n    flags,\r\n  },\r\n  (input) => {\r\n    const baseOpts = { ...config };\r\n\r\n    const length = (input && Number(input)) || undefined;\r\n    if (length) baseOpts.length = length;\r\n\r\n    const variants = [\r\n      {},\r\n      { numbers: true, symbols: true },\r\n      {\r\n        numbers: true,\r\n        symbols: true,\r\n        excludeSimilarCharacters: true,\r\n      },\r\n      { numbers: true, symbols: true, lowercase: false },\r\n      { numbers: true, symbols: true, uppercase: false },\r\n      { numbers: true },\r\n      { symbols: true },\r\n      { lowercase: false },\r\n      { uppercase: false },\r\n    ];\r\n\r\n    return variants.map((variant) => {\r\n      const opts = { ...baseOpts, ...variant };\r\n      const newPass = generate(opts);\r\n\r\n      const description =\r\n        Object.keys(variant).length === 0\r\n          ? `from config: ${config.config}`\r\n          : formatVariant(variant);\r\n\r\n      return {\r\n        name: `${newPass}`,\r\n        description,\r\n        preview() {\r\n          return md(`${passwordStrength(newPass).value}\r\n\\`\\`\\`json\r\n${JSON.stringify(omit(sortedObj(opts), \"_\", \"configs\", \"config\"), null, 4)}\r\n\\`\\`\\`\r\nsee [available options](https://www.npmjs.com/package/generate-password#available-options)\r\n`);\r\n        },\r\n        value: newPass,\r\n      };\r\n    });\r\n  }\r\n);\r\n\r\nif (flag?.copy) {\r\n  copy(chosenPass);\r\n} else {\r\n  setSelectedText(chosenPass);\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-09-19T21:37:36Z"},{"name":"Generate Raycast Scripts","avatar":"https://avatars.githubusercontent.com/u/40895636?u=946aac6dc4a64ea3ac772be3d2fb986790d0eb4f&v=4","user":"brianjohnpenner","author":"Brian Penner","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1342","url":"","title":"Trigger Scripts directly from Raycast","command":"trigger-scripts-directly-from-raycast","content":"Since I use Raycast as my launcher on my computer I wanted a way to trigger Script Kit scripts directly from the Raycast menu without a second step. I made a script to generate Raycast shell scripts that will directly trigger the Script Kit scripts. \r\n\r\n1. Make a directory to store the Raycast scripts.\r\n2. Add this directory to the Raycast settings as a script directory.\r\n3. Run this script and choose that directory when prompted. \r\n\r\nJust posting this as inspiration. This script is a little rough around the edges and could use refinement and customization to suit your needs. \r\n\r\n\r\n[Open generate-raycast-scripts in Script Kit](https://scriptkit.com/api/new?name=generate-raycast-scripts&url=https://gist.githubusercontent.com/cvbrian/b752361fb54b6efa813362087a72d330/raw/012f74a1249bf6a2406b02f0da1e07d6aa5d2e92/generate-raycast-scripts.js\")\r\n\r\n```js\r\n// Name: Generate Raycast Scripts\r\n\r\nimport \"@johnlindquist/kit\"\r\nconst collect = await npm(\"collect.js\")\r\n\r\n// get the directory to store the scripts in. Save in an environment variable\r\nconst directory = await env(\"RAYCAST_SCRIPTS_DIRECTORY\", async () => { return await selectFolder(\"Select a directory to store the scripts in\") })\r\n// get all the scripts from Script Kit\r\nlet scripts = collect(await getScripts())\r\n// remove preview from scripts\r\nscripts = scripts.map(script => {\r\n    delete script.preview\r\n    return script\r\n})\r\n// get only kenv scripts\r\nscripts = scripts.where('kenv', '')\r\n// TODO find out which scripts should be ignored\r\n// generate a script for each one in the directory\r\nscripts.each(async script => {\r\n    const scriptContents = `#!/bin/bash\r\n\r\n# Required parameters:\r\n# @raycast.schemaVersion 1\r\n# @raycast.title ${script.name}\r\n# @raycast.mode silent\r\n# @raycast.packageName Script Kit Scripts\r\n# Documentation:\r\n# @raycast.description ${script.description}\r\n\r\n\r\n~/.kit/kar ${script.command}\r\n`\r\n    await writeFile(`${directory}/${script.name}.sh`, scriptContents, \"utf-8\")\r\n})\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-09-19T16:27:55Z"},{"name":"Lorem ipsum","avatar":"https://avatars.githubusercontent.com/u/76580?v=4","user":"abernier","author":"Antoine BERNIER","twitter":"abernier_","discussion":"https://github.com/johnlindquist/kit/discussions/1340","url":"https://gist.githubusercontent.com/abernier/e93dd8f345cba61d4dab1dafb7282a45/raw/lorem-ipsum.ts","title":"lorem-ipsum-text","command":"lorem-ipsum-text","content":"[Open `lorem-ipsum` in Script Kit](https://scriptkit.com/api/new?name=lorem&url=https://gist.githubusercontent.com/abernier/e93dd8f345cba61d4dab1dafb7282a45/raw/lorem-ipsum.ts)\r\n\r\nhttps://github.com/johnlindquist/kit/assets/76580/a6e449aa-d9ef-4404-9be8-b5fd7855e6d0\r\n\r\n[source code](https://gist.github.com/abernier/e93dd8f345cba61d4dab1dafb7282a45#file-lorem-ipsum-ts)\r\n\r\n```ts\r\n// Name: Lorem ipsum\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nimport { loremIpsum, ILoremIpsumParams } from \"lorem-ipsum\";\r\n\r\nlet ret: ReturnType<typeof loremIpsum>;\r\n\r\nconst DEFAULTS = {\r\n  count: 1,\r\n};\r\n\r\nlet count: ILoremIpsumParams[\"count\"];\r\nlet units: ILoremIpsumParams[\"units\"];\r\n\r\nconst flags = {\r\n  html: {\r\n    name: \"html\",\r\n    shortcut: \"cmd+h\",\r\n  },\r\n  copy: {\r\n    name: \"copy\",\r\n    shortcut: \"cmd+c\",\r\n  },\r\n};\r\n\r\nfunction myLoremIpsum({ ...args }: Parameters<typeof loremIpsum>[0] = {}) {\r\n  const format = flag?.html ? \"html\" : \"plain\";\r\n\r\n  // say(`generating ${count} ${units} of ${format} text`);\r\n  return loremIpsum({ count, units, format, ...args });\r\n}\r\n\r\nawait arg(\r\n  {\r\n    placeholder: String(DEFAULTS.count),\r\n    description: `Generate lorem ipsum text...`,\r\n    flags,\r\n  },\r\n  (input) => {\r\n    count = (input && Number(input)) || undefined;\r\n\r\n    return [\"paragraphs\", \"sentences\", \"words\"].map((el) => ({\r\n      name: el,\r\n      preview: () => {\r\n        units = el as ILoremIpsumParams[\"units\"];\r\n        return myLoremIpsum();\r\n      },\r\n    }));\r\n  }\r\n);\r\n\r\nconst loremText = myLoremIpsum();\r\n\r\nif (flag?.copy) {\r\n  copy(loremText);\r\n} else {\r\n  setSelectedText(loremText);\r\n}\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-09-17T12:50:07Z"},{"avatar":"https://avatars.githubusercontent.com/u/75037449?u=1fcae869eafe508a6cc283783373a405a2bb4a28&v=4","user":"sum117","author":"sum117","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1339","url":"","title":"Chunkify text into discord friendly chunks with an intuitive UI!","command":"chunkify-text-into-discord-friendly-chunks-with-an-intuitive-ui","content":"\r\n[Open chunkify-text in Script Kit](https://scriptkit.com/api/new?name=chunkify-text&url=https://gist.githubusercontent.com/sum117/423f829687bea3e32b8defbe0aa62731/raw/ed0d8bbe52749f4b583de1e8f265e06b8c77b654/chunkify-text.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\";\r\n\r\n/**\r\n * Chunkify a text into chunks of a given size.\r\n * @param {string} text\r\n * @param {number} chunkSize\r\n */\r\nfunction chunkify(text, chunkSize) {\r\n  const chunks = [];\r\n\r\n  let index = 0;\r\n  while (index < text.length) {\r\n    let end = index + chunkSize;\r\n\r\n    while (end > index && text[end] !== \"\\n\") {\r\n      end--;\r\n    }\r\n\r\n    if (end === index) {\r\n      end = index + chunkSize;\r\n    }\r\n\r\n    const chunk = text.substring(index, end);\r\n    chunks.push(chunk);\r\n    index = end;\r\n  }\r\n\r\n  return chunks;\r\n}\r\n\r\nconst rawText = await editor(\r\n  \"Paste the text to chunkify here (You can delete this placeholder).\"\r\n);\r\n\r\nlet textWidget = await widget(\r\n  `<header class=\"grid grid-flow-col px-4 py-2\">\r\n    <button id=\"previous-button\" class=\"items-center rounded-md bg-black p-4 text-white transition-colors hover:bg-white hover:text-black hover:outline\">Previous</button>\r\n    <div>\r\n      <h1 class=\"text-center text-4xl\">Chunkifier</h1>\r\n      <h2 class=\"text-center text-gray-500\">Chunk {{chunkIndex}} of {{totalChunks}}</h2>\r\n    </div>\r\n    <button id=\"close-button\" class=\"items-center rounded-md bg-black p-4 text-white transition-colors hover:bg-white hover:text-black hover:outline\">Close</button>\r\n  </header>\r\n  <section class=\"max-w-prose flex-1 overflow-auto break-words p-6\">{{chunk}}</section>\r\n  <button id=\"copy-button\" class=\"flex mx-6 my-4 items-center justify-center rounded-md bg-black px-6 py-4 text-4xl text-white transition-colors hover:bg-white hover:text-black hover:outline hover:outline-black\">{{copyBtnText}}</button>`,\r\n  {\r\n    closable: true,\r\n    useContentSize: true,\r\n    draggable: true,\r\n    containerClass:\r\n      \"flex h-screen flex-col overflow-hidden bg-white text-black\",\r\n    alwaysOnTop: true,\r\n    minHeight: 600,\r\n  }\r\n);\r\n\r\nconst chunks = chunkify(rawText, 2000);\r\nlet chunkIndex = 0;\r\nlet copyBtnText = \"Copy\";\r\ntextWidget.setState({\r\n  chunkIndex: chunkIndex + 1,\r\n  chunk: chunks[chunkIndex],\r\n  copyBtnText: \"Copy\",\r\n  totalChunks: chunks.length,\r\n});\r\n\r\nfunction handleClose() {\r\n  textWidget.close();\r\n  process.exit(0);\r\n}\r\n\r\nfunction handleCopyButton() {\r\n  copy(chunks[chunkIndex]);\r\n  const isLastChunk = chunkIndex >= chunks.length - 1;\r\n\r\n  if (isLastChunk && copyBtnText === \"Copy\") {\r\n    copyBtnText = \"Done\";\r\n    textWidget.setState({\r\n      copyBtnText,\r\n      chunk: \"All chunks copied, click again to close!\",\r\n    });\r\n  } else if (isLastChunk) {\r\n    handleClose();\r\n  } else {\r\n    chunkIndex++;\r\n    textWidget.setState({\r\n      chunkIndex: chunkIndex + 1,\r\n      chunk: `${chunks[chunkIndex]}`,\r\n    });\r\n  }\r\n}\r\n\r\nfunction handlePreviousButton() {\r\n  if (chunkIndex <= 0) return;\r\n  chunkIndex--;\r\n  let copyBtnText = \"Copy\";\r\n  textWidget.setState({\r\n    chunkIndex: chunkIndex + 1,\r\n    copyBtnText,\r\n    chunk: `${chunks[chunkIndex]}`,\r\n  });\r\n}\r\n\r\ntextWidget.onClick((event) => {\r\n  switch (event.targetId) {\r\n    case \"copy-button\":\r\n      handleCopyButton();\r\n      break;\r\n    case \"previous-button\":\r\n      handlePreviousButton();\r\n      break;\r\n    case \"close-button\":\r\n      handleClose();\r\n      break;\r\n  }\r\n});\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-09-15T19:31:50Z"},{"name":"Shortcuts","description":"","keyword":"sc","avatar":"https://avatars.githubusercontent.com/u/36767987?u=e03b3d34a5882f34dfb8d6e11609dd94836e3696&v=4","user":"dschapman","author":"Daniel Chapman","twitter":"ds_chapman","discussion":"https://github.com/johnlindquist/kit/discussions/1333","url":"","title":"MacOS Shortcut Launcher","command":"macos-shortcut-launcher","content":"\r\n[Open shortcuts in Script Kit](https://scriptkit.com/api/new?name=shortcuts&url=https://gist.githubusercontent.com/dschapman/6fcff4eeec1efa061cbe98cea6592e69/raw/bb0c2d597241910b79eb4a0b3259ada222d134eb/shortcuts.js\")\r\n\r\n```js\r\n// Name: Shortcuts\r\n// Description: Shortcut Launcher\r\n// Keyword: sc\r\n\r\nimport \"@johnlindquist/kit\";\r\nconst DB = home(\"Library\", \"Shortcuts\", \"Shortcuts.sqlite\");\r\nlet { default: sqlite3 } = await import(\"sqlite3\");\r\nlet { open } = await import(\"sqlite\");\r\n\r\nconst shortcuts_db = await open({ filename: DB, driver: sqlite3.Database });\r\nlet query = await shortcuts_db.all(\r\n  \"SELECT ZNAME,ZACTIONSDESCRIPTION,ZICON,ZBACKGROUNDCOLORVALUE,ZGLYPHNUMBER FROM ZSHORTCUT INNER JOIN ZSHORTCUTICON on ZSHORTCUTICON.Z_PK=ZICON\"\r\n);\r\n\r\n//Color mappings found https://github.com/atnbueno/Shortcuts-old\r\nconst colors = {\r\n  4282601983: { RGB: \"#F26369\", Gradient: \"#F36F74 #F2585E\" },\r\n  4251333119: { RGB: \"#FF8567\", Gradient: \"#FF8E73 #FF7C5C\" },\r\n  4271458815: { RGB: \"#F7A752\", Gradient: \"#F8AE5F #F7A145\" },\r\n  4274264319: { RGB: \"#E7C640\", Gradient: \"#E8CA45 #E5C238\" },\r\n  4292093695: { RGB: \"#45C95F\", Gradient: \"#53CD6B #37C553\" },\r\n  431817727: { RGB: \"#49CBAE\", Gradient: \"#57CFB4 #2AC7A8\" },\r\n  1440408063: { RGB: \"#51C8DC\", Gradient: \"#5ACCDE #3FC4D9\" },\r\n  463140863: { RGB: \"#12B4F6\", Gradient: \"#24BAF7 #00AFF6\" },\r\n  946986751: { RGB: \"#4A69C6\", Gradient: \"#5874CA #3D5EC2\" },\r\n  2071128575: { RGB: \"#8857C2\", Gradient: \"#9164C7 #7F4BBE\" },\r\n  3679049983: { RGB: \"#BB7BE4\", Gradient: \"#C085E6 #B671E2\" },\r\n  3980825855: { RGB: \"#F58BD5\", Gradient: \"#F694D8 #F583D2\" },\r\n  255: { RGB: \"#87919B\", Gradient: \"#9099A3 #7E8994\" },\r\n  3031607807: { RGB: \"#95A095\", Gradient: \"#9DA79D #8D998E\" },\r\n  2846468607: { RGB: \"#9D918C\", Gradient: \"#A49995 #968984\" },\r\n};\r\n\r\n// Glyphs names found https://github.com/atnbueno/Shortcuts-old, ChatGPT used to generate emojis\r\nconst glyphs = {\r\n  59452: \"🚗\",\r\n  61446: \"🚗\",\r\n  61447: \"🚗\",\r\n  59678: \"🚌\",\r\n  61448: \"🚌\",\r\n  61449: \"🚋\",\r\n  61450: \"🚇\",\r\n  59668: \"🚲\",\r\n  59652: \"🚑\",\r\n  59648: \"✈️\",\r\n  59755: \"🏠\",\r\n  59677: \"🏢\",\r\n  59828: \"🛒\",\r\n  61553: \"🛍️\",\r\n  59750: \"👜\",\r\n  59863: \"🍴\",\r\n  59741: \"⛽\",\r\n  59854: \"🌡️\",\r\n  59845: \"☀️\",\r\n  59782: \"🌙\",\r\n  61517: \"🌕\",\r\n  59835: \"❄️\",\r\n  59714: \"☁️\",\r\n  59715: \"🌧️\",\r\n  59861: \"☂️\",\r\n  59734: \"🔥\",\r\n  59669: \"🔭\",\r\n  59717: \"🧭\",\r\n  59412: \"🌍\",\r\n  59784: \"🏞️\",\r\n  59733: \"🎞️\",\r\n  59682: \"📷\",\r\n  59402: \"🎥\",\r\n  59780: \"🎤\",\r\n  59864: \"📹\",\r\n  59711: \"📋\",\r\n  59681: \"📆\",\r\n  59414: \"💬\",\r\n  59403: \"💬💬\",\r\n  59779: \"💬\",\r\n  59773: \"💌\",\r\n  59774: \"📬\",\r\n  59836: \"✈️\",\r\n  61462: \"🌐\",\r\n  59676: \"💼\",\r\n  61570: \"📂\",\r\n  61571: \"📂⚙️\",\r\n  59719: \"💳\",\r\n  59865: \"⌚\",\r\n  59814: \"📞\",\r\n  59436: \"💻\",\r\n  59446: \"⌨️\",\r\n  59680: \"🧮\",\r\n  59662: \"📊\",\r\n  59817: \"🖨️\",\r\n  59752: \"💽\",\r\n  59722: \"🖥️\",\r\n  59519: \"📦\",\r\n  59826: \"🗄️\",\r\n  59653: \"📚\",\r\n  59721: \"🧊\",\r\n  59851: \"📺\",\r\n  59742: \"🎮\",\r\n  59818: \"🧩\",\r\n  61552: \"🧩\",\r\n  59753: \"🎧\",\r\n  61479: \"🔘\",\r\n  61481: \"🦻\",\r\n  59790: \"🎵\",\r\n  59839: \"🔊\",\r\n  61470: \"🔊\",\r\n  61471: \"🔊\",\r\n  61472: \"🔇\",\r\n  61473: \"🔊\",\r\n  61478: \"🔊\",\r\n  61474: \"🔊\",\r\n  59671: \"📚\",\r\n  59465: \"📖\",\r\n  61442: \"📕\",\r\n  59745: \"👓\",\r\n  59788: \"🎫\",\r\n  59730: \"🎭\",\r\n  59723: \"🎲\",\r\n  59663: \"⚾\",\r\n  59664: \"🏀\",\r\n  59837: \"⚽\",\r\n  59456: \"🏈\",\r\n  59762: \"🛶\",\r\n  59756: \"🐎\",\r\n  59712: \"🕰️\",\r\n  59649: \"⏰\",\r\n  59844: \"⏱️\",\r\n  59667: \"🔔\",\r\n  59754: \"❤️\",\r\n  61577: \"❤️\",\r\n  61578: \"❤️❤️\",\r\n  59841: \"⭐\",\r\n  61579: \"⭐\",\r\n  61581: \"✨\",\r\n  59763: \"💡\",\r\n  59764: \"⚡\",\r\n  59736: \"🚩\",\r\n  59848: \"🏷️\",\r\n  59760: \"🔑\",\r\n  59757: \"⌛\",\r\n  59770: \"🔒\",\r\n  59862: \"🔓\",\r\n  59489: \"🔋\",\r\n  59511: \"✨\",\r\n  59771: \"🪄\",\r\n  59793: \"🖌️\",\r\n  59798: \"✏️\",\r\n  59794: \"📎\",\r\n  59824: \"✂️\",\r\n  59772: \"🔍\",\r\n  59685: \"🔗\",\r\n  59716: \"🎨\",\r\n  59748: \"🔨\",\r\n  59870: \"🔧\",\r\n  59743: \"⚙️\",\r\n  59825: \"🪛\",\r\n  59859: \"🗑️\",\r\n  59866: \"💧\",\r\n  59789: \"☕\",\r\n  59827: \"👕\",\r\n  59815: \"💊\",\r\n  59660: \"🩹\",\r\n  59843: \"🩺\",\r\n  61551: \"😷\",\r\n  59657: \"⚛️\",\r\n  59684: \"🐱\",\r\n  59728: \"🐶\",\r\n  61554: \"🐻\",\r\n  61555: \"🐯\",\r\n  61556: \"🐵\",\r\n  61557: \"🐏\",\r\n  61558: \"🐇\",\r\n  61559: \"🐍\",\r\n  61560: \"🐔\",\r\n  61561: \"🐖\",\r\n  61562: \"🐭\",\r\n  61563: \"🐄\",\r\n  61564: \"🐉\",\r\n  59651: \"👽\",\r\n  61565: \"👾\",\r\n  61566: \"🤖\",\r\n  61567: \"👻\",\r\n  61568: \"💩\",\r\n  61569: \"💀\",\r\n  59796: \"🐾\",\r\n  59746: \"🎓\",\r\n  59744: \"🎁\",\r\n  59666: \"🛏️\",\r\n  59822: \"🚀\",\r\n  61444: \"🗺️\",\r\n  61452: \"📏\",\r\n  61453: \"🚦\",\r\n  61454: \"🌡️\",\r\n  61455: \"🌐\",\r\n  61456: \"📚\",\r\n  61573: \"📚\",\r\n  61574: \"📚\",\r\n  61576: \"📚\",\r\n  61457: \"📚\",\r\n  61458: \"📚\",\r\n  61459: \"📚\",\r\n  61460: \"📷\",\r\n  61461: \"📝\",\r\n  61464: \"📝\",\r\n  61465: \"📝\",\r\n  61466: \"📝\",\r\n  61582: \"💬\",\r\n  61468: \"💬\",\r\n  61475: \"🎧\",\r\n  61476: \"🎧\",\r\n  61477: \"🎧\",\r\n  61480: \"📻\",\r\n  61482: \"📺\",\r\n  61483: \"🔊\",\r\n  61484: \"🌊\",\r\n  61486: \"📱\",\r\n  61487: \"📱\",\r\n  61488: \"📱\",\r\n  61489: \"📱\",\r\n  61490: \"📱\",\r\n  61491: \"📱\",\r\n  59806: \"♿\",\r\n  59801: \"🚶\",\r\n  59800: \"🚶‍♂️🚶‍♀️\",\r\n  59799: \"🚶‍♂️🚶‍♀️🚶‍♂️\",\r\n  59437: \"🚶\",\r\n  59812: \"🚶‍♂️\",\r\n  59808: \"🏃\",\r\n  61493: \"🏃\",\r\n  61494: \"🏃\",\r\n  61495: \"🎧\",\r\n  61496: \"🔍\",\r\n  61532: \"🧠\",\r\n  61533: \"🧠\",\r\n  61534: \"😀\",\r\n  61535: \"😄\",\r\n  61536: \"😆\",\r\n  61537: \"😂\",\r\n  61538: \"🤣\",\r\n  61539: \"😜\",\r\n  61540: \"😬\",\r\n  61541: \"😍\",\r\n  61542: \"😘\",\r\n  61543: \"😊\",\r\n  61544: \"😎\",\r\n  61545: \"😍\",\r\n  61546: \"🤖\",\r\n  59751: \"🖐️\",\r\n  61585: \"🖐️\",\r\n  59857: \"👍\",\r\n  61547: \"👍\",\r\n  61548: \"✌️\",\r\n  61549: \"🤟\",\r\n  61550: \"👊\",\r\n  61440: \"📲\",\r\n  59650: \"⚠️\",\r\n  59654: \"↩️\",\r\n  59655: \"↪️\",\r\n  59670: \"🔖\",\r\n  59661: \"📦\",\r\n  59819: \"📰\",\r\n  59508: \"▶️\",\r\n  59674: \"📦\",\r\n  59675: \"🔵\",\r\n  59696: \"↩️\",\r\n  59705: \"↪️\",\r\n  59693: \"⬇️\",\r\n  59707: \"⬆️\",\r\n  59692: \"⬇️\",\r\n  59708: \"⬆️\",\r\n  59699: \"▶️\",\r\n  59704: \"⏪\",\r\n  59702: \"⏸️\",\r\n  59706: \"⏹️\",\r\n  59695: \"⏭️\",\r\n  59703: \"❓\",\r\n  59690: \"✔️\",\r\n  59700: \"➕\",\r\n  59697: \"🔤\",\r\n  59834: \"😊\",\r\n  61589: \"❌\",\r\n  59725: \"📄\",\r\n  59395: \"💲\",\r\n  59448: \"💶\",\r\n  59512: \"£\",\r\n  59514: \"¥\",\r\n  59515: \"₿\",\r\n  59709: \"❌\",\r\n  59656: \"*️⃣\",\r\n  59727: \"📄\",\r\n  59791: \"📰\",\r\n  59739: \"🔲\",\r\n  59392: \"…\",\r\n  59445: \"📋\",\r\n  61587: \"✅\",\r\n  59405: \"🔲🔲\",\r\n  59758: \"♾️\",\r\n  59820: \"♻️\",\r\n  59767: \"🔄\",\r\n  59849: \"🎯\",\r\n  59816: \"🎙️\",\r\n  59768: \"📍\",\r\n  59769: \"📌\",\r\n  59795: \"🅿️\",\r\n  59720: \"🌾\",\r\n  59830: \"⬆️⬇️\",\r\n  59786: \"↖️↘️\",\r\n  59821: \"🔄\",\r\n  59846: \"🔄\",\r\n  59832: \"🔀\",\r\n  59833: \"🎚️\",\r\n  61583: \"💬\",\r\n  59797: \"✌️\",\r\n  59856: \"🟡\",\r\n  59853: \"🆎\",\r\n  61588: \"📦\",\r\n  59459: \"☁️☁️\",\r\n  59461: \"💊\",\r\n  59732: \"📰\",\r\n  59497: \"📰\",\r\n  59867: \"📶\",\r\n  61501: \"📲\",\r\n  61497: \"🚥\",\r\n  61498: \"🚥\",\r\n  61499: \"📶\",\r\n  61500: \"📶\",\r\n  61502: \"🎵\",\r\n  61503: \"🎵\",\r\n  61504: \"🎵\",\r\n  61505: \"🎵\",\r\n  61506: \"🎵\",\r\n  61507: \"🎵\",\r\n  61508: \"🎵\",\r\n  61509: \"🎵\",\r\n  61510: \"📅\",\r\n  61511: \"📅\",\r\n  61512: \"⏲️\",\r\n  61513: \"⏲️\",\r\n  61514: \"📝\",\r\n  61515: \"📝\",\r\n  61518: \"🌞\",\r\n  61519: \"💡\",\r\n  61520: \"⏬\",\r\n  61521: \"⏫\",\r\n  61522: \"📷\",\r\n  61523: \"📷\",\r\n  61524: \"💼\",\r\n  61525: \"🌅\",\r\n  61528: \"🚫\",\r\n  61529: \"🔘\",\r\n  61530: \"⭕\",\r\n  61531: \"🔲\",\r\n  59781: \"✍️\",\r\n};\r\n\r\nlet shortcuts = query.map((shortcut) => {\r\n  let glyph = glyphs[shortcut.ZGLYPHNUMBER];\r\n  let name = shortcut.ZNAME;\r\n  let value = shortcut.ZNAME;\r\n  let html = `<div class=\"flex flex-row h-full w-full\">\r\n  <svg width=48 height=48 class=\"h-full\" style=\"background-color:${\r\n    colors[shortcut.ZBACKGROUNDCOLORVALUE]?.RGB\r\n  }\"><text x=12 y=36 font-size=24>${glyph}</text></svg>        \r\n  <div class=\"flex-1 flex flex-row items-center px-2\">${name}</div>\r\n</div>`;\r\n  return { name, value, html };\r\n});\r\n\r\nlet flags = {\r\n  view: {\r\n    name: \"View in Shortcuts\",\r\n  },\r\n  run: {\r\n    name: \"Run Shortcut\",\r\n  },\r\n};\r\n\r\nlet shortcut = await arg(\r\n  { prompt: \"Which shortcut would you like to run?\", flags },\r\n  shortcuts\r\n);\r\nawait hide();\r\n\r\nif (flag?.view) {\r\n  await exec(`/usr/bin/shortcuts view \"${shortcut.trim()}\"`);\r\n} else {\r\n  let result = await exec(`/usr/bin/shortcuts run \"${shortcut.trim()}\" &`);\r\n  if (result?.stdout) await div(md(`## Output:\\n\\n${result.stdout}`));\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-09-04T00:25:49Z"},{"name":"Filter Scripts","shortcut":"opt 7","cache":"true","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":"johnlindquist","discussion":"https://github.com/johnlindquist/kit/discussions/1331","url":"https://gist.githubusercontent.com/johnlindquist/cc108bf018b67a0116e1b8dde95c7280/raw/070bda9b7e16cc9d56eeff330961fdc1df84ed73/filter-scripts.ts","title":"List Scripts of Specific Kenv","command":"list-scripts-of-specific-kenv","content":"\r\n[Open filter-scripts in Script Kit](https://scriptkit.com/api/new?name=filter-scripts&url=https://gist.githubusercontent.com/johnlindquist/cc108bf018b67a0116e1b8dde95c7280/raw/070bda9b7e16cc9d56eeff330961fdc1df84ed73/filter-scripts.ts\")\r\n\r\n```js\r\n// Name: Filter Scripts\r\n// Shortcut: opt 7\r\n// Cache: true\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet kenv = \"kit-examples\"\r\n\r\nlet scripts = (await getScripts()).filter(script => script.kenv === kenv)\r\n\r\nlet script = await arg(\"Run Script\", scripts)\r\n\r\nawait run(script.filePath)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-08-20T19:22:54Z"},{"name":"Expand TS","author":"Nauris Pūķis","twitter":"pyronaur","shortcut":"cmd+shift+e","avatar":"https://avatars.githubusercontent.com/u/988095?u=d3a3cc84565dadde5ad7120646533ec951b2ab20&v=4","user":"pyronaur","discussion":"https://github.com/johnlindquist/kit/discussions/1330","url":"","title":"Snippets on Steroids","command":"snippets-on-steroids","content":"**Summary**\r\nScriptKit now has snippets built-in, but they're lacking a couple of powerful features at the moment.\r\n\r\nSo I built this addon to handle the selection, cursor, clipboard, and `evil` script `eval()`:\r\n\r\n\r\nHere's an example snippet that's going to replace the selection with a script tag and set variables based on clipboard and ScriptKit input:\r\n```ts\r\n// Name: Expand TS\r\n<script lang=\"ts\">\r\n\t$SELECTION$\r\n\t$CURSOR$\r\n\tconst argument = '$$arg(\"Anything to say?\")$$';\r\n\tconst clipboard = '$CLIPBOARD$';\r\n\tconst number = '$$arg(\"What is the magic number?\", ['42', '7', '8'])$$';\r\n</script>\r\n```\r\n\r\nIf you like the script, [retweet it](https://twitter.com/pyronaur/status/1693219818843918359) 😇\r\n\r\n## Script:\r\n\r\n```ts\r\n// Name: Snippets on Steroids\r\n// Author: pyronaur\r\n// Twitter: @pyronaur\r\n// Shortcut: cmd+shift+e\r\n/**\r\n * This script expands a given snippet and replaces placeholders with their respective values.\r\n * \r\n * ## Placeholders\r\n * - $CURSOR$ - set the cursor position in the snippet after it's expanded.\r\n * - $SELECTION$ - insert the currently selected text within the snippet.\r\n * - $CLIPBOARD$ - insert the current clipboard text within the snippet.\r\n * \r\n * ## Code Evaluation\r\n * You can place any JavaScript code within $$...$$ and it will be evaluated and replaced with the result.\r\n * \r\n * For example:\r\n *    The code inside the $$...$$ will be executed and the result will replace the placeholder.\r\n *    Example:\r\n *    ```\r\n *    const clipboard = '$$clipboard.readText()$$';\r\n *    const date = '$$new Date().toLocaleDateString()$$';\r\n *    const number = '$$arg(\"What is the magic number?\", ['42', '7', '8'])$$';\r\n *    ```\r\n * Note:\r\n * The script execution is potentially dangerous and should be enabled with caution.\r\n * You have to enable it by setting the `I_AM_THE_DANGER` variable to `true`.\r\n */\r\nimport \"@johnlindquist/kit\"\r\nimport { Choice } from '@johnlindquist/kit';\r\n\r\nconst { globby } = await npm(\"globby\");\r\nconst snippet_path = kenvPath('snippets');\r\n\r\n// 🔴 DANGER 🔴\r\n// SETTING THIS TO TRUE ALLOW ANY SCRIPT TO BE EXECUTED BY SNIPPETS\r\nconst I_AM_THE_DANGER = false;\r\n\r\nasync function dangerous_evil_parse(content: string) {\r\n\tconst evil_regex = /\\$\\$(.*?)\\$\\$/g;\r\n\tlet match;\r\n\tlet matches = [];\r\n\twhile ((match = evil_regex.exec(content)) !== null) {\r\n\t\tmatches.push(match);\r\n\t}\r\n\tfor (let match of matches) {\r\n\t\tconst script = match[1];\r\n\t\tconst result = I_AM_THE_DANGER ? await eval(script) : ''; // 🎩 😎\r\n\t\tcontent = content.replace(`$$${script}$$`, result);\r\n\t}\r\n\r\n\treturn content;\r\n}\r\n\r\n// Find $CURSOR$ and set cursor position\r\nasync function set_with_cursor(content: string) {\r\n\tconst cursor_index = content.indexOf('$CURSOR$');\r\n\tif (cursor_index === -1) {\r\n\t\treturn false;\r\n\t}\r\n\t// Remove $$CURSOR$$\r\n\tcontent = content.replace('$CURSOR$', '');\r\n\tawait setSelectedText(content);\r\n\t// There's some async weirdness here\r\n\t// so we'll just wait 100ms\r\n\tawait new Promise(resolve => setTimeout(resolve, 100));\r\n\tconst target_cursor_position = content.length - cursor_index;\r\n\tconst keystrokes = [];\r\n\tfor (let i = 0; i < target_cursor_position; i++) {\r\n\t\tkeystrokes.push(keystroke('left'));\r\n\t}\r\n\tawait Promise.all(keystrokes);\r\n\treturn true;\r\n}\r\n\r\nfunction files_to_choices(files: string[]): Choice[] {\r\n\treturn files.map(file => ({\r\n\t\tname: path.basename(file, '').split('.')[0],\r\n\t\tvalue: file\r\n\t}));\r\n}\r\n\r\nasync function get_snippet_files() {\r\n\t// Untested attempt to fix windows paths (I don't have a windows machine)\r\n\tconst snippet_files = await globby(`${snippet_path}/*`);\r\n\tif (process.platform == 'win32') {\r\n\t\treturn snippet_files;\r\n\t}\r\n\treturn snippet_files.map(file => file.replace(/\\\\/g, '/'));\r\n}\r\n\r\nasync function get_content(snippet: string) {\r\n\tconst snippet_content = await readFile(snippet, 'utf8');\r\n\tconst snippet_lines = snippet_content.split('\\n')\r\n\r\n\t// Remove comments and empty lines until first line of snippet\r\n\treturn snippet_lines\r\n\t\t.slice(snippet_lines.findIndex(line => !line.startsWith('//')))\r\n\t\t.join('\\n');\r\n}\r\n\r\nasync function insert_selection(content: string) {\r\n\tif (content.includes('$SELECTION$') === false) {\r\n\t\treturn content;\r\n\t}\r\n\tconst selection = await getSelectedText();\r\n\tcontent = content.replace('$SELECTION$', selection);\r\n\treturn content;\r\n}\r\n\r\nasync function insert_clipboard(content: string) {\r\n\tif (content.includes('$CLIPBOARD$') === false) {\r\n\t\treturn content;\r\n\t}\r\n\tconst text = await clipboard.readText();\r\n\tcontent = content.replace('$CLIPBOARD$', text);\r\n\treturn content;\r\n}\r\n\r\n\r\n\r\n// 🚀 Go!\r\nconst snippet_file = await arg(\"Which snippet?\", files_to_choices(await get_snippet_files()));\r\nlet content = await get_content(snippet_file);\r\ncontent = await insert_selection(content);\r\ncontent = await insert_clipboard(content);\r\ncontent = await dangerous_evil_parse(content);\r\nif (!(await set_with_cursor(content))) {\r\n\tawait setSelectedText(content);\r\n}\r\n```\r\n\r\nProps @johnlindquist for helpful pointers 👍","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-08-20T09:43:40Z"},{"avatar":"https://avatars.githubusercontent.com/u/91077547?u=912b5cbbf037a7082ac71e829d74641975d545ff&v=4","user":"MartinLednar","author":"Martin Lednár","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1327","url":"","title":"Jira monthly time logger","command":"jira-monthly-time-logger","content":"# About\r\n\r\nLog tasks you worked on and the total hours you worked for current month into jira.\r\n\r\n- [Gist link](https://gist.githubusercontent.com/MartinLednar/3e3b0e8b23c92734bf946662a4f4b502/raw/c3930a933abe4760a11a555a12db4eb432ebc231/jira-monthly-time-logger.ts)\r\n- [Download link](https://scriptkit.com/api/new?name=jira-monthly-time-logger&url=https://gist.githubusercontent.com/MartinLednar/d702e7993415b04f9e85fd29b910e0cd/raw/c3930a933abe4760a11a555a12db4eb432ebc231/jira-monthly-time-logger.ts)\r\n\r\n\r\n<img width=\"819\" alt=\"Snímka obrazovky 2023-08-10 o 14 18 59\" src=\"https://github.com/johnlindquist/kit/assets/91077547/786fa372-fc5e-4c17-abcd-ccda95355265\">\r\n<img width=\"819\" alt=\"Snímka obrazovky 2023-08-10 o 14 18 23\" src=\"https://github.com/johnlindquist/kit/assets/91077547/a1a9c521-4730-4229-a129-98e0f8687540\">\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-08-09T13:12:04Z"},{"name":"tmux sesh","description":"","author":"Lazar Nikolov","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/5396211?u=68d8e03dc65744a31a9a10dad5731dd79d5eaa56&v=4","user":"nikolovlazar","discussion":"https://github.com/johnlindquist/kit/discussions/1326","url":"","title":"Attach to tmux session with Kitty terminal","command":"attach-to-tmux-session-with-kitty-terminal","content":"### Prerequisites:\r\n1. Install [Kitty](https://sw.kovidgoyal.net/kitty/)\r\n2. Add `kitty` to `PATH`: `sudo ln -s /Applications/kitty.app/Contents/MacOS/kitty /usr/local/bin/kitty` (assuming `/usr/local/bin` is in your `PATH`)\r\n3.  Kit: `Sync $PATH from Terminal to Kit.app`\r\n\r\n<img width=\"880\" alt=\"CleanShot 2023-08-08 at 11 02 41@2x\" src=\"https://github.com/johnlindquist/kit/assets/5396211/0be488c3-1176-4a7b-ad4d-7fac3b326e7a\">\r\n\r\n\r\n\r\n[Open tmux-sesh in Script Kit](https://scriptkit.com/api/new?name=tmux-sesh&url=https://gist.githubusercontent.com/nikolovlazar/21a78f492e117a5e0dca1685cb668f4d/raw/94e44f60ef8807250f365b996b610d8bb05fd311/tmux-sesh.js\")\r\n\r\n```js\r\n// Name: tmux sesh\r\n// Description: Attach to a tmux session\r\n// Author: Lazar Nikolov\r\n// Twitter: @NikolovLazar\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nconst sessionsCmd = await $`tmux list-sessions`;\r\n\r\nlet sessions = sessionsCmd.stdout\r\n  .split('\\n')\r\n  .map((line) => line.split(':')[0])\r\n  .filter((sesh) => !!sesh);\r\n\r\nlet choice = await arg('Attach to session:', sessions);\r\n\r\nawait $`kitty --hold sh -c \"tmux a -t ${choice}\"`;\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-08-08T14:35:41Z"},{"name":"Reveal password","shortcut":"cmd *","avatar":"https://avatars.githubusercontent.com/u/76580?v=4","user":"abernier","author":"Antoine BERNIER","twitter":"abernier_","discussion":"https://github.com/johnlindquist/kit/discussions/1322","url":"https://gist.githubusercontent.com/abernier/582e1458195ec34268305298e4b3b86b/raw/reveal-password.%25E2%2596%25B6.ts","title":"Reveal password","command":"reveal-password","content":"[Open `reveal-password` in Script Kit](https://scriptkit.com/api/new?name=revealpassword&url=https://gist.githubusercontent.com/abernier/582e1458195ec34268305298e4b3b86b/raw/reveal-password.%25E2%2596%25B6.ts)\r\n\r\n`| *******       |` <kbd>cmd *</kbd> → `| toto123       |`\r\n\r\n```ts\r\n// Name: Reveal password\r\n// Shortcut: cmd *\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nlet js = `\r\ndocument.activeElement.type = document.activeElement.type === 'password' ? 'text' : 'password';\r\n`;\r\n\r\nlet value = await applescript(`\r\ntell application \"Google Chrome\" to tell window 1\r\n\tget execute active tab javascript \"\r\n\r\n${js}\r\n\r\n\"\r\nend tell\r\n`);\r\n```\r\n-- https://gist.github.com/abernier/582e1458195ec34268305298e4b3b86b","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-07-31T06:08:58Z"},{"menu":"Gather Guest List","description":"","author":"Kent C. Dodds","twitter":"kentcdodds","avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/1310","url":"https://gist.githubusercontent.com/kentcdodds/592bd3aebb51971c3a968954ede061f6/raw/5bc5d065782e50f269c5ed9090976722fae50140/gather-guest.ts","title":"Gather Town Guest Management","command":"gather-town-guest-management","content":"I use this script to manage who has access to join my [Gather.town](https://gather.town) space, so I don't have to manually approve folks joining, they don't need me to be there to join, and they can only access it if they're logged in and are on the list (they've purchased a ticket).\r\n\r\nVery cool thing I can throw together to solve my problems in an hour.\r\n\r\nFind the most up-to-date version in my repo: https://github.com/kentcdodds/.kenv/blob/main/scripts/gather-guest.ts\r\n\r\n\r\n[Open gather-guest in Script Kit](https://scriptkit.com/api/new?name=gather-guest&url=https://gist.githubusercontent.com/kentcdodds/592bd3aebb51971c3a968954ede061f6/raw/5bc5d065782e50f269c5ed9090976722fae50140/gather-guest.ts\")\r\n\r\n```js\r\n// Menu: Gather Guest List\r\n// Description: Handle the Guest List for Gather\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nimport '@johnlindquist/kit'\r\nimport {z} from 'zod'\r\n\r\nconst GuestObjectSchema = z.object({\r\n  name: z.string().optional(),\r\n  affiliation: z.string().optional(),\r\n  role: z.string().optional(),\r\n})\r\nconst GuestsSchema = z.record(z.string().email(), GuestObjectSchema)\r\n\r\nconst GATHER_API_KEY = await env('GATHER_API_KEY', async () => {\r\n  return await arg(\r\n    {\r\n      placeholder: 'GATHER_API_KEY',\r\n      ignoreBlur: true,\r\n    },\r\n    () =>\r\n      md(`\r\n# Get a Gather API Key\r\n\r\n[app.gather.town/apikeys](https://app.gather.town/apikeys)\r\n    `),\r\n  )\r\n})\r\n\r\nconst GATHER_SPACE_ID = await env('GATHER_SPACE_ID', async () => {\r\n  return await arg(\r\n    {\r\n      placeholder: 'GATHER_SPACE_ID',\r\n      ignoreBlur: true,\r\n    },\r\n    () =>\r\n      md(`\r\n# Specify the Gather Space ID\r\n\r\nIt's everything after \"app/\" in this URL with \"/\" replaced by \"\\\\\":\r\n\r\nhttps://app.gather.town/app/BL0B93FK23T/example\r\n    `),\r\n  )\r\n})\r\n\r\nasync function go() {\r\n  const params = new URLSearchParams({\r\n    apiKey: GATHER_API_KEY,\r\n    spaceId: GATHER_SPACE_ID,\r\n  })\r\n  const rawGuests = await fetch(\r\n    `https://gather.town/api/getEmailGuestlist?${params}`,\r\n  ).then(r => r.json())\r\n\r\n  const guests = GuestsSchema.parse(rawGuests)\r\n  const choices = [\r\n    {name: '➕ Add a guest', value: {type: 'add-guest'}},\r\n    ...Object.entries(guests).map(([email, {name, affiliation, role}]) => ({\r\n      name: `${email} (${name?.trim() || 'Unnamed'}, ${\r\n        affiliation?.trim() || 'Unaffiliated'\r\n      }, ${role?.trim() || 'No role'})`,\r\n      value: {type: 'modify-guest', email},\r\n    })),\r\n  ]\r\n  const rawSelection = await arg(\r\n    {placeholder: 'Which guest would you like to modify?'},\r\n    choices,\r\n  )\r\n  const SelectionSchema = z.union([\r\n    z.object({\r\n      type: z.literal('add-guest'),\r\n    }),\r\n    z.object({\r\n      type: z.literal('modify-guest'),\r\n      email: z.string(),\r\n    }),\r\n  ])\r\n  const selection = SelectionSchema.parse(rawSelection)\r\n  switch (selection.type) {\r\n    case 'add-guest': {\r\n      await addGuest()\r\n      return go()\r\n    }\r\n    case 'modify-guest': {\r\n      await modifyGuest(selection.email, guests)\r\n      return go()\r\n    }\r\n  }\r\n}\r\n\r\nasync function addGuest() {\r\n  const email = z\r\n    .string()\r\n    .email()\r\n    .parse(await arg({placeholder: `What's the guests' email?`}))\r\n  const body = {\r\n    apiKey: GATHER_API_KEY,\r\n    spaceId: GATHER_SPACE_ID,\r\n    guestlist: {[email]: {}},\r\n  }\r\n  const updateResponse = await fetch(\r\n    'https://api.gather.town/api/setEmailGuestlist',\r\n    {\r\n      method: 'POST',\r\n      body: JSON.stringify(body),\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n    },\r\n  )\r\n  const update = await updateResponse.json()\r\n  console.log('Guest Update: ', update[email])\r\n}\r\n\r\nasync function modifyGuest(\r\n  email: string,\r\n  guests: z.infer<typeof GuestsSchema>,\r\n) {\r\n  const guest = guests[email]\r\n  const action = await arg({placeholder: `What would you like to do?`}, [\r\n    {name: 'Remove Guest', value: 'remove'},\r\n    {name: `Change Guest Email (${email})`, value: 'change-email'},\r\n    {\r\n      name: `Change Guest Name (${guest.name?.trim() || 'Unnamed'})`,\r\n      value: 'change-name',\r\n    },\r\n    {\r\n      name: `Change Guest Affiliation (${\r\n        guest.affiliation?.trim() || 'Unaffiliated'\r\n      })`,\r\n      value: 'change-affiliation',\r\n    },\r\n    {\r\n      name: `Change Guest Role (${guest.role?.trim() || 'No role'})`,\r\n      value: 'change-role',\r\n    },\r\n    {\r\n      name: `Cancel`,\r\n      value: 'cancel',\r\n    },\r\n  ])\r\n  switch (action) {\r\n    case 'remove': {\r\n      delete guests[email]\r\n      break\r\n    }\r\n    case 'change-email': {\r\n      const newEmail = z\r\n        .string()\r\n        .email()\r\n        .parse(await arg({placeholder: 'New Email'}))\r\n      guests[newEmail] = guests[email]\r\n      delete guests[email]\r\n      email = newEmail\r\n      break\r\n    }\r\n    case 'change-name': {\r\n      const newName = await arg({placeholder: 'New Name'})\r\n      if (newName) {\r\n        guests[email].name = newName\r\n      } else {\r\n        delete guests[email].name\r\n      }\r\n      break\r\n    }\r\n    case 'change-affiliation': {\r\n      const newAffiliation = await arg({\r\n        placeholder: 'New Affiliation',\r\n      })\r\n      if (newAffiliation) {\r\n        guests[email].affiliation = newAffiliation\r\n      } else {\r\n        delete guests[email].affiliation\r\n      }\r\n      break\r\n    }\r\n    case 'change-role': {\r\n      const newRole = await arg({placeholder: 'New Role'})\r\n      if (newRole) {\r\n        guests[email].role = newRole\r\n      } else {\r\n        delete guests[email].role\r\n      }\r\n      break\r\n    }\r\n    case 'cancel': {\r\n      return go()\r\n    }\r\n  }\r\n  const body = {\r\n    apiKey: GATHER_API_KEY,\r\n    spaceId: GATHER_SPACE_ID,\r\n    guestlist: guests,\r\n    overwrite: true,\r\n  }\r\n  const updateResponse = await fetch(\r\n    'https://api.gather.town/api/setEmailGuestlist',\r\n    {\r\n      method: 'POST',\r\n      body: JSON.stringify(body),\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n    },\r\n  )\r\n  const update = await updateResponse.json()\r\n  console.log('Guest Update: ', update[email])\r\n}\r\n\r\ngo()\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-07-13T19:05:44Z"},{"name":"Correct selection","description":"","author":"Ivan Rybnikov","twitter":"ivryb","shortcut":"cmd option g","avatar":"https://avatars.githubusercontent.com/u/13164347?u=15ba49c9b5dca77c66dfe09c666dc7427a2a4ef6&v=4","user":"ivryb","discussion":"https://github.com/johnlindquist/kit/discussions/1309","url":"","title":"Correct selection with ChatGPT","command":"correct-selection-with-chatgpt","content":"[Open Correct selection with ChatGPT in Script Kit](https://scriptkit.com/api/new?name=Correct%20selection%20with%20ChatGPT&url=https://gist.githubusercontent.com/ivryb/646da11d9a5dbb2151a2053c4d510dd0/raw/8f9b16dd5c636ef6192c12b037ad80f7d84d0193/correct-selection-script.js)\r\n\r\n```js\r\n/*\r\n# Correct selection with ChatGPT\r\n\r\nFix grammar and spelling mistakes in any text field.\r\n\r\nHighlight some text and press `cmd+option+g` to send it through ChatGPT to replace the text response.\r\n*/\r\n\r\n// Name: Correct selection\r\n// Description: Fix grammar and spelling mistakes in any text field.\r\n// Author: Evan Fisher\r\n// Twitter: @ivryb\r\n// Shortcut: cmd option g\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nimport Bottleneck from 'bottleneck';\r\n\r\nimport { createChat } from 'completions';\r\n\r\nconst openAiKey = await env('OPENAI_API_KEY', {\r\n  hint: `Grab a key from <a href=\"https://platform.openai.com/account/api-keys\">here</a>`,\r\n});\r\n\r\nconst chat = createChat({\r\n  apiKey: openAiKey,\r\n  model: 'gpt-3.5-turbo',\r\n});\r\n\r\nconst correctionPrompt = (text) =>\r\n  `Please fix the grammar and spelling of the following text and return it without any other changes: ###${text}###`;\r\n\r\nconst limiter = new Bottleneck({\r\n  maxConcurrent: 1,\r\n  minTime: 100,\r\n});\r\n\r\nconst type = (text) => {\r\n  return new Promise((resolve) => {\r\n    keyboard.type(text);\r\n    resolve();\r\n  });\r\n};\r\n\r\nconst wrappedType = limiter.wrap(type);\r\n\r\nconst text = await getSelectedText();\r\n\r\nif (text) {\r\n  await chat.sendMessage(correctionPrompt(text), {\r\n    onUpdate: async ({ message }) => {\r\n      const content = message.choices[0]?.delta?.content;\r\n\r\n      if (content) {\r\n        wrappedType(content);\r\n      }\r\n    },\r\n  });\r\n}\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-07-13T12:30:37Z"},{"name":"tiktok-images","description":"","author":"Trevor Atlas","twitter":"trevoratlas","threads":"trevor.atlas","avatar":"https://avatars.githubusercontent.com/u/5009188?u=5d3c53983b738f8c9dba91ca5c0294fadc9a5460&v=4","user":"trevor-atlas","discussion":"https://github.com/johnlindquist/kit/discussions/1308","url":"https://gist.githubusercontent.com/trevor-atlas/9bc38697613660a228d89f45c5d5ead9/raw/cdbfee11f395fdf8fdaedacfafbb555a1db9bd65/tiktok-images.ts","title":"Resize and composite images for tiktok","command":"resize-and-composite-images-for-tiktok","content":"\r\n[Open tiktok-images in Script Kit](https://scriptkit.com/api/new?name=tiktok-images&url=https://gist.githubusercontent.com/trevor-atlas/9bc38697613660a228d89f45c5d5ead9/raw/cdbfee11f395fdf8fdaedacfafbb555a1db9bd65/tiktok-images.ts\")\r\n\r\n```js\r\n// Name: tiktok-images\r\n// Description: Resize images to fit TikTok's 9:16 aspect ratio and avoid being covered by the UI\r\n// Author: Trevor Atlas\r\n// Twitter: @trevoratlas\r\n// Threads: trevor.atlas\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst sharp = await npm('sharp');\r\nconst { getAverageColor } = await npm('fast-average-color-node');\r\n\r\nconst width = 1440;\r\nconst height = 2400;\r\nconst density = 72;\r\nconst scale = .8;\r\nconst validTypes = new Set(['image/png', 'image/jpeg', 'image/jpg']);\r\nconst outputPath = path.join(home(), 'Desktop', 'resized-images');\r\n\r\nasync function processImage(imageFilepath: string) {\r\n  try {\r\n    const averageColor = await getAverageColor(imageFilepath);\r\n    const image = await sharp(imageFilepath)\r\n      .withMetadata({ density })\r\n      .resize({ fit: 'inside', width: Math.floor(width * scale), height: Math.floor(height * scale) })\r\n      .png({ quality: 100 })\r\n\r\n      .toBuffer();\r\n\r\n    const color = averageColor.hex || 'black';\r\n\r\n    // Add a matching background\r\n    const background = await sharp({\r\n      create: {\r\n        channels: 4,\r\n        background: color,\r\n        width,\r\n        height,\r\n      },\r\n    })\r\n    .withMetadata({ density })\r\n    .png({ quality: 100})\r\n    .toBuffer();\r\n\r\n\r\n    const res = await sharp(background)\r\n      .composite([{ input: image, gravity: 'centre' }])\r\n      .png({ quality: 100 })\r\n      .toBuffer();\r\n\r\n    return res;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\ninterface FileInfo {\r\n  lastModified: number;\r\n  lastModifiedDate: string;//\"2023-07-12T17:35:13.573Z\"\r\n  name: string;\r\n  path: string;//\"/Users/uname/Desktop/screenshots/Screenshot 2022-01-12 at 1.35.08 PM.png\"\r\n  size: number;\r\n  type: string;//\"image/png\"\r\n  webkitRelativePath: string;\r\n}\r\n\r\n\r\ntry {\r\n  const fileInfos: FileInfo[] = await drop('Drop images to resize');\r\n  const imagePaths = fileInfos\r\n    .filter(({type}) => validTypes.has(type))\r\n    .map(fileInfo => fileInfo.path);\r\n\r\n  if (!imagePaths.length) {\r\n    await notify('No valid images found. Supports .png, .jpg, and .jpeg');\r\n    exit();\r\n  }\r\n\r\n  await ensureDir(outputPath);\r\n\r\n  for (const imagePath of imagePaths) {\r\n    const image = await processImage(imagePath);\r\n    const [filename] = path.basename(imagePath).split('.');\r\n    const finalPath = path.join(outputPath, `${filename}-processed.png`);\r\n    await writeFile(finalPath, image);\r\n    console.log(`Resized ${finalPath}`);\r\n  }\r\n\r\n  await notify('Image(s) resized');\r\n} catch (error) {\r\n  console.error(error);\r\n  await notify('Error resizing images. Check the log for details.');\r\n}\r\n\r\nawait open(outputPath);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-07-12T22:37:36Z"},{"name":"Correct selection","description":"","author":"Ivan Rybnikov","twitter":"ivryb","shortcut":"cmd option g","avatar":"https://avatars.githubusercontent.com/u/13164347?u=15ba49c9b5dca77c66dfe09c666dc7427a2a4ef6&v=4","user":"ivryb","discussion":"https://github.com/johnlindquist/kit/discussions/1307","url":"","title":"Correct selection with ChatGPT","command":"correct-selection-with-chatgpt","content":"[Install \"Correct selection with ChatGPT\" to Script Kit](https://scriptkit.com/api/new?name=Correct%20selection%20with%20ChatGPT&url=https://gist.githubusercontent.com/ivryb/9f63a1881b1827773682cdf7e404b05c/raw/9bce6cdf6dc54497f6d7020807fc1cc6bf405131/correct-selection.js)\r\n\r\n```js\r\n/*\r\n# Correct selection with ChatGPT\r\n\r\nFix grammar and spelling mistakes in any text field.\r\n\r\nHighlight some text and press `cmd+option+g` to send it through ChatGPT to replace the text response.\r\n*/\r\n\r\n// Name: Correct selection\r\n// Description: Fix grammar and spelling mistakes in any text field.\r\n// Author: Evan Fisher\r\n// Twitter: @ivryb\r\n// Shortcut: cmd option g\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nimport Bottleneck from 'bottleneck';\r\n\r\nimport { createChat } from 'completions';\r\n\r\nconst openAiKey = await env('OPENAI_API_KEY', {\r\n  hint: `Grab a key from <a href=\"https://platform.openai.com/account/api-keys\">here</a>`,\r\n});\r\n\r\nconst chat = createChat({\r\n  apiKey: openAiKey,\r\n  model: 'gpt-3.5-turbo',\r\n});\r\n\r\nconst correctionPrompt = (text) =>\r\n  `Please fix the grammar and spelling of the following text and return it without any other changes: ###${text}###`;\r\n\r\nconst limiter = new Bottleneck({\r\n  maxConcurrent: 1,\r\n  minTime: 100,\r\n});\r\n\r\nconst type = (text) => {\r\n  return new Promise((resolve) => {\r\n    keyboard.type(text);\r\n    resolve();\r\n  });\r\n};\r\n\r\nconst wrappedType = limiter.wrap(type);\r\n\r\nconst text = await getSelectedText();\r\n\r\nif (text) {\r\n  await chat.sendMessage(correctionPrompt(text), {\r\n    onUpdate: async ({ message }) => {\r\n      const content = message.choices[0]?.delta?.content;\r\n\r\n      if (content) {\r\n        wrappedType(content);\r\n      }\r\n    },\r\n  });\r\n}\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-07-12T17:02:06Z"},{"name":"Decode Base64","description":"","author":null,"avatar":"https://avatars.githubusercontent.com/u/67016683?u=570ce84e1552b64080e22f8e347275e052928350&v=4","user":"ElTacitos","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1303","url":"","title":"Decode a base64 string","command":"decode-a-base64-string","content":"Everything is in the title of this post, this script will allow you to decode a base64 string.\r\n\r\n[Open base64-decode in Script Kit](https://scriptkit.com/api/new?name=base64-decode&url=https://gist.githubusercontent.com/ElTacitos/8eaa571a6026383c9ce71e593e31b598/raw/6aa4a043a4458b980111bfb76ebe0b435d90a524/base64-decode.js\")\r\n\r\n```js\r\n// Name: Decode Base64\r\n// Description: Decode a base64 string and copy it to the clipboard\r\n// Author: ElTacitos\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet base64 = await arg(\"Enter base64 string to decode\")\r\nlet decoded = atob(base64)\r\n\r\nawait clipboard.writeText(decoded)\r\nawait div(md(`\r\n# ${decoded}\r\n`))\r\n\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-07-10T10:09:08Z"},{"menu":"De-Acronym-ify","description":"","author":"Trevor Atlas","twitter":"trevoratlas","shortcut":"cmd ctrl opt shift a","group":"work","avatar":"https://avatars.githubusercontent.com/u/5009188?u=5d3c53983b738f8c9dba91ca5c0294fadc9a5460&v=4","user":"trevor-atlas","discussion":"https://github.com/johnlindquist/kit/discussions/1296","url":"https://gist.githubusercontent.com/trevor-atlas/992682a54fa4ec44ccc8cc58e889e026/raw/f4ec3016bd7f8b1af4be65a64f3d500c19231e71/de-acronym.ts","title":"Replace user-defined acronyms with the full text","command":"replace-user-defined-acronyms-with-the-full-text","content":"\r\n[Open de-acronym in Script Kit](https://scriptkit.com/api/new?name=de-acronym&url=https://gist.githubusercontent.com/trevor-atlas/992682a54fa4ec44ccc8cc58e889e026/raw/f4ec3016bd7f8b1af4be65a64f3d500c19231e71/de-acronym.ts\")\r\n\r\n```js\r\n// Menu: De-Acronym-ify\r\n// Description: Replace acronyms with their full names\r\n// Author: Trevor Atlas\r\n// Twitter: @trevoratlas\r\n// Shortcut: cmd ctrl opt shift a\r\n// Group: work\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nlet text = '';\r\nconst clipboardValue = await paste();\r\nconst selection = await getSelectedText();\r\n\r\nif (selection) {\r\n  text = selection;\r\n  console.log('use selection', selection);\r\n}\r\n\r\nif (clipboardValue && !selection) {\r\n  text = clipboardValue;\r\n  console.log('use clipboard', text);\r\n}\r\n\r\nif (!text) {\r\n  text = await arg('Enter text to de-acronym-ify');\r\n  console.log('use prompt', text);\r\n}\r\n\r\nconst acronyms: Array<[string | RegExp, string]> = [\r\n  ['PD', 'Product Design'],\r\n  ['PM', 'Product Management'],\r\n  ['JS', 'JavaScript'],\r\n  ['TS', 'TypeScript'],\r\n];\r\n\r\nconst result = acronyms.reduce(\r\n  (acc, [acronym, expansion]) => acc.replace(acronym, expansion),\r\n  text\r\n);\r\n\r\nif (!selection) {\r\n  copy(result);\r\n} else {\r\n  await setSelectedText(result);\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-30T20:35:34Z"},{"name":"humanlike typing","description":"","author":"Trevor Atlas","twitter":"trevoratlas","avatar":"https://avatars.githubusercontent.com/u/5009188?u=5d3c53983b738f8c9dba91ca5c0294fadc9a5460&v=4","user":"trevor-atlas","discussion":"https://github.com/johnlindquist/kit/discussions/1295","url":"https://gist.githubusercontent.com/trevor-atlas/17746a243dd9bbfa8062d8fb86b5fc20/raw/45b2a5cb769b76db73f70579edf28b469ba194bd/humanlike-typing.ts","title":"Type clipboard like a human","command":"type-clipboard-like-a-human","content":"I haven't quite dialed in the random delays as well as I'd like, but it gets the job done :]\r\n\r\n[Open humanlike-typing in Script Kit](https://scriptkit.com/api/new?name=humanlike-typing&url=https://gist.githubusercontent.com/trevor-atlas/17746a243dd9bbfa8062d8fb86b5fc20/raw/45b2a5cb769b76db73f70579edf28b469ba194bd/humanlike-typing.ts\")\r\n\r\n```js\r\n// Name: humanlike typing\r\n// Description: Type the contents of your clipboard as if you were a human\r\n// Author: Trevor Atlas\r\n// Twitter: @trevoratlas\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nawait hide();\r\n\r\nawait applescript(String.raw`\r\nset texttowrite to the clipboard as text\r\ntell application \"System Events\"\r\n  repeat with i from 1 to count characters of texttowrite\r\n    if (character i of texttowrite) is equal to linefeed or (character i of texttowrite) is equal to return & linefeed or (character i of texttowrite) is equal to return then\r\n      keystroke return\r\n    else\r\n      keystroke (character i of texttowrite)\r\n    end\r\n    if (character i of texttowrite) is equal to \" \" then\r\n      delay (random number from 0.01 to 0.1)\r\n    else if (character i of texttowrite) is equal to \"\\n\" then\r\n      delay (random number from 0.1 to 0.3)\r\n    else\r\n      delay (random number from 0.01 to 0.05)\r\n    end\r\n  end repeat\r\nend tell\r\n`);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-30T20:32:02Z"},{"name":"vpn","author":"Trevor Atlas","twitter":"trevoratlas","schedule":"*/15 * * * *","avatar":"https://avatars.githubusercontent.com/u/5009188?u=5d3c53983b738f8c9dba91ca5c0294fadc9a5460&v=4","user":"trevor-atlas","discussion":"https://github.com/johnlindquist/kit/discussions/1294","url":"https://gist.githubusercontent.com/trevor-atlas/45ea4ba63553e81facc93105cf52dc65/raw/a983e86ac4885afeff3928e268ad780020beffda/vpn.ts","title":"Connect to GlobalProtect VPN if not connected","command":"connect-to-globalprotect-vpn-if-not-connected","content":"\r\n[Open vpn in Script Kit](https://scriptkit.com/api/new?name=vpn&url=https://gist.githubusercontent.com/trevor-atlas/45ea4ba63553e81facc93105cf52dc65/raw/a983e86ac4885afeff3928e268ad780020beffda/vpn.ts\")\r\n\r\n```js\r\n// Name: vpn\r\n// Author: Trevor Atlas\r\n// Twitter: @trevoratlas\r\n// Schedule: */15 * * * *\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\napplescript(`\r\ntell application \"System Events\" to tell process \"GlobalProtect\"\r\n\tset connectionStatus to get help of every menu bar item of menu bar 2\r\n\tif item 1 of connectionStatus = \"Not Connected\" then\r\n\t\tclick menu bar item 1 of menu bar 2 -- Activates the GlobalProtect \"window\" in the menubar\r\n\t\ttry\r\n\t\t\tclick button \"Connect\" of window 1\r\n\t\tend try\r\n\t\tclick menu bar item 1 of menu bar 2 -- This will close the GlobalProtect \"window\" after clicking Connect/Disconnect. This is optional.\r\n\tend if\r\nend tell\r\n`);\r\n\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-30T19:36:57Z"},{"name":"Search Open PRs","description":"","avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","author":"Josh Mabry","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1284","url":"","title":"Search Open PRs","command":"search-open-prs","content":"Change the owner and repo name to desired repo and get to reviewing!\r\n\r\n[Open search-open-pr in Script Kit](https://scriptkit.com/api/new?name=search-open-pr&url=https://gist.githubusercontent.com/mabry1985/7cf5cec8d5913948aeda070f51ecfe4d/raw/64c98abcade33cdeb54604f29a06c55f05d374f1/search-open-pr.js\")\r\n\r\n```js\r\n// Name: Search Open PRs\r\n// Description: Search open PRs in a repo\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst fetch = await npm(\"node-fetch\");\r\nconst variables = {\r\n  owner: \"knapsack-labs\",\r\n  repoName: \"app-monorepo\",\r\n};\r\n\r\nlet token = await env(\"GITHUB_AUTH_TOKEN\", {\r\n  hint: `Grab a key from <a href=\"https://github.com/settings/tokens\">here</a>`,\r\n});\r\n\r\nconst query = `\r\nquery getPrs($owner: String!, $repoName: String!) {\r\n  repository(owner: $owner, name: $repoName) {\r\n    pullRequests(last: 100, states: OPEN) {\r\n      nodes {\r\n        body\r\n        createdAt\r\n        mergeable\r\n        number\r\n        state\r\n        title\r\n        updatedAt\r\n        url\r\n        author {\r\n          avatarUrl\r\n          login\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n`;\r\n\r\nasync function getPrs() {\r\n  return fetch(\"https://api.github.com/graphql\", {\r\n    headers: {\r\n      authorization: `bearer ${token}`,\r\n    },\r\n    method: \"POST\",\r\n    body: JSON.stringify({ query, variables }),\r\n  })\r\n    .then((res) => res.json())\r\n    .catch((err) => {\r\n      console.log(err);\r\n      exit();\r\n    });\r\n}\r\nconst prs = await getPrs();\r\nconst openPRs = prs.data.repository.pullRequests.nodes;\r\nconst sortedPrs = openPRs.sort(\r\n  (a, b) => Date.parse(b.createdAt) - Date.parse(a.createdAt)\r\n);\r\nconst pr = await arg(\r\n  {\r\n    placeholder: `Select a PR to view`,\r\n  },\r\n  sortedPrs.map((pr) => {\r\n    return {\r\n      name: `${pr.number} - ${pr.title}`,\r\n      preview: () =>\r\n        `<div class=\"p-2\">\r\n          <h2>${pr.number} - ${pr.title}</h2>\r\n          <hr class=\"mb-4\"/>\r\n          <p>Ready to Merge: ${pr.mergeable === \"MERGEABLE\" ? \"✅\" : \"⛔\"}</p>\r\n          <p class=\"my-4\">${md(pr.body)}</p>\r\n          <span class=\"flex flex-row\">\r\n          <p>Author: ${pr.author.login}</p>\r\n          <img class=\"w-5 h-5 ml-2\" src=\"${pr.author.avatarUrl}\" />\r\n          </span>\r\n        </div>`,\r\n      value: pr.number,\r\n    };\r\n  })\r\n);\r\n\r\nconst prInfo = sortedPrs.find((p) => p.number === pr);\r\nbrowse(prInfo.url);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-21T20:59:28Z"},{"name":"JS Expression","description":"","avatar":"https://avatars.githubusercontent.com/u/61105068?u=0a82a230343e72288a1401e7acd2c394eeea3e46&v=4","user":"alkene0005","author":"Alken E","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1283","url":"","title":"A simple calculator using js expressions","command":"a-simple-calculator-using-js-expressions","content":"\r\n[Open js-expression in Script Kit](https://scriptkit.com/api/new?name=js-expression&url=https://gist.githubusercontent.com/alkene0005/25bd8b0b560fdc4d1b582bf1c6a4ed55/raw/af15c0765269eb22b6aaa7ac207ed152c0088d3c/js-expression.js\")\r\n\r\n```js\r\n// Name: JS Expression\r\n// Description: I prefer to define it as a simple calculator\r\n\r\n// Global Objects\r\nlet arr = [1, 2, 3, 4, 5]\r\nlet obj = {name: 'Mike', age: 20}\r\n\r\n// Global Functions\r\nlet {\r\n    ceil, floor, round, trunc, abs, PI,\r\n    sin, cos, tan, log, log2, log10, exp, sqrt, cbrt, pow\r\n} = Math\r\n\r\n// Factorial\r\nlet fact = num => _.reduce(_.range(1, num + 1), (acc, i) => acc * i, 1)\r\n\r\nlet selected = await arg({\r\n    placeholder: 'Expression ...',\r\n    enter: 'Copy & Exit',\r\n    shortcuts: [{\r\n        name: 'Repalce', key: 'cmd+r', bar: 'right', onPress: async (input, {focused}) => {\r\n            setInput(evalExp(input))\r\n        }\r\n    }]\r\n}, async (input) => {\r\n    let res = input ? evalExp(input) : ''\r\n    return md(`~~~javascript\\n${res}\\n~~~`)\r\n})\r\n\r\nif (selected) await copy(evalExp(selected))\r\n\r\nfunction evalExp(input) {\r\n    let value = eval(`(${input})`)\r\n    if (typeof value == 'number') return (value % 1 != 0 ? value.toFixed(2) : value) + ''\r\n    if (typeof value == 'array') return JSON.stringify(value, null, 2)\r\n    if (typeof value == 'object') return JSON.stringify(value, null, 2)\r\n    if (typeof value == 'function') return ''\r\n}\r\n\r\n```\r\n<img width=\"768\" alt=\"image\" src=\"https://github.com/johnlindquist/kit/assets/61105068/5a168b8c-db66-4912-8cd0-afbc741b78a6\">\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-18T17:37:10Z"},{"name":"Steam","avatar":"https://avatars.githubusercontent.com/u/61105068?u=0a82a230343e72288a1401e7acd2c394eeea3e46&v=4","user":"alkene0005","author":"Alken E","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1281","url":"","title":"Quick Search Steam Game","command":"quick-search-steam-game","content":"[Install](https://scriptkit.com/api/new?name=steam-game-search&url=https://gist.githubusercontent.com/alkene0005/6dc59b6596a258f63cb774dd1206eb79/raw/c3a68d5fb11f78455efbfceebe70224bd1fc98f6/steam-game-search.js)\r\n\r\n```js\r\n// Name: Steam\r\n\r\nimport axios from 'axios'\r\nimport cheerio from 'cheerio'\r\n\r\n// Language-dependent configuration\r\nconst cc = 'US'\r\nconst l = 'english'\r\n\r\nfunction buildResult(value, image, title) {\r\n    return {\r\n        name: 'abc',\r\n        value: value,\r\n        html: `\r\n            <div class=\"flex flex-row h-full w-full\">\r\n                <img class=\"h-full\" src=\"${image}\"/>        \r\n                <h2 class=\"flex-1 flex flex-row items-center justify-center\">${title}</h2>\r\n                <div class=\"flex flex-row text-xxs items-center justify-right\">open</div>\r\n            </div>\r\n        `,\r\n    }\r\n}\r\n\r\nlet url = await arg('Keyword ...', async keyword => {\r\n    if (keyword.trim() == '') return []\r\n    let {data} = await axios.get(\r\n        'https://store.steampowered.com/search/suggest?term=' + keyword +\r\n        '&f=games&cc=' + cc + '&realm=1&l=s' + l + '&v=19040599&excluded_content_descriptors%5B%5D=3' +\r\n        '&excluded_content_descriptors%5B%5D=4&use_store_query=1&use_search_spellcheck=1&search_creators_and_tags=1'\r\n    );\r\n    let $ = cheerio.load(data);\r\n    let games = $('a').get().map(aTag => {\r\n        if ($(aTag).hasClass('match_app')) {\r\n            let name = $(aTag).find('.match_name').text();\r\n            let price = $(aTag).find('.match_subtitle').text();\r\n            let cover = $(aTag).find('.match_img img').attr('src');\r\n            let url = $(aTag).attr('href');\r\n            return buildResult(url, cover, `${name} - ${price}`)\r\n        }\r\n        if ($(aTag).hasClass('match_tag')) {\r\n            let name = $(aTag).find('.match_name span').text();\r\n            let count = $(aTag).find('.match_subtitle').text();\r\n            let url = $(aTag).attr('href');\r\n            return buildResult(url, 'https://pbs.twimg.com/profile_images/861662902780018688/SFie8jER_x96.jpg', `${name} - ${count}`)\r\n        }\r\n        if ($(aTag).hasClass('match_creator')) {\r\n            let name = $(aTag).find('.match_name').text();\r\n            let count = $(aTag).find('.match_subtitle').text();\r\n            let cover = $(aTag).find('.match_img img').attr('src');\r\n            let url = $(aTag).attr('href');\r\n            return buildResult(url, cover, `${name} - ${count}`)\r\n        }\r\n    });\r\n    return games.filter(x => x);\r\n});\r\n\r\nawait $`open ${url}`\r\n\r\n```\r\n<img width=\"768\" alt=\"image\" src=\"https://github.com/johnlindquist/kit/assets/61105068/c38983bb-f26f-4bb5-a556-9b1b995f38df\">\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-18T03:49:41Z"},{"avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","author":"Josh Mabry","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1272","url":"","title":"Google PaLM2 Chat","command":"google-palm2-chat","content":"The LLM is still in early access but you can sign up for the waitlist [here](https://developers.generativeai.google/)\r\n\r\n[Open palm-chat in Script Kit](https://scriptkit.com/api/new?name=palm-chat&url=https://gist.githubusercontent.com/mabry1985/54c10fa4594fb5a5edcf65c1db55b44b/raw/8460dafe391bd8bb09593e35e2fb89764d27f521/palm-chat.js\")\r\n\r\n```js\r\nlet { GoogleAuth } = await import(\"google-auth-library\");\r\nlet { DiscussServiceClient } = await import(\"@google-ai/generativelanguage\");\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst MODEL_NAME = \"models/chat-bison-001\";\r\nconst API_KEY = await env(\"PALM_API_KEY\", {\r\n  hint: `Signup for waitlist here <a href=\"https://developers.generativeai.google/\">here</a>`,\r\n});\r\n\r\nconst client = new DiscussServiceClient({\r\n  authClient: new GoogleAuth().fromAPIKey(API_KEY),\r\n});\r\n\r\nconst config = {\r\n  model: MODEL_NAME,\r\n  temperature: 0.75,\r\n  candidateCount: 1,\r\n  top_k: 40,\r\n  top_p: 0.95,\r\n};\r\n\r\nconst chatHistory = [];\r\n\r\nconst generateText = async (text) => {\r\n  chatHistory.push({ content: text });\r\n  const response = await client.generateMessage({\r\n    ...config,\r\n    prompt: {\r\n      context: \"You are a funny and helpful assistant.\",\r\n      messages: chatHistory,\r\n    },\r\n  });\r\n\r\n  log(response);\r\n  log(response[0].filters);\r\n  if (response[0].filters.length > 0) {\r\n    return `The model has rejected your input. Reason: ${response[0].filters[0].reason}`;\r\n  } else {\r\n    chatHistory.push({ content: response[0].candidates[0].content });\r\n    return response[0].candidates[0].content;\r\n  }\r\n};\r\n\r\nawait chat({\r\n  onSubmit: async (input) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await generateText(input);\r\n      let message = md(response);\r\n      chat.addMessage(\"\");\r\n      chat.setMessage(-1, message);\r\n    } catch (e) {\r\n      console.log(e);\r\n      chat.addMessage(\"\");\r\n      chat.setMessage(-1, md(\"Error: \" + e.message));\r\n    }\r\n    setLoading(false);\r\n  },\r\n});\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-06T01:54:00Z"},{"name":"Static to Dynamic","description":"","author":"Josh Mabry","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","discussion":"https://github.com/johnlindquist/kit/discussions/1271","url":"","title":"Static to dynamic import converter","command":"static-to-dynamic-import-converter","content":"I got tired of typing out the conversion when pulling in script examples so I made this quick script to convert them\r\n\r\n[Open static-to-dynamic in Script Kit](https://scriptkit.com/api/new?name=static-to-dynamic&url=https://gist.githubusercontent.com/mabry1985/13b951630f05eebc35c66d8e706dee70/raw/70fb4529876ef97fd18351793d329afca945079e/static-to-dynamic.js\")\r\n\r\n```js\r\n// Name: Static to Dynamic\r\n// Description: Convert static import to dynamic import\r\n// e.g. import { Foo } from \"bar\";\r\n// to let { Foo } = await import(\"bar\");\r\n// Author: Josh Mabry\r\n// Twitter: @AI_Citizen\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst text = await getSelectedText();\r\n\r\nfunction convertImportString(input) {\r\n  const importRegex = /import\\s+({[^}]+})\\s+from\\s+\"([^\"]+)\";/;\r\n\r\n  if (!importRegex.test(input)) {\r\n    throw new Error(\"Invalid import string format\");\r\n  }\r\n\r\n  const [_, importList, modulePath] = input.match(importRegex);\r\n  const output = `let ${importList} = await import(\"${modulePath}\");`;\r\n  return output;\r\n}\r\n\r\nconst output = convertImportString(text);\r\n\r\nawait setSelectedText(output);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-04T18:07:43Z"},{"menu":"Password Manager","description":"","shortcut":"command shift ]","author":"Rohit Kumar Saini","avatar":"https://avatars.githubusercontent.com/u/40729749?u=4e80b97c7ab43ffb84b6d974731c64e6bc2992b7&v=4","user":"rockingrohit9639","twitter":"rohit_codes","discussion":"https://github.com/johnlindquist/kit/discussions/1262","url":"https://gist.githubusercontent.com/rockingrohit9639/586628e63330061cdeaff35cbc7dec05/raw/231215f7064ce763ffd4b2aa93ebb00c0341f080/password-manager.ts","title":"A simple Password Manager","command":"a-simple-password-manager","content":"# Password Manager\r\nA simple password manager to add new passwords and copy from one of the existing list of passwords. Passwords are saved after encryption.\r\n\r\n<hr>\r\n\r\n[Open password-manager in Script Kit](https://scriptkit.com/api/new?name=password-manager&url=https://gist.githubusercontent.com/rockingrohit9639/586628e63330061cdeaff35cbc7dec05/raw/231215f7064ce763ffd4b2aa93ebb00c0341f080/password-manager.ts\")\r\n\r\n\r\n```js\r\n// Menu: Password Manager\r\n// Description: Manager all your passwords justing using few keys\r\n// Shortcut: command shift ]\r\n// Author: @rockingrohit9639\r\n\r\nimport \"@johnlindquist/kit\";\r\nconst { nanoid } = await npm(\"nanoid\");\r\nconst Cryptr = await npm(\"cryptr\");\r\n\r\nconst CRYPTR_KEY = await env(\"CRYPTR_KEY\");\r\nconst cryptr = new Cryptr(CRYPTR_KEY);\r\n\r\nconst { passwords, write } = await db(\"passwords\", { passwords: [] });\r\n\r\ntype Option = {\r\n  name: string;\r\n  description: string;\r\n  value: \"ADD_NEW_PASSWORD\" | \"COPY_PASSWORD\";\r\n};\r\n\r\nconst PM_OPTIONS: Option[] = [\r\n  {\r\n    name: \"Add New Password\",\r\n    description: \"Add a new password to the database\",\r\n    value: \"ADD_NEW_PASSWORD\",\r\n  },\r\n  {\r\n    name: \"Copy Password\",\r\n    description: \"Copy one of the saved passwords\",\r\n    value: \"COPY_PASSWORD\",\r\n  },\r\n];\r\n\r\nconst choice: Option[\"value\"] = await arg(\r\n  \"What would you like to do?\",\r\n  PM_OPTIONS\r\n);\r\n\r\n/** Doing operation on basis of choice */\r\nif (choice === \"ADD_NEW_PASSWORD\") {\r\n  addNewPassword();\r\n}\r\n\r\nif (choice === \"COPY_PASSWORD\") {\r\n  listAndCopyPassword();\r\n}\r\n\r\nasync function addNewPassword() {\r\n  const title = await arg({\r\n    placeholder: \"Title\",\r\n    hint: \"Title for which your password belongs e.g Facebook etc.\",\r\n  });\r\n  const password = await arg({\r\n    placeholder: \"Password\",\r\n    hint: `Password you want to save for ${title}`,\r\n  });\r\n\r\n  /** Encrypting the password */\r\n  const encryptedPassword = cryptr.encrypt(password);\r\n\r\n  const id = nanoid(5);\r\n  const newPassword = { id, title, password: encryptedPassword };\r\n  passwords.push(newPassword);\r\n\r\n  /** Saving the password in db */\r\n  await write();\r\n  notify(`Password for ${title} added successfully!`);\r\n}\r\n\r\nasync function listAndCopyPassword() {\r\n  const passwordToCopy = await arg(\r\n    \"Which password would you like to copy ?\",\r\n    () =>\r\n      passwords.map(({ title, password }) => ({ name: title, value: password }))\r\n  );\r\n\r\n  /** Decrypting the password */\r\n  const decryptedPassword = cryptr.decrypt(passwordToCopy);\r\n\r\n  /** Copying the password to clipboard */\r\n  copy(decryptedPassword);\r\n  notify(\"Password copied to you clipboard!\");\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-21T04:44:25Z"},{"name":"Pomodoro","description":"","avatar":"https://avatars.githubusercontent.com/u/597015?u=2b8beadec0f4e76d470758c8b948c21b2d749605&v=4","user":"LukeCarrier","author":"Luke Carrier","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1261","url":"https://gist.githubusercontent.com/LukeCarrier/b5800f573f43fc7acf4ea327f6e396b4/raw/d75fe7d8b4428500457cb2e6de3e2b11e1c9353c/pomodoro.ts","title":"Silly Pomodoro timer","command":"silly-pomodoro-timer","content":"Just a small hack to replace the many menu bar applications I've used over the years, and an excuse to have a play with Script Kit. I'm glad I did -- it's awesome 😁 \r\n\r\n[Open pomodoro in Script Kit](https://scriptkit.com/api/new?name=pomodoro&url=https://gist.githubusercontent.com/LukeCarrier/b5800f573f43fc7acf4ea327f6e396b4/raw/d75fe7d8b4428500457cb2e6de3e2b11e1c9353c/pomodoro.ts\")\r\n\r\n```js\r\n// Name: Pomodoro\r\n// Description: A Pomodoro timer, right here!\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst HOUR_MIN = 60;\r\nconst MIN_SEC  = 60;\r\nconst SEC_MS   = 1000;\r\n\r\nconst WORK_INTERVAL_SECS = 25 * 60;\r\nconst REST_INTERVAL_SECS =  5 * 60;\r\n\r\nconst WORK_INTERVAL_ICON = \"🍅\";\r\nconst REST_INTERVAL_ICON = \"🏝️\";\r\nconst COMPLETE_ICON      = \"🎉\";\r\n\r\nconst WIDGET_HTML = `\r\n  <div class=\"flex text-6xl items-center justify-center rounded-full\">\r\n    {{icon}}\r\n  </div>\r\n  <div class=\"flex-1\">\r\n    <h4 class=\"pr-6 font-medium text-secondary-900\">{{goal}}</h4>\r\n    <div class=\"mt-1 text-secondary-500\">{{timer}}</div>\r\n  </div>\r\n`;\r\nconst DING_JS = `new Audio(\"../kenvs/personal/assets/ding.ogg\").play();`;\r\nconst DING_SECS = 5;\r\n\r\nfunction formatTimeRemaining(seconds: number): string {\r\n  const totalMinutes = Math.floor(seconds / HOUR_MIN);\r\n  const formatSeconds = String(seconds % MIN_SEC).padStart(2, \"0\");\r\n  const formatMinutes = String(totalMinutes % MIN_SEC).padStart(2, \"0\");\r\n  return `${formatMinutes}:${formatSeconds}`;\r\n}\r\n\r\nconst goal = await arg(\"What's your goal this interval?\")\r\n\r\nconst timerWidget = await widget(WIDGET_HTML, {\r\n  title: \"Pomodoro\",\r\n  state: { icon: \"\", goal: \"\", timer: \"\" },\r\n\r\n  containerClass: \"p-6 max-w-sm mx-auto rounded-xl shadow-lg flex items-center space-x-4\",\r\n  alwaysOnTop: true,\r\n  preventEscape: true,\r\n  minimizable: false,\r\n  maximizable: false,\r\n  fullscreenable: false,\r\n  opacity: 0.45,\r\n\r\n  // If these are below the minimum size of a widget on macOS (160x120) the\r\n  // widget appears as a small white box without any content until manually\r\n  // resized.\r\n  width: 340,\r\n  height: 120,\r\n});\r\n\r\nfunction doInterval(icon: string, goal: string, interval_secs: number): Promise<void> {\r\n  timerWidget.setState({ icon, goal, timer: formatTimeRemaining(interval_secs) });\r\n\r\n  return new Promise<void>((resolve) => {\r\n    const startTime = new Date().getTime();\r\n    const timerInterval = setInterval(() => {\r\n      const thisTime = new Date().getTime();\r\n      const elapsedSeconds = Math.round((thisTime - startTime) / SEC_MS);\r\n      const remainingSeconds = interval_secs - elapsedSeconds;\r\n      if (remainingSeconds >= 0) {\r\n        timerWidget.setState({ icon, goal, timer: formatTimeRemaining(remainingSeconds) });\r\n      } else {\r\n        clearInterval(timerInterval);\r\n        timerWidget.executeJavaScript(DING_JS).finally(() => {\r\n          resolve();\r\n        });\r\n      }\r\n    }, 1000);\r\n  });\r\n}\r\n\r\nawait doInterval(WORK_INTERVAL_ICON, goal, WORK_INTERVAL_SECS);\r\nawait doInterval(REST_INTERVAL_ICON, `Break after ${goal}`, REST_INTERVAL_SECS);\r\ntimerWidget.setState({ icon: COMPLETE_ICON, goal: `${goal} all done!`, timer: \"That's another interval complete.\" });\r\nsetTimeout(() => timerWidget.close(), DING_SECS * 1000);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-20T19:31:28Z"},{"name":"Json To Yaml Converter","author":"Eddie","twitter":"schmedu_","avatar":"https://avatars.githubusercontent.com/u/8198764?u=8159fd937f0836c330f0aed6c4d518c48461072e&v=4","user":"Schmedu","discussion":"https://github.com/johnlindquist/kit/discussions/1259","url":"https://gist.githubusercontent.com/Schmedu/c904124d7a9cd4b9fd25485c9d8c36d0/raw/75255898c5293cbe648e1f7c521bc5a93c120e7b/json2yaml.ts","title":"JSON 2 YAML","command":"json-2-yaml","content":"[Open json2yaml in Script Kit](https://scriptkit.com/api/new?name=json2yaml&url=https://gist.githubusercontent.com/Schmedu/c904124d7a9cd4b9fd25485c9d8c36d0/raw/75255898c5293cbe648e1f7c521bc5a93c120e7b/json2yaml.ts\")\r\n\r\n```js\r\n// Name: Json To Yaml Converter\r\n// Author: Eduard Uffelmann\r\n// Twitter: @schmedu_\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport * as yaml from \"js-yaml\";\r\n\r\nlet filePath = await getSelectedFile();\r\nlet content = await readJson(filePath);\r\n\r\nlet result = yaml.dump(content);\r\n\r\nlet todo = await mini(\"What to do?\", [\"Copy\", \"Save\"]);\r\nif (todo === \"Copy\") {\r\n    await copy(result);\r\n} else {\r\n    await writeFile(filePath.replace(\".json\", \".yaml\"), result);\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-17T10:31:51Z"},{"name":"Get GitHub Commits Messages Since Tag","description":"","author":"John Lindquist","twitter":"johnlindquist","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","discussion":"https://github.com/johnlindquist/kit/discussions/1254","url":"https://gist.githubusercontent.com/johnlindquist/e56b9ad663cd56c947cc528c5f1c9f96/raw/a10ac8f6d49ebf961fd08013aec4f9b998e1024c/get-commits.ts","title":"Get GitHub Commit Messages Since Tag","command":"get-github-commit-messages-since-tag","content":"\r\n[Open get-commits in Script Kit](https://scriptkit.com/api/new?name=get-commits&url=https://gist.githubusercontent.com/johnlindquist/e56b9ad663cd56c947cc528c5f1c9f96/raw/a10ac8f6d49ebf961fd08013aec4f9b998e1024c/get-commits.ts)\r\n\r\n```js\r\n// Name: Get GitHub Commits Messages Since Tag\r\n// Description: Get all commit messages since a tag\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet { Octokit } = await import(\"@octokit/rest\")\r\n\r\nlet ownerRepo = await arg(\"Enter username/repo. Example: johnlindquist/kit\")\r\nlet [owner, repo] = ownerRepo.split(\"/\")\r\nlet tag = await arg(\"Tag. Example: v1.54.53\")\r\n\r\nlet client = new Octokit({\r\n  auth: await env(\"GITHUB_PERSONAL_ACCESS_TOKEN\"),\r\n})\r\n\r\nlet page = 1\r\nlet hasMorePages = true\r\nlet messages = []\r\n\r\nlet ref = null\r\nlet tagPage = 1\r\nwhile (!ref) {\r\n  let listTags = await client.repos.listTags({\r\n    owner,\r\n    repo,\r\n    per_page: 100,\r\n    name: tag,\r\n    page: tagPage,\r\n  })\r\n\r\n  tagPage++\r\n  ref = listTags.data.find(t => t.name === tag).commit.sha\r\n}\r\n\r\nlet commit = await client.repos.getCommit({\r\n  owner,\r\n  repo,\r\n  ref,\r\n})\r\n\r\nlet since = commit.data.commit.author.date\r\n\r\nwhile (hasMorePages) {\r\n  let data = await client.repos.listCommits({\r\n    owner,\r\n    repo,\r\n    since,\r\n    per_page: 100,\r\n    page: page,\r\n  })\r\n\r\n  hasMorePages = data.data.length === 100\r\n  messages = messages.concat(data.data.map(c => c.commit.message))\r\n\r\n  page++\r\n}\r\n\r\nlet text = messages.join(\"\\n\\n\")\r\n\r\nif (env?.[\"GITHUB_SCRIPTKIT_TOKEN\"]) {\r\n  let response = await createGist(text, {\r\n    description: `Commit messages since ${tag}`,\r\n    isPublic: false,\r\n    fileName: \"commit-messages.txt\",\r\n  })\r\n\r\n  open(response.html_url)\r\n\r\n  debugger\r\n} else {\r\n  await editor(text)\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-10T16:08:12Z"}]