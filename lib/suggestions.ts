export const SUGGESTIONS = [
  'Clipboard Summarizer\nUse clipboard.readText() and chat() to automatically summarize whatever text is on the clipboard.',
  'Image-Based Chat Classifier\nDrop an image with await drop(), then pass it to an AI classification API, and display the label in a div().',
  'Audio Diary via mic()\nStart recording with mic.start(), then stop with mic.stop() and save the audio to a daily .webm file.',
  'Auto-Generate a README\nUse template() with placeholders for Project Name, Description, Installation, etc., then open in editor() for user customization.',
  'Snippet Collector\nCopy code from the clipboard, then store it in a db() for easy snippet retrieval. Use arg() to search saved snippets.',
  'Drop-to-Translate\nDrop multiple text files with await drop(), read them, and translate each line using an API, showing progress in term() or chat().',
  'Micro Quick Note\nUse micro() to quickly collect a note, then append it to a log file with timestamps.',
  'Git Branch Switcher with select()\nUse exec() to list local branches, display in a select() prompt for multi-branch management, and switch branches interactively.',
  'Terminal Commands Runner\nProvide a list of preset commands in a micro() prompt. On selection, run the chosen command in term().',
  'Custom Cron Scheduler\nLeverage the // Schedule: "0 * * * *" comment to demonstrate how to automate a job with Script Kit\'s scheduling syntax.',
  'Markdown Blog Editor\nOpen an editor() for drafting a blog post in Markdown, then preview changes in a side div() using setPanel() or setPreview().',
  'Multi-step Form\nUse fields() for personal details, then arg() for job role selection, building out a multi-step data collection script.',
  'Drag & Drop Video Converter\ndrop() a video file, call exec(ffmpeg ...) to convert it to .mp4, then notify() when done.',
  'AI Chat to Translate Phrases\nCombine chat() and an external translation API to let the user type phrases in different languages and get immediate translations.',
  'System Stats Widget\nUse widget() to show CPU, RAM usage, and real-time data in a small floating window, updated every few seconds.',
  'Automate GitHub Issue Filing\nUse fields() to gather a title and description, then call a GitHub API with post() to create an issue automatically.',
  'Bulk SSH Command\nProvide a list of servers with arg() or fields() and run a command on each server using exec("ssh user@host \'cmd\'"), collecting results.',
  'Micro CLI Cheat Sheet\nUse micro() to quickly search known CLI commands (like docker, kubectl, etc.) stored in db() and show usage examples.',
  'Multi-file JSON Merge\nLet users drop() multiple JSON files, merge their contents, and open an editor() with the merged result.',
  'Clipboard-to-Markdown\nMonitor clipboard.readText() and convert the text to Markdown with md(), then show it in a div() preview.',
  'Audio Key Trigger\nUse mic() to detect when a loud sound occurs, then run a certain function or notify() the user.',
  'TS Playground\nLet users write TypeScript in editor(), then compile and run it using exec("ts-node"), displaying the results in a div().',
  'Local Weather select()\nProvide a list of cities in select(), fetch the weather from an API, then show daily forecasts in a nice table in div().',
  'Clipboard Image Preview\nawait clipboard.readImage(), display it in div(), and optionally store it in db() for a quick "clipboard history" of images.',
  'File Diff in editor()\nSelect two files with selectFile() or arg(), then do a diff with exec("diff file1 file2") and show the result in the editor().',
  'Automatic Meeting Notes\nRecord audio with mic() and transcribe with an external service, then open the text in editor() for final editing.',
  'Code Linter Helper\nScan a codebase using exec("eslint"), parse the results, and present them in an interactive list with micro() to fix or ignore issues.',
  'Term-based File Explorer\nDisplay a small embedded terminal with term("ls -la"), let the user navigate with commands, then pick a file or folder from the output.',
  'SSH Key Generator\nUse exec("ssh-keygen -t rsa ..."), prompt the user for passphrase in arg() or fields(), and store it in db().',
  'Recurring Journal Prompt\nA scheduled script (// Schedule: daily) that opens an editor() with a "Today\'s reflection" template, saving to a daily .md file.',
  'Audio Speed Changer\nDrop an audio file with drop(), then prompt for a playback speed in arg(), use exec("ffmpeg ... -filter:a atempo="), and produce a new file.',
  'Transcribe Videos\nDrop multiple video files, call a speech-to-text API, and show transcripts in div() or store them in your db().',
  'PDF Watermark Tool\nUse drop() to select PDF files, then exec("pdftk ...") or a Node library to watermark them, displaying progress in micro().',
  'Startup Scripts Manager\nShow a menu with menu([{...}]) to manage which script runs on system startup (like checking or unchecking entries).',
  'Markdown to Slideshow\nTake a Markdown file in editor(), parse sections, and open a widget() with arrow key navigation to present slides.',
  'Playlist Organizer\nDrop multiple audio files, reorder them in a select() multi-choice, rename them, and create an M3U playlist.',
  'Daily Affirmation Prompt\nUse // Schedule: 9am to open a div() with a random uplifting quote or affirmation, letting the user mark it as read.',
  "Task Timer\nStart a countdown in div(), beep when time's up, use onClick() to reset or add 5 minutes.",
  'Multi-file Rename with Progress\nUse drop() to pick files, rename each with arg() or auto-scheme, show a progress bar in micro().',
  'GitHub Gist Search\nfields() to gather a gist keyword, get() the GitHub Gist API, then display results in micro() or select().',
  'Chat-based Shell\nchat() that sends messages as commands to exec() and returns the output as the AI\'s "reply." Essentially a CLI in a chat UI.',
  'Resume Generator\nfields() for personal info, template() for a fancy resume, open in editor() for final touches, then use exec("pandoc...") to PDF.',
  'Scoring Tool for CSV\ndrop() a CSV of items, open editor() to manipulate data, use md() preview for a dynamic scoreboard.',
  "Social Media Cross-Poster\nfields() for tweet/LinkedIn text, then use post() to each platform's API (Twitter, LinkedIn) with one click.",
  'Clipboard Watcher for Emails\nwhile(true) { check clipboard for new text, parse any email addresses, store them in a db() }.',
  'Mic or Webcam Activation Shortcut\nRegister a global hotkey with registerShortcut("cmd shift m", fn) to quickly record or snap a photo.',
  'Chat GPT Code Reformatter\nchat() style UI to paste code, AI returns a refactored or commented version, user can copy from div().',
  'Interactive Disk Cleanup\nShow large files in select() with multi-choice, delete them with remove() or move them, show a progress bar.',
  'DNS Checker\nfields() for a domain list, run exec("nslookup") or call an API, then show results in a div() table.',
  'Website Uptime Monitor\n// Schedule: "*/5 * * * *" calls get(url), writes status to db(), and notify() on downtime.',
  'Batch Download\nProvide a list of URLs in editor(), parse, then download() each file to a target folder, showing progress in micro().',
  'Image Classification Chat\nDrop an image to await drop(), call an AI classification model, present the results as a chat conversation.',
  'JS Code Snippets to Gist\neditor() for code snippet, auto-post to GitHub Gist via post(), return the gist URL in notify().',
  'Environment Setup\nfields() for Node version, Python version, etc., run exec("nvm use ..."), pyenv local ..., or similar commands.',
  'Clipboard to JSON\nawait clipboard.readText(), parse lines, transform to JSON structure in editor(), then writeFile().',
  'Thumbnail Extractor from Video\nDrop .mp4 with drop(), run exec("ffmpeg -i ... -ss 00:00:01.000 -vframes 1 thumbnail.jpg"), then reveal file.',
  'Audio Soundboard\nUse widget() with multiple buttons that playAudioFile() for quick sound effects.',
  'HTML to PDF\nDrop .html or fetch from a URL, convert with exec("wkhtmltopdf ..."), show result in a div() with a "View PDF" link.',
  'AI Chat Markdown\nType a question in chat(), get a markdown-coded response, then show a div() preview or open in editor().',
  'Image Rotator with select()\nselectFile() multiple images, choose rotation angle in arg(), run exec("convert") or Node library, show progress in micro().',
  'Focus Timer Widget\nwidget() with a countdown and a "Take a Break" button, beep on completion.',
  'Local Package Inspector\nexec("npm ls --json"), parse JSON in db(), show modules in select() to see dependencies or version info.',
  'Clipboard OTP Reader\nWatch the clipboard for short numeric strings (like 2FA codes), store them in a mini log with db().',
  'Logbook for Git Commits\nexec("git log"), parse each commit, store summary in db(), open a div() that lists them for quick searching.',
  'File-based Spell Checker\nDrop .md or .txt files, run exec("aspell") or a Node library, show potential corrections in micro().',
  'Screenshots to Cloud\nUse a global hotkey to capture screenshot (via system command), then upload to Cloud (S3 or similar), returning a shareable link.',
  'Website Speed Tester\nEnter a URL in arg(), run exec("curl --write-out ..."), parse results, show metrics in div().',
  'Comment Out Unused Imports\nLet user selectFile() for code files, parse each for unused imports, ask user in micro() which ones to comment out.',
  'Clip Audio\nDrop an audio file, prompt for start/end time in fields(), run exec("ffmpeg -ss start -to end"), show new file path.',
  'Window Title Monitor\nUse exec("osascript...") or a Windows alternative to get the active window title periodically, log usage stats to a CSV.',
  'Live Chat with a Robot\nchat() that uses a custom AI backend, stores context in a local JSON db(), letting you have a persistent conversation.',
  'Date-based Sorting\ndrop() a folder, list files sorted by creation or modification date in a div(), let user delete or move older ones.',
  'Script Snippet Marketplace\nUse menu() to browse user-submitted script snippets from a gist or API. Clicking one auto-saves it to your local scripts.',
  'Cron-based Git Pull\n// Schedule: "0 2 * * *" to automatically exec("git pull") in a specified project directory each night.',
  'Database Migration Wizard\nfields() to gather DB credentials, read from an old DB, write to the new DB, show progress in micro().',
  'Automated PDF Splitting\nDrop a PDF, arg() for page ranges, run exec("pdftk input.pdf cat 1-5 output partial1.pdf"), and beep on completion.',
  'Clipboard Calculator\nWatch the clipboard for math expressions, evaluate them automatically, and notify() the result.',
  'Process Killer with micro()\nDisplay a list of processes from exec("ps -aux"), select multiple with micro() or select() multi, then kill them.',
  'File Compare & Merge in editor()\nDrop two text files, open them side by side in an editor() with placeholders for merging lines.',
  'Network Speed Graph\nShow a real-time graph in widget() while running exec("speedtest-cli") repeatedly.',
  'AI Chat Code Lint\nCopy code to clipboard, chat() with an AI to lint/fix it, then auto-replace on the clipboard.',
  'Interactive Branch Commits\nselect() a git branch, then show a micro() of commits. Choose one to see details or do a rebase/merge.',
  'Voice-controlled Prompt\nUse mic() to transcribe voice commands, interpret them (like "Open Chrome," "Start Slack"), run exec() accordingly.',
  'Calendar Poll\nfields() for times/dates, show them in a select() to let a group pick the best meeting time, store result in db().',
  'Bulk Password Hasher\nInput a list of plaintexts in editor(), run them through crypto.createHash("sha256"), display results in div() or store in db().',
  'Terminal-based Chat\nterm() to show a local chat server, letting multiple users on the same network communicate in real-time.',
  'Wallpaper Rotator\nDrop a folder of images, set a new wallpaper every hour with system-specific commands (osascript or registry changes).',
  'Time Series Data Plot\nLet user drop a CSV of time series data, generate a quick chart in widget() with a JavaScript chart library.',
  'Auto-commit & Push\nfields() for commit message, exec("git add -A && git commit ... && git push"), then notify("Done").',
  'Custom Audio Alarms\n// Schedule: "30 8 * * 1-5" plays a custom alarm via playAudioFile() on weekdays at 8:30 AM.',
  "Local BBS Terminal\nUse term() to connect to a local server or old-school BBS in a script's prompt.",
  'Screenshot to Markdown\nHotkey triggers a screenshot, uploads it to Cloud, automatically inserts a ![Alt Text](URL) snippet into the clipboard.',
  'Distributed Log Aggregator\nLet user specify multiple servers in fields(), exec("ssh user@host \'tail /var/log/syslog\'") in parallel, combine in db().',
  'Docker Management\nShow containers in select(), pick which to stop/restart, automatically run exec("docker stop ...").',
  'Clipboard Word Translator\nWatch the clipboard for new text, auto-translate the single word to multiple languages, show in notify().',
  'Backup .env Files\nSearch for .env in multiple repos, copy them to a secure location with encryption (exec("gpg")).',
  'Browser Tab Reader\nexec("osascript ...") or other OS tooling to read open browser tabs, then show them in a select() to close or reorder.',
  'Script-Kit Package Maker\nGather user input for name, version, description, auto-generate a new script kit package structure with template().',
  'Audio Joiner\nDrop multiple audio files, choose the order in select(), run exec("sox") or ffmpeg to concatenate them into one.',
  'One-liner TTS\narg() for a phrase, then say() the text immediately. Provide a quick way to "hear" text.',
] as const

export function getRandomSuggestions(count: number = 8): { display: string; full: string }[] {
  // Create an array of indices and shuffle them using Math.random
  const indices = Array.from({ length: SUGGESTIONS.length }, (_, i) => i)
  for (let i = indices.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[indices[i], indices[j]] = [indices[j], indices[i]]
  }

  // Get the first 'count' suggestions using the shuffled indices
  return indices.slice(0, count).map(i => ({
    display: SUGGESTIONS[i].split('\n')[0],
    full: SUGGESTIONS[i],
  }))
}
