generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("NEON_POSTGRES_POSTGRES_PRISMA_URL")
  directUrl = env("NEON_POSTGRES_POSTGRES_URL_NON_POOLING")
}

model User {
  id          String   @id @default(uuid())
  githubId    String   @unique
  username    String
  verifications Verification[]
  favorites   Favorite[]
  scripts     Script[]
  requestedBy Script[] @relation("RequestedBy")
  usage       Usage[]
  installs    Install[]
}

model Script {
  id            String          @id @default(uuid())
  requestId     String?         @unique
  title         String
  summary       String?
  content       String
  dashedName    String?
  uppercaseName String?
  starred       Boolean         @default(false)
  saved         Boolean         @default(false)
  ownerId       String
  createdAt     DateTime        @default(now())
  prompt        String?
  gistUrl       String?
  isRequest     Boolean         @default(false)
  parentId      String?
  repoUrl       String?
  requestedById String?
  sponsorId     String?
  sponsored     Boolean         @default(false)
  status        ScriptStatus    @default(ACTIVE)
  verifications Verification[]
  favorites     Favorite[]
  installs      Install[]
  owner         User            @relation(fields: [ownerId], references: [id])
  parent        Script?         @relation("ScriptForks", fields: [parentId], references: [id])
  children      Script[]        @relation("ScriptForks")
  requestedBy   User?           @relation("RequestedBy", fields: [requestedById], references: [id])
  sponsor       Sponsor?        @relation(fields: [sponsorId], references: [id])
  versions      ScriptVersion[]
  tags          Tag[]           @relation("ScriptTags")
}

model ScriptVersion {
  id        String   @id @default(uuid())
  scriptId  String
  content   String
  createdAt DateTime @default(now())
  script    Script   @relation(fields: [scriptId], references: [id])
}

model Tag {
  id      String   @id @default(uuid())
  name    String   @unique
  scripts Script[] @relation("ScriptTags")
}

model Sponsor {
  id      String   @id @default(uuid())
  name    String
  logoUrl String?
  website String?
  scripts Script[]
}

model Usage {
  id     String   @id @default(uuid())
  userId String
  date   DateTime @default(now()) @db.Date
  count  Int      @default(0)
  user   User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model Verification {
  id        String   @id @default(uuid())
  userId    String
  scriptId  String
  createdAt DateTime @default(now())
  script    Script   @relation(fields: [scriptId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, scriptId])
  @@map("Like")
}

model Install {
  id        String   @id @default(uuid())
  userId    String?
  scriptId  String
  ip        String
  createdAt DateTime @default(now())
  script    Script   @relation(fields: [scriptId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  scriptId  String
  createdAt DateTime @default(now())
  script    Script   @relation(fields: [scriptId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, scriptId])
}

enum ScriptStatus {
  ACTIVE
  REQUESTED
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}
